/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../elix/src/AriaRoleMixin.js":
/*!************************************!*\
  !*** ../elix/src/AriaRoleMixin.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return AriaRoleMixin; });\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n/**\n * Lets a component define its ARIA role through a `role` state member\n * \n * Among other things, this allows a class or mixin to define a default\n * role through the component's `defaultState`.\n * \n * Some mixins come with identicial support for managing an ARIA role. Those\n * mixins include [AriaListMixin](AriaListMixin),\n * [AriaMenuMixin](AriaMenuMixin), [DialogModalityMixin](DialogModalityMixin),\n * and [PopupModalityMixin](PopupModalityMixin). If you're using one of those\n * mixins, you do *not* need to use this mixin.\n *\n * @module AriaRoleMixin\n */\nfunction AriaRoleMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class AriaRole extends Base {\n\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed) {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed); }\n      if (changed.role) {\n        // Apply top-level role.\n        const { role } = this.state;\n        this.setAttribute('role', role);\n      }\n    }\n\n    // Setting the standard role attribute will invoke this property setter,\n    // which will allow us to update our state.\n    get role() {\n      return super.role;\n    }\n    set role(role) {\n      super.role = role;\n      if (!this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"rendering\"]]) {\n        this.setState({\n          role\n        });\n      }\n    }\n\n  }\n\n  return AriaRole;\n}\n\n\n//# sourceURL=webpack:///../elix/src/AriaRoleMixin.js?");

/***/ }),

/***/ "../elix/src/ArrowDirectionButton.js":
/*!*******************************************!*\
  !*** ../elix/src/ArrowDirectionButton.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _DarkModeMixin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DarkModeMixin.js */ \"../elix/src/DarkModeMixin.js\");\n/* harmony import */ var _SeamlessButton_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SeamlessButton.js */ \"../elix/src/SeamlessButton.js\");\n\n\n\n\n\n\nconst Base = \n  Object(_DarkModeMixin_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n    _SeamlessButton_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n  );\n\n\n/**\n * Button that can be used as a left or right arrow button.\n * \n * This component is used by [ArrowDirectionMixin](ArrowDirectionMixin) for its\n * default left/right arrow buttons.\n * \n * @inherits SeamlessButton\n * @mixes DarkModeMixin\n */\nclass ArrowDirectionButton extends Base {\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed);\n    // Wait for knowledge of dark mode to be set after initial render.\n    const { darkMode } = this.state;\n    if (changed.darkMode && darkMode !== null) {\n      this.$.inner.classList.toggle('darkMode', darkMode);\n    }\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_1__[\"concat\"](super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]], _template_js__WEBPACK_IMPORTED_MODULE_1__[\"html\"]`\n      <style>\n        #inner {\n          color: rgba(0, 0, 0, 0.7);\n          fill: currentcolor;\n        }\n\n        #inner:hover:not(:disabled) {\n          background: rgba(0, 0, 0, 0.2);\n          color: rgba(0, 0, 0, 0.8);\n          cursor: pointer;\n        }\n\n        #inner:disabled {\n          color: rgba(0, 0, 0, 0.3);\n        }\n\n        #inner.darkMode {\n          color: rgba(255, 255, 255, 0.7);\n        }\n\n        #inner.darkMode:hover:not(:disabled) {\n          background: rgba(255, 255, 255, 0.2);\n          color: rgba(255, 255, 255, 0.8);\n        }\n\n        #inner.darkMode:disabled {\n          color: rgba(255, 255, 255, 0.3);\n        }\n      </style>\n    `);\n  }\n\n}\n\n\ncustomElements.define('elix-arrow-direction-button', ArrowDirectionButton);\n/* harmony default export */ __webpack_exports__[\"default\"] = (ArrowDirectionButton);\n\n\n//# sourceURL=webpack:///../elix/src/ArrowDirectionButton.js?");

/***/ }),

/***/ "../elix/src/ArrowDirectionMixin.js":
/*!******************************************!*\
  !*** ../elix/src/ArrowDirectionMixin.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities.js */ \"../elix/src/utilities.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _ArrowDirectionButton_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ArrowDirectionButton.js */ \"../elix/src/ArrowDirectionButton.js\");\n\n\n\n\n\n\nconst wrap = Symbol('wrap');\n\n\n/**\n * Adds left and right arrow buttons to a carousel-like component.\n * \n * @module ArrowDirectionMixin\n * @elementrole {ArrowDirectionButton} arrowButton\n */\nfunction ArrowDirectionMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class ArrowDirection extends Base {\n\n    /**\n     * True if the arrow buttons should overlap the component contents;\n     * false if they should appear to the side of the contents.\n     * \n     * @type {boolean}\n     * @default true\n     */\n    get arrowButtonOverlap() {\n      return this.state.arrowButtonOverlap;\n    }\n    set arrowButtonOverlap(arrowButtonOverlap) {\n      const parsed = String(arrowButtonOverlap) === 'true';\n      this.setState({\n        arrowButtonOverlap: parsed\n      });\n    }\n  \n    /**\n     * The class, tag, or template used to create the left and right arrow\n     * buttons.\n     * \n     * @type {Role}\n     * @default ArrowDirectionButton\n     */\n    get arrowButtonRole() {\n      return this.state.arrowButtonRole;\n    }\n    set arrowButtonRole(arrowButtonRole) {\n      this.setState({ arrowButtonRole });\n    }\n\n    // TODO: Symbols\n    arrowButtonLeft() {\n      if (super.arrowButtonLeft) {\n        return super.arrowButtonLeft();\n      } else {\n        return this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goLeft\"]]();\n      }\n    }\n\n    arrowButtonRight() {\n      if (super.arrowButtonRight) {\n        return super.arrowButtonRight();\n      } else {\n        return this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goRight\"]]();\n      }\n    }\n  \n    get defaultState() {\n      return Object.assign(super.defaultState, {\n        arrowButtonOverlap: true,\n        arrowButtonRole: _ArrowDirectionButton_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n        orientation: 'horizontal',\n        showArrowButtons: true\n      });\n    }\n\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed) {\n      if (changed.arrowButtonRole) {\n        if (this.$.arrowButtonLeft) {\n          // Turn off focus handling for old left button.\n          Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"forwardFocus\"])(this.$.arrowButtonLeft, null);\n        }\n        if (this.$.arrowButtonRight) {\n          // Turn off focus handling for old right button.\n          Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"forwardFocus\"])(this.$.arrowButtonRight, null);\n        }\n      }\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed); }\n      if (changed.arrowButtonRole) {\n        /** @type {any} */\n        const cast = this;\n\n        _template_js__WEBPACK_IMPORTED_MODULE_2__[\"transmute\"](this.$.arrowButtonLeft, this.state.arrowButtonRole);\n        Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"forwardFocus\"])(this.$.arrowButtonLeft, cast);\n        this.$.arrowButtonLeft.addEventListener('mousedown', async (event) => {\n          // Only process events for the main (usually left) button.\n          if (event.button !== 0) {\n            return;\n          }\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n          const handled = this.arrowButtonLeft();\n          if (handled) {\n            event.stopPropagation();\n          }\n          await Promise.resolve();\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n        });\n        \n        _template_js__WEBPACK_IMPORTED_MODULE_2__[\"transmute\"](this.$.arrowButtonRight, this.state.arrowButtonRole);\n        Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"forwardFocus\"])(this.$.arrowButtonRight, cast);\n        this.$.arrowButtonRight.addEventListener('mousedown', async (event) => {\n          // Only process events for the main (usually left) button.\n          if (event.button !== 0) {\n            return;\n          }\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n          const handled = this.arrowButtonRight();\n          if (handled) {\n            event.stopPropagation();\n          }\n          await Promise.resolve();\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n        });\n      }\n      const {\n        arrowButtonOverlap,\n        canGoLeft,\n        canGoRight,\n        darkMode\n      } = this.state;\n      if (changed.arrowButtonOverlap) {\n        const buttonStyle = arrowButtonOverlap ?\n          {\n            'bottom': 0,\n            'position': 'absolute',\n            'top': 0,\n            'z-index': 1\n          } :\n          {\n            'bottom': null,\n            'position': null,\n            'top': null,\n            'z-index': null\n          };\n        Object.assign(this.$.arrowButtonLeft.style, buttonStyle, {\n          left: arrowButtonOverlap ? 0 : ''\n        });\n        Object.assign(this.$.arrowButtonRight.style, buttonStyle, {\n          right: arrowButtonOverlap ? 0 : ''\n        });\n      }\n      // Disable the left and right buttons if we can't go in those directions.\n      // WORKAROUND: We check to makes sure that canGoLeft/canGoRight state is\n      // defined (which happens once the component has items). Without that\n      // check, as of May 2019, a Chrome bug prevents the use of this mixin:\n      // multiple carousel instances on a page will have their right button\n      // initially disabled even when it should be enabled. Safari/Firefox do\n      // not exhibit that issue. Since identifying the root cause proved too\n      // difficult, this check was added.\n      if (changed.canGoLeft && canGoLeft !== null) {\n        this.$.arrowButtonLeft.disabled = !canGoLeft;\n      }\n      // See note for canGoLeft above.\n      if (changed.canGoRight && canGoRight !== null) {\n        this.$.arrowButtonRight.disabled = !canGoRight;\n      }\n      // Wait for knowledge of dark mode\n      if (changed.darkMode && darkMode !== null) {\n        // Apply dark mode to buttons.\n        if ('darkMode' in this.$.arrowButtonLeft) {\n          /** @type {any} */ (this.$.arrowButtonLeft).darkMode = darkMode;\n        }\n        if ('darkMode' in this.$.arrowButtonRight) {\n          /** @type {any} */ (this.$.arrowButtonRight).darkMode = darkMode;\n        }\n      }\n      if (changed.rightToLeft) {\n        const { rightToLeft } = this.state;\n        this.$.arrowDirection.style.flexDirection = rightToLeft ?\n          'row-reverse' :\n          'row';\n      }\n      if (changed.showArrowButtons) {\n        const display = this.state.showArrowButtons ? null : 'none';\n        this.$.arrowButtonLeft.style.display = display;\n        this.$.arrowButtonRight.style.display = display;\n      }\n    }\n\n    get showArrowButtons() {\n      return this.state.showArrowButtons;\n    }\n    set showArrowButtons(showArrowButtons) {\n      const parsed = String(showArrowButtons) === 'true';\n      this.setState({\n        showArrowButtons: parsed\n      });\n    }\n\n    /**\n     * Destructively wrap a node with elements to show arrow buttons.\n     * \n     * @param {Node} original - the node that should be wrapped by buttons\n     */\n    [wrap](original) {\n      const arrowDirectionTemplate = _template_js__WEBPACK_IMPORTED_MODULE_2__[\"html\"]`\n        <div id=\"arrowDirection\" role=\"none\" style=\"display: flex; flex: 1; overflow: hidden; position: relative;\">\n          <div\n            id=\"arrowButtonLeft\"\n            class=\"arrowButton\"\n            aria-hidden=\"true\"\n            tabindex=\"-1\"\n            >\n            <slot name=\"arrowButtonLeft\">\n              <svg id=\"arrowIconLeft\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\" style=\"height: 1em; width: 1em;\">\n                <g>\n                  <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path>\n                </g>\n              </svg>\n            </slot>\n          </div>\n          <div id=\"arrowDirectionContainer\" role=\"none\" style=\"flex: 1; overflow: hidden; position: relative;\"></div>\n          <div\n            id=\"arrowButtonRight\"\n            class=\"arrowButton\"\n            aria-hidden=\"true\"\n            tabindex=\"-1\"\n            >\n            <slot name=\"arrowButtonRight\">\n              <svg id=\"arrowIconRight\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\" style=\"height: 1em; width: 1em;\">\n                <g>\n                  <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path>\n                </g>\n              </svg>\n            </slot>\n          </div>\n        </div>\n      `;\n      _template_js__WEBPACK_IMPORTED_MODULE_2__[\"wrap\"](original, arrowDirectionTemplate.content, '#arrowDirectionContainer');\n    }\n  }\n\n  return ArrowDirection;\n}\n\n\nArrowDirectionMixin.wrap = wrap;\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ArrowDirectionMixin);\n\n\n//# sourceURL=webpack:///../elix/src/ArrowDirectionMixin.js?");

/***/ }),

/***/ "../elix/src/AttributeMarshallingMixin.js":
/*!************************************************!*\
  !*** ../elix/src/AttributeMarshallingMixin.js ***!
  \************************************************/
/*! exports provided: booleanAttributes, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"booleanAttributes\", function() { return booleanAttributes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return AttributeMarshallingMixin; });\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\nconst booleanAttributes = {\n  checked: true,\n  defer: true,\n  disabled: true,\n  hidden: true,\n  ismap: true,\n  multiple: true,\n  noresize: true,\n  readonly: true,\n  selected: true\n};\n\n\n// Memoized maps of attribute to property names and vice versa.\n// We initialize this with the special case of the tabindex (lowercase \"i\")\n// attribute, which is mapped to the tabIndex (capital \"I\") property.\nconst attributeToPropertyNames = {\n  tabindex: 'tabIndex'\n};\nconst propertyNamesToAttributes = {\n  tabIndex: 'tabindex'\n};\n\n\n/**\n * Sets properties when corresponding attributes change.\n *\n * If your component exposes a setter for a property, it's generally a good\n * idea to let devs using your component be able to set that property in HTML\n * via an element attribute. You can code that yourself by writing an\n * `attributeChangedCallback`, or you can use this mixin to get a degree of\n * automatic support.\n *\n * This mixin implements an `attributeChangedCallback` that will attempt to\n * convert a change in an element attribute into a call to the corresponding\n * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n * respects that convention, automatically mapping the hyphenated attribute\n * name to the corresponding camelCase property name.\n *\n * Example: You define a component using this mixin:\n *\n *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n *       get fooBar() { return this._fooBar; }\n *       set fooBar(value) { this._fooBar = value; }\n *     }\n *     customElements.define('my-element', MyElement);\n *\n * If someone then instantiates your component in HTML:\n *\n *     <my-element foo-bar=\"Hello\"></my-element>\n *\n * Then, after the element has been upgraded, the `fooBar` setter will\n * automatically be invoked with the initial value \"Hello\".\n *\n * Attributes can only have string values. If you'd like to convert string\n * attributes to other types (numbers, booleans), you must implement parsing\n * yourself.\n *\n * @module AttributeMarshallingMixin\n */\nfunction AttributeMarshallingMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class AttributeMarshalling extends Base {\n\n    // Handle a change to the attribute with the given name.\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(attributeName, oldValue, newValue);\n      }\n      // Sometimes there's not actually any change.\n      // We also skip setting properties if we're rendering. A component\n      // may want to reflect property values to attributes during rendering,\n      // but such attribute changes shouldn't trigger property updates.\n      if (newValue !== oldValue && !this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"rendering\"]]) {\n        const propertyName = attributeToPropertyName(attributeName);\n        // If the attribute name corresponds to a property name, set the property.\n        if (propertyName in this) {\n          this[propertyName] = castPotentialBooleanAttribute(attributeName, newValue);\n        }\n      }\n    }\n\n    static get observedAttributes() {\n      /** @type {any} */\n      const elementClass = this;\n      return attributesForClass(elementClass);\n    }\n\n  }\n\n  return AttributeMarshalling;\n}\n\n\n// Return the custom attributes for the given class.\nfunction attributesForClass(classFn) {\n\n  // We treat the HTMLElement base class as if it has no attributes, since we\n  // don't want to receive attributeChangedCallback for it.\n  if (classFn === HTMLElement) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  // See if parent class defines observedAttributes manually.\n  let baseAttributes = baseClass.observedAttributes;\n  if (!baseAttributes) {\n    // Calculate parent class attributes ourselves.\n    baseAttributes = attributesForClass(baseClass);\n  }\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName => {\n    const descriptor = Object.getOwnPropertyDescriptor(classFn.prototype, propertyName);\n    return descriptor && typeof descriptor.set === 'function';\n  });\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  const result = baseAttributes.concat(diff);\n\n  // Remove standard `style` property.\n  const styleIndex = result.indexOf('style');\n  if (styleIndex >= 0) {\n    result.splice(styleIndex, 1);\n  }\n  return result;\n}\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hyphenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hyphenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\n\n// If the given attribute name corresponds to a boolean attribute,\n// map the supplied string value to a boolean. Otherwise return as is.\nfunction castPotentialBooleanAttribute(attributeName, value) {\n  if (booleanAttributes[attributeName]) {\n    if (typeof value === 'string') {\n      return true;\n    } else if (value === null) {\n      return false;\n    }\n  }\n  return value;\n}\n\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n\n\n//# sourceURL=webpack:///../elix/src/AttributeMarshallingMixin.js?");

/***/ }),

/***/ "../elix/src/Backdrop.js":
/*!*******************************!*\
  !*** ../elix/src/Backdrop.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _AriaRoleMixin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AriaRoleMixin.js */ \"../elix/src/AriaRoleMixin.js\");\n/* harmony import */ var _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ReactiveElement.js */ \"../elix/src/ReactiveElement.js\");\n\n\n\n\n\n\nconst Base =\n  Object(_AriaRoleMixin_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n    _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n  );\n\n\n/**\n * Background element shown behind an overlay's primary content\n * \n * The backdrop is transparent by default, suggesting to the user that the\n * overlay is modeless, and they can click through it to reach the background\n * elements. For a modal variant, see [ModalBackdrop](ModalBackdrop).\n * \n * @inherits ReactiveElement\n * @mixes AriaRoleMixin\n */\nclass Backdrop extends Base {\n\n  get defaultState() {\n    return Object.assign(super.defaultState, {\n      role: 'none'\n    });\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_1__[\"html\"]`\n      <style>\n        :host {\n          height: 100%;\n          left: 0;\n          position: fixed;\n          top: 0;\n          touch-action: manipulation;\n          width: 100%;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n}\n\n\ncustomElements.define('elix-backdrop', Backdrop);\n/* harmony default export */ __webpack_exports__[\"default\"] = (Backdrop);\n\n\n//# sourceURL=webpack:///../elix/src/Backdrop.js?");

/***/ }),

/***/ "../elix/src/Button.js":
/*!*****************************!*\
  !*** ../elix/src/Button.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _AriaRoleMixin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AriaRoleMixin.js */ \"../elix/src/AriaRoleMixin.js\");\n/* harmony import */ var _ComposedFocusMixin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ComposedFocusMixin.js */ \"../elix/src/ComposedFocusMixin.js\");\n/* harmony import */ var _FocusVisibleMixin_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./FocusVisibleMixin.js */ \"../elix/src/FocusVisibleMixin.js\");\n/* harmony import */ var _KeyboardMixin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./KeyboardMixin.js */ \"../elix/src/KeyboardMixin.js\");\n/* harmony import */ var _WrappedStandardElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./WrappedStandardElement.js */ \"../elix/src/WrappedStandardElement.js\");\n\n\n\n\n\n\n\n\n\nconst Base =\n  Object(_AriaRoleMixin_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  Object(_ComposedFocusMixin_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  Object(_FocusVisibleMixin_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n  Object(_KeyboardMixin_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n    _WrappedStandardElement_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].wrap('button')\n  ))));\n\n\n// Do we need to explicitly map Space/Enter keys to a button click?\n//\n// As of February 2019, Firefox automatically translates a Space/Enter key on a\n// button into a click event that bubbles to its host. Chrome/Safari do not do\n// this automatically, so we have to do it ourselves.\n//\n// It's gross to look for a specific browser (Firefox), but it seems extremely\n// hard to feature-detect this. Even if we try to create a button in a shadow at\n// runtime and send a key event to it, Chrome/Safari don't seem to do their\n// normal mapping of Space/Enter to a click for synthetic keyboard events.\n//\n// Firefox detection adapted from https://stackoverflow.com/a/9851769/76472\n// and adjusted to pass type checks.\nconst firefox = 'InstallTrigger' in window;\nconst mapKeysToClick = !firefox;\n\n\n/**\n * Base class for custom buttons.\n * \n * `Button` wraps a standard HTML `button` element, allowing for custom styling\n * and behavior while ensuring standard keyboard and focus behavior.\n * \n * @inherits WrappedStandardElement\n * @mixes AriaRoleMixin\n * @mixes ComposedFocusMixin\n * @mixes FocusVisibleMixin\n * @mixes KeyboardMixin\n */\nclass Button extends Base {\n\n  get defaultState() {\n    return Object.assign(super.defaultState, {\n      role: 'button',\n      treatEnterAsClick: true,\n      treatSpaceAsClick: true\n    });\n  }\n\n  // Pressing Enter or Space raises a click event, as if the user had clicked\n  // the inner button.\n  // TODO: Space should raise the click on *keyup*.\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"keydown\"]](event) {\n    let handled;\n    if (mapKeysToClick) {\n      switch (event.key) {\n        case ' ':\n          if (this.state.treatSpaceAsClick) {\n            this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"tap\"]]();\n            handled = true;\n          }\n          break;\n\n        case 'Enter':\n          if (this.state.treatEnterAsClick) {\n            this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"tap\"]]();\n            handled = true;\n          }\n          break;\n      }\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"keydown\"]] && super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"keydown\"]](event));\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed);\n    if (changed.focusVisible) {\n      // Override host `outline` style supplied by FocusVisibleMixin.\n      this.style.outline = 'none';\n      const { focusVisible } = this.state;\n      this.$.inner.style.outline = focusVisible ? '' : 'none';\n    }\n  }\n\n  // Respond to a simulated click.\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"tap\"]]() {\n    const clickEvent = new MouseEvent('click');\n    this.dispatchEvent(clickEvent);\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_1__[\"html\"]`\n      <style>\n        :host {\n          display: inline-flex;\n          outline: none;\n          -webkit-tap-highlight-color: transparent;\n          touch-action: manipulation;\n        }\n        \n        #inner {\n          align-items: center; /* Edge */\n          color: inherit;\n          display: inline-flex;\n          flex: 1;\n          font-family: inherit;\n          font-size: inherit;\n          font-style: inherit;\n          font-weight: inherit;\n          height: 100%;\n          justify-content: center;\n          padding: 0;\n          position: relative;\n          text-align: initial; /* Edge */\n          width: 100%;\n        }\n      </style>\n\n      <button id=\"inner\" role=\"none\">\n        <slot></slot>\n      </button>\n    `;\n  }\n\n}\n\n\ncustomElements.define('elix-button', Button);\n/* harmony default export */ __webpack_exports__[\"default\"] = (Button);\n\n\n//# sourceURL=webpack:///../elix/src/Button.js?");

/***/ }),

/***/ "../elix/src/CalendarDay.js":
/*!**********************************!*\
  !*** ../elix/src/CalendarDay.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calendar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar.js */ \"../elix/src/calendar.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CalendarElementMixin.js */ \"../elix/src/CalendarElementMixin.js\");\n/* harmony import */ var _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ReactiveElement.js */ \"../elix/src/ReactiveElement.js\");\n\n\n\n\n\n\n\nconst Base =\n  Object(_CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n    _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n  );\n\n\n/**\n * Calendar representation of a single day.\n * \n * [A default representation of the current day in browser's default locale](/demos/calendarDay.html)\n * \n * Given a reference `date` property, this component will show a calendar\n * representation of that date.\n * \n * [CalendarDays](CalendarDays), and [CalendarMonth](CalendarMonth) instantiate\n * `CalendarDay` as the default component for rendering days.\n  * \n * All of the Elix calendar components attempt to provide full\n * [international calendar support](CalendarMonth#international-support)\n * to the extent currently possible in the user's web browser.\n* \n * @inherits ReactiveElement\n * @mixes CalendarElementMixin\n */\nclass CalendarDay extends Base {\n\n  get defaultState() {\n    return Object.assign(super.defaultState, {\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"today\"](),\n      outsideRange: false,\n      selected: false\n    });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed);\n    const classList = this.classList;\n    const { date } = this.state;\n    if (changed.date) {\n      const today = _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"today\"]();\n      const dayOfWeek = date.getDay();\n      const dayOfMonth = date.getDate();\n      const nextDate = _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"offsetDateByDays\"](date, 1);\n      const daysFromToday = Math.round(date.getTime() - today.getTime()) / _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"millisecondsPerDay\"];\n      classList.toggle('alternateMonth', Math.abs(date.getMonth() - today.getMonth()) % 2 === 1);\n      classList.toggle('firstDayOfMonth', dayOfMonth === 1);\n      classList.toggle('firstWeek', dayOfMonth <= 7);\n      classList.toggle('future', date > today);\n      classList.toggle('lastDayOfMonth', date.getMonth() !== nextDate.getMonth());\n      classList.toggle('past', date < today);\n      classList.toggle('saturday', dayOfWeek === 6);\n      classList.toggle('sunday', dayOfWeek === 0);\n      classList.toggle('today', daysFromToday == 0);\n      this.$.day.textContent = dayOfMonth.toString();\n    }\n    if (changed.date || changed.locale) {\n      const dayOfWeek = date.getDay();\n      const { locale } = this.state;\n      const weekend = dayOfWeek === _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"weekendStart\"](locale) ||\n        dayOfWeek === _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"weekendEnd\"](locale);\n      classList.toggle('weekday', !weekend);\n      classList.toggle('weekend', weekend);\n    }\n    if (changed.outsideRange) {\n      classList.toggle('outsideRange', this.state.outsideRange);\n    }\n    if (changed.selected) {\n      classList.toggle('selected', this.state.selected);\n    }\n  }\n\n  get outsideRange() {\n    return this.state.outsideRange;\n  }\n  set outsideRange(outsideRange) {\n    this.setState({\n      outsideRange\n    });\n  }\n\n  get selected() {\n    return this.state.selected;\n  }\n  set selected(selected) {\n    this.setState({\n      selected\n    });\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_2__[\"html\"]`\n      <style>\n        :host {\n          display: inline-block;\n          padding: 0.3em;\n        }\n\n        :host(.weekend) {\n          color: gray;\n        }\n\n        :host(.outsideRange) {\n          color: lightgray;\n        }\n\n        :host(.today) {\n          color: darkred;\n          font-weight: bold;\n        }\n\n        :host(.selected) {\n          background: #ddd;\n        }\n\n        #day {\n          display: block;\n          text-align: right;\n        }\n      </style>\n\n      <span id=\"day\"></span>\n    `;\n  }\n\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CalendarDay);\ncustomElements.define('elix-calendar-day', CalendarDay);\n\n\n//# sourceURL=webpack:///../elix/src/CalendarDay.js?");

/***/ }),

/***/ "../elix/src/CalendarDayButton.js":
/*!****************************************!*\
  !*** ../elix/src/CalendarDayButton.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CalendarDay_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CalendarDay.js */ \"../elix/src/CalendarDay.js\");\n/* harmony import */ var _calendar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calendar.js */ \"../elix/src/calendar.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CalendarElementMixin.js */ \"../elix/src/CalendarElementMixin.js\");\n/* harmony import */ var _SeamlessButton_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SeamlessButton.js */ \"../elix/src/SeamlessButton.js\");\n\n\n\n\n\n\n\n\nconst Base =\n  Object(_CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n    _SeamlessButton_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n  );\n\n\nclass CalendarDayButton extends Base {\n\n  get defaultState() {\n    return Object.assign(super.defaultState, {\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"today\"](),\n      outsideRange: false,\n      selected: false,\n      tabIndex: -1\n    });\n  }\n\n  get outsideRange() {\n    return this.state.outsideRange;\n  }\n  set outsideRange(outsideRange) {\n    this.setState({\n      outsideRange\n    });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"render\"]](changed);\n    /** @type {any} */ const day = this.$.day;\n    if (changed.date) {\n      day.date = this.state.date;\n    }\n    if (changed.locale) {\n      day.locale = this.state.locale;\n    }\n    if (changed.outsideRange) {\n      day.outsideRange = this.state.outsideRange;\n    }\n    if (changed.selected) {\n      day.selected = this.state.selected;\n    }\n  }\n\n  get selected() {\n    return this.state.selected;\n  }\n  set selected(selected) {\n    this.setState({\n      selected\n    });\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"template\"]]() {\n    const result = super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"template\"]];\n    // Replace default slot with calendar day.\n    const defaultSlot = _template_js__WEBPACK_IMPORTED_MODULE_3__[\"defaultSlot\"](result.content);\n    if (defaultSlot) {\n      const dayTemplate = _template_js__WEBPACK_IMPORTED_MODULE_3__[\"html\"]`\n        <elix-calendar-day id=\"day\"></elix-calendar-day>\n      `;\n      _template_js__WEBPACK_IMPORTED_MODULE_3__[\"transmute\"](defaultSlot, dayTemplate);\n    }\n    // Style outer button.\n    const styleTemplate = _template_js__WEBPACK_IMPORTED_MODULE_3__[\"html\"]`\n      <style>\n        :host {\n          border: 1px solid transparent;\n        }\n\n        :host(:hover) {\n          border-color: gray;\n        }\n\n        #day {\n          width: 100%;\n        }\n      </style>\n    `;\n    result.content.appendChild(styleTemplate.content);\n    return result;\n  }\n\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CalendarDayButton);\ncustomElements.define('elix-calendar-day-button', CalendarDayButton);\n\n\n//# sourceURL=webpack:///../elix/src/CalendarDayButton.js?");

/***/ }),

/***/ "../elix/src/CalendarDayNamesHeader.js":
/*!*********************************************!*\
  !*** ../elix/src/CalendarDayNamesHeader.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _calendar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calendar.js */ \"../elix/src/calendar.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ReactiveElement.js */ \"../elix/src/ReactiveElement.js\");\n\n\n\n\n\n\n/**\n * Header showing the localized days of the week\n * \n * [A default representation of day names in browser's default locale](/demos/calendarDayNamesHeader.html)\n * \n * All of the Elix calendar components attempt to provide full\n * [international calendar support](CalendarMonth#international-support)\n * to the extent currently possible in the user's web browser.\n * \n * In the case of this component, it will show the appropriate names of the days\n * of the week for a specific locale (or, by default, the user's current\n * locale). The day(s) associated with the weekend in that locale will also be\n * indicated. It will also correctly reflect the typical first day of the week\n * for that locale. Example: U.S. calendars typically start with Sunday as the\n * first day of a week, while British calendars typically start with Monday as\n * the first day.\n * \n * @inherits ReactiveElement\n */\nclass CalendarDayNamesHeader extends _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n\n  get defaultState() {\n    return Object.assign(super.defaultState, {\n      format: 'short',\n      locale: navigator.language\n    });\n  }\n\n  /**\n   * The format used to render the day names.\n   * \n   * @type {('long'|'narrow'|'short')}\n   * @default 'short'\n   */\n  get format() {\n    return this.state.format;\n  }\n  set format(format) {\n    this.setState({ format });\n  }\n\n  /**\n   * A string that identifies a language and a region using a BCP 47 language\n   * tag. This works the same as the `CalendarElementMixin`\n   * [locale](CalendarElementMixin#locale) property.\n   * \n   * @type {string}\n   */\n  get locale() {\n    return this.state.locale;\n  }\n  set locale(locale) {\n    this.setState({ locale });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed);\n    if (changed.format || changed.locale) {\n      const { format, locale } = this.state;\n      const formatter = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"dateTimeFormat\"](locale, {\n        weekday: format\n      });\n      const firstDayOfWeek = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"firstDayOfWeek\"](locale);\n      const weekendStart = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"weekendStart\"](locale);\n      const weekendEnd = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"weekendEnd\"](locale);\n      const date = new Date(2017, 0, 1); // A Sunday\n      for (let i = 0; i <= 6; i++) {\n        const dayOfWeek = (firstDayOfWeek + i) % 7;\n        date.setDate(dayOfWeek + 1);\n        const weekend = dayOfWeek === weekendStart || dayOfWeek === weekendEnd;\n        const dayElement = this.$[`day${i}`];\n        dayElement.classList.toggle('weekend', weekend);\n        dayElement.textContent = formatter.format(date);\n      }\n    }\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_2__[\"html\"]`\n      <style>\n        :host {\n          direction: ltr;\n          display: grid;\n          grid-template-columns: repeat(7, 1fr);\n        }\n\n        .dayOfWeek {\n          padding: 0.3em;\n          text-align: center;\n          white-space: nowrap;\n        }\n\n        .dayOfWeek.weekend {\n          color: gray;\n        }\n      </style>\n\n      <div id=\"day0\" class=\"dayOfWeek\"></div>\n      <div id=\"day1\" class=\"dayOfWeek\"></div>\n      <div id=\"day2\" class=\"dayOfWeek\"></div>\n      <div id=\"day3\" class=\"dayOfWeek\"></div>\n      <div id=\"day4\" class=\"dayOfWeek\"></div>\n      <div id=\"day5\" class=\"dayOfWeek\"></div>\n      <div id=\"day6\" class=\"dayOfWeek\"></div>\n    `;\n  }\n\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CalendarDayNamesHeader);\ncustomElements.define('elix-calendar-day-names-header', CalendarDayNamesHeader);\n\n\n//# sourceURL=webpack:///../elix/src/CalendarDayNamesHeader.js?");

/***/ }),

/***/ "../elix/src/CalendarDays.js":
/*!***********************************!*\
  !*** ../elix/src/CalendarDays.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities.js */ \"../elix/src/utilities.js\");\n/* harmony import */ var _calendar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calendar.js */ \"../elix/src/calendar.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _CalendarDay_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CalendarDay.js */ \"../elix/src/CalendarDay.js\");\n/* harmony import */ var _CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CalendarElementMixin.js */ \"../elix/src/CalendarElementMixin.js\");\n/* harmony import */ var _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ReactiveElement.js */ \"../elix/src/ReactiveElement.js\");\n\n\n\n\n\n\n\n\n\nconst Base =\n  Object(_CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n    _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n  );\n\n/**\n * A 7-column grid of days for use in a month calendar or multi-week calendar.\n * \n * [A default representation of days in the current month in browser's default locale](/demos/calendarMonth.html)\n * \n * Given a `startDate` and `dayCount`, this component will show a calendar\n * representation of that many days starting from the indicated date.\n * [CalendarMonth](CalendarMonth) uses `CalendarDays` to render the days portion\n * of the month, to which it adds headers for the month/year and the days of the\n * week.\n * \n * All of the Elix calendar components attempt to provide full\n * [international calendar support](CalendarMonth#international-support)\n * to the extent currently possible in the user's web browser.\n * \n * @inherits ReactiveElement\n * @mixes CalendarElementMixin\n * @elementrole {CalendarDay} day\n */\nclass CalendarDays extends Base {\n\n  /**\n   * Returns the day element corresponding to the given date, or null if the\n   * date falls outside this calendar week.\n   *\n   * @param {Date} date - the date to search for\n   */\n  dayElementForDate(date) {\n    const days = this.days || [];\n    return days.find(day => _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"datesEqual\"](day.date, date));\n  }\n\n  get dayCount() {\n    return this.state.dayCount;\n  }\n  set dayCount(dayCount) {\n    this.setState({\n      dayCount\n    });\n  }\n\n  /**\n   * The class, tag, or template used for the seven days of the week.\n   * \n   * @type {Role}\n   * @default CalendarDay\n   */\n  get dayRole() {\n    return this.state.dayRole;\n  }\n  set dayRole(dayRole) {\n    this.setState({ dayRole });\n  }\n\n  get days() {\n    return this.state.days;\n  }\n\n  get defaultState() {\n    const today = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"today\"]();\n    const state = Object.assign(super.defaultState, {\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"today\"](),\n      dayCount: 1,\n      dayRole: _CalendarDay_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n      days: null,\n      showCompleteWeeks: false,\n      showSelectedDay: false,\n      startDate: today\n    });\n\n    // If any date-related state changes, regenerate the set of days.\n    state.onChange(['dayCount', 'dayRole', 'locale', 'showCompleteWeeks', 'startDate'], (state, changed) => {\n      const days = updateDays(state, changed.dayRole);\n      return { days };\n    });\n\n    return state;\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"render\"]](changed);\n    if (changed.days) {\n      Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"applyChildNodes\"])(this.$.dayContainer, this.state.days);\n    }\n    if (changed.date || changed.showSelectedDay) {\n      // Ensure only current date has \"selected\" class.\n      const showSelectedDay = this.state.showSelectedDay;\n      const { date } = this.state;\n      const selectedDate = date.getDate();\n      const selectedMonth = date.getMonth();\n      const selectedYear = date.getFullYear();\n      const days = this.days || [];\n      days.forEach(day => {\n        if ('selected' in day) {\n          const dayDate = day.date;\n          const selected = showSelectedDay &&\n            dayDate.getDate() === selectedDate &&\n            dayDate.getMonth() === selectedMonth &&\n            dayDate.getFullYear() === selectedYear;\n          day.selected = selected;\n        }\n      });\n    }\n    if (changed.dayCount || changed.startDate) {\n      // Mark dates as inside or outside of range.\n      const { dayCount, startDate } = this.state;\n      const firstDateAfterRange = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByDays\"](startDate, dayCount);\n      const days = this.state.days || [];\n      days.forEach(day => {\n        if ('outsideRange' in day) {\n          const dayDate = day.date;\n          const dayTime = dayDate.getTime();\n          const outsideRange = dayTime < startDate.getTime() ||\n            dayTime >= firstDateAfterRange.getTime();\n          day.outsideRange = outsideRange;\n        }\n      });\n    }\n  }\n\n  get showCompleteWeeks() {\n    return this.state.showCompleteWeeks;\n  }\n  set showCompleteWeeks(showCompleteWeeks) {\n    this.setState({\n      showCompleteWeeks\n    });\n  }\n\n  get showSelectedDay() {\n    return this.state.showSelectedDay;\n  }\n  set showSelectedDay(showSelectedDay) {\n    this.setState({\n      showSelectedDay\n    });\n  }\n\n  get startDate() {\n    return this.state.startDate;\n  }\n  set startDate(startDate) {\n    const parsed = typeof startDate === 'string' ?\n      new Date(startDate) :\n      startDate;\n    if (!_calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"datesEqual\"](this.state.startDate, parsed)) {\n      this.setState({\n        startDate: parsed\n      });\n    }\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_3__[\"html\"]`\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        #dayContainer {\n          direction: ltr;\n          display: grid;\n          grid-template-columns: repeat(7, 1fr);\n        }\n      </style>\n\n      <div id=\"dayContainer\"></div>\n    `;\n  }\n\n}\n\n\n// Create days as necessary for the given state.\n// Reuse existing day elements to the degree possible.\nfunction updateDays(state, forceCreation) {\n  const { dayCount, dayRole, locale, showCompleteWeeks, startDate } = state;\n  const workingStartDate = showCompleteWeeks ?\n    _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"firstDateOfWeek\"](startDate, locale) :\n    _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"midnightOnDate\"](startDate);\n  let workingDayCount;\n  if (showCompleteWeeks) {\n    const endDate = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByDays\"](startDate, dayCount - 1);\n    const workingEndDate = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"lastDateOfWeek\"](endDate, locale);\n    workingDayCount = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"daysBetweenDates\"](workingStartDate, workingEndDate) + 1;\n  } else {\n    workingDayCount = dayCount;\n  }\n\n  let days = state.days ? state.days.slice() : [];\n\n  let date = workingStartDate;\n  for (let i = 0; i < workingDayCount; i++) {\n    const createNewElement = forceCreation || i >= days.length;\n    const day = createNewElement ?\n      _template_js__WEBPACK_IMPORTED_MODULE_3__[\"createElement\"](dayRole) :\n      days[i];\n    day.date = new Date(date.getTime());\n    day.locale = locale;\n    day.style.gridColumnStart = '';\n    if (createNewElement) {\n      days[i] = day;\n    }\n    date = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByDays\"](date, 1);\n  }\n\n  if (workingDayCount < days.length) {\n    // Trim days which are no longer needed.\n    days = days.slice(0, workingDayCount);\n  }\n\n  const firstDay = days[0];\n  if (firstDay && !showCompleteWeeks) {\n    // Set the grid-column on the first day. This will cause all the subsequent\n    // days to line up in the calendar grid.\n    const dayOfWeek = _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"daysSinceFirstDayOfWeek\"](firstDay.date, state.locale);\n    firstDay.style.gridColumnStart = dayOfWeek + 1;\n  }\n\n  Object.freeze(days);\n  return days;\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CalendarDays);\ncustomElements.define('elix-calendar-days', CalendarDays);\n\n\n//# sourceURL=webpack:///../elix/src/CalendarDays.js?");

/***/ }),

/***/ "../elix/src/CalendarElementMixin.js":
/*!*******************************************!*\
  !*** ../elix/src/CalendarElementMixin.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return CalendarElementMixin; });\n/* harmony import */ var _calendar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar.js */ \"../elix/src/calendar.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n\n/**\n * Adds locale-sensitive date support.\n * \n * This mixin is typically used in creating calendar components. All of the Elix\n * calendar components attempt to provide full [international calendar\n * support](CalendarMonth#international-support) to the extent currently\n * possible in the user's web browser.\n *\n * @module CalendarElementMixin\n */\nfunction CalendarElementMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class CalendarElement extends Base {\n\n    componentDidUpdate(changed) {\n      if (super.componentDidUpdate) { super.componentDidUpdate(changed); }\n      // TODO: call calendar.datesEqual(date, previousState.date)?\n      if (changed.date && this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]]) {\n        const date = this.state.date;\n        /**\n         * Raised when the `date` property changes.\n         * \n         * @event date-changed\n         */\n        const event = new CustomEvent('date-changed', {\n          detail: { date }\n        });\n        this.dispatchEvent(event);\n      }\n    }\n\n    /**\n     * The date that should be shown by the element. For elements that show a\n     * range of dates (a month, a week, etc.), the referenced date will be\n     * included in the range.\n     * \n     * This property can be set as a string, which will be parsed and converted\n     * to a JavaScript `Date`.\n     * \n     * If not specified, the default `date` value is the current date.\n     * \n     * @type {Date|string}\n     */\n    get date() {\n      return this.state.date;\n    }\n    set date(date) {\n      const parsed = typeof date === 'string' ?\n        new Date(date) :\n        date;\n      // Only update state if actual date value differs from current state.\n      if (!_calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"datesEqual\"](parsed, this.state.date)) {\n        this.setState({\n          date: parsed\n        });\n      }\n    }\n\n    get defaultState() {\n      return Object.assign(super.defaultState, {\n        date: null,\n        locale: navigator.language\n      });\n    }\n\n    /**\n     * A string that identifies a language and a region using a BCP 47\n     * language tag. This is the same format used by to identify a\n     * locale in the standard `Intl` internationalization API.\n     * See the\n     * [locales argument](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument)\n     * documentation for details.\n     * \n     * Calendar elements are region-sensitive, so language alone is\n     * insufficient. Accordingly, the locale should identify at least a language\n     * and a region. Examples: \"en-US\" identifies US English, while \"en-GB\"\n     * identifies English in Great Britain. The use of \"en\" on its own would\n     * be insufficient.\n     * \n     * @type {string}\n     */\n    get locale() {\n      return this.state.locale;\n    }\n    set locale(locale) {\n      this.setState({ locale });\n    }\n\n  }\n\n  return CalendarElement;\n}\n\n\n//# sourceURL=webpack:///../elix/src/CalendarElementMixin.js?");

/***/ }),

/***/ "../elix/src/CalendarMonth.js":
/*!************************************!*\
  !*** ../elix/src/CalendarMonth.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CalendarDayNamesHeader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CalendarDayNamesHeader.js */ \"../elix/src/CalendarDayNamesHeader.js\");\n/* harmony import */ var _CalendarDays_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CalendarDays.js */ \"../elix/src/CalendarDays.js\");\n/* harmony import */ var _CalendarMonthYearHeader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CalendarMonthYearHeader.js */ \"../elix/src/CalendarMonthYearHeader.js\");\n/* harmony import */ var _calendar_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./calendar.js */ \"../elix/src/calendar.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _CalendarDay_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CalendarDay.js */ \"../elix/src/CalendarDay.js\");\n/* harmony import */ var _CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./CalendarElementMixin.js */ \"../elix/src/CalendarElementMixin.js\");\n/* harmony import */ var _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ReactiveElement.js */ \"../elix/src/ReactiveElement.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst Base =\n  Object(_CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(\n    _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n  );\n\n\n/**\n * A single calendar month, optimized for a given locale\n * \n * [A default representation for the current month in browser's default locale](/demos/calendarMonth.html)\n * \n * Given a reference `date` property, this component will show a calendar\n * representation of that month. To the extent possible, this representation is\n * sensitive to a specified locale: the names of the months and days of the week\n * will be in the appropriate language, and the day(s) associated with the\n * weekend in that locale will also be indicated.\n * \n * @inherits ReactiveElement\n * @mixes CalendarElementMixin\n * @elementrole {CalendarDay} day\n */\nclass CalendarMonth extends Base {\n\n  /**\n   * Returns the day element corresponding to the given date, or null if the\n   * date falls outside the range currently covered by this calendar.\n   *\n   * @param {Date} date - the date to search for\n   * @returns {Element|null}\n   */\n  dayElementForDate(date) {\n    /** @type {any} */\n    const monthDays = this.$.monthDays;\n    return monthDays && 'dayElementForDate' in monthDays &&\n      monthDays.dayElementForDate(date);\n  }\n\n  /**\n   * The class, tag, or template used to create the day elements.\n   * \n   * @type {Role}\n   * @default CalendarDay\n   */\n  get dayRole() {\n    return this.state.dayRole;\n  }\n  set dayRole(dayRole) {\n    this.setState({ dayRole });\n  }\n\n  /**\n   * Returns the day elements contained by this calendar. Note that this may\n   * include days from the previous/next month that fall in the same week as\n   * the first/last day of the present month.\n   * \n   * @type {Element[]}\n   */\n  get days() {\n    return this.shadowRoot ?\n      /** @type {any} */ (this.$.monthDays).days :\n      [];\n  }\n\n  /**\n   * The format used to render the day names in the week days header.\n   * \n   * The allowable formats are the same as the `weekday` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   * \n   * @type {('long'|'narrow'|'short')}\n   * @default 'short'\n   */\n  get daysOfWeekFormat() {\n    return this.state.daysOfWeekFormat;\n  }\n  set daysOfWeekFormat(daysOfWeekFormat) {\n    this.setState({ daysOfWeekFormat });\n  }\n\n  get defaultState() {\n    return Object.assign(super.defaultState, {\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_3__[\"today\"](),\n      dayRole: _CalendarDay_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n      daysOfWeekFormat: 'short',\n      monthFormat: 'long',\n      showCompleteWeeks: false,\n      showSelectedDay: false,\n      yearFormat: 'numeric'\n    });\n  }\n\n  /**\n   * The format used to render the month name.\n   * \n   * The allowable formats are the same as the `month` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   * \n   * @type {('numeric'|'2-digit'|'long'|'short'|'narrow')}\n   * @default 'long'\n   */\n  get monthFormat() {\n    return this.state.monthFormat;\n  }\n  set monthFormat(monthFormat) {\n    this.setState({\n      monthFormat\n    });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_4__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_4__[\"render\"]](changed);\n    if (changed.locale) {\n      const locale = this.state.locale;\n      /** @type {any} */ (this.$.monthDays).locale = locale;\n      /** @type {any} */ (this.$.monthYearHeader).locale = locale;\n      /** @type {any} */ (this.$.weekDaysHeader).locale = locale;\n    }\n    if (changed.dayRole) {\n      /** @type {any} */ (this.$.monthDays).dayRole = this.state.dayRole;\n    }\n    if (changed.date) {\n      const { date } = this.state;\n      if (date) {\n        const startDate = _calendar_js__WEBPACK_IMPORTED_MODULE_3__[\"firstDateOfMonth\"](date);\n        const endDate = _calendar_js__WEBPACK_IMPORTED_MODULE_3__[\"lastDateOfMonth\"](date);\n        const dayCount = endDate.getDate();\n        Object.assign(this.$.monthDays, {\n          date,\n          dayCount,\n          startDate\n        });\n        /** @type {any} */ (this.$.monthYearHeader).date = _calendar_js__WEBPACK_IMPORTED_MODULE_3__[\"firstDateOfMonth\"](date);\n      }\n    }\n    if (changed.daysOfWeekFormat) {\n      const { daysOfWeekFormat } = this.state;\n      /** @type {any} */ (this.$.weekDaysHeader).format = daysOfWeekFormat;\n    }\n    if (changed.showCompleteWeeks) {\n      const { showCompleteWeeks } = this.state;\n      /** @type {any} */ (this.$.monthDays).showCompleteWeeks = showCompleteWeeks;\n    }\n    if (changed.showSelectedDay) {\n      const { showSelectedDay } = this.state;\n      /** @type {any} */ (this.$.monthDays).showSelectedDay = showSelectedDay;\n    }\n    if (changed.monthFormat) {\n      const { monthFormat } = this.state;\n      /** @type {any} */ (this.$.monthYearHeader).monthFormat = monthFormat;\n    }\n    if (changed.yearFormat) {\n      const { yearFormat } = this.state;\n      /** @type {any} */ (this.$.monthYearHeader).yearFormat = yearFormat;\n    }\n  }\n\n  get showCompleteWeeks() {\n    return this.state.showCompleteWeeks;\n  }\n  set showCompleteWeeks(showCompleteWeeks) {\n    this.setState({\n      showCompleteWeeks\n    });\n  }\n\n  get showSelectedDay() {\n    return this.state.showSelectedDay;\n  }\n  set showSelectedDay(showSelectedDay) {\n    this.setState({\n      showSelectedDay\n    });\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_4__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_5__[\"html\"]`\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        #monthYearHeader {\n          display: block;\n          font-size: larger;\n          font-weight: bold;\n          padding: 0.3em;\n        }\n\n        #weekDaysHeader {\n          font-size: smaller;\n          width: 100%;\n        }\n\n        #monthDays {\n          display: block;\n        }\n      </style>\n\n      <elix-calendar-month-year-header id=\"monthYearHeader\"></elix-calendar-month-year-header>\n      <elix-calendar-day-names-header id=\"weekDaysHeader\" format=\"short\"></elix-calendar-day-names-header>\n      <elix-calendar-days id=\"monthDays\"></elix-calendar-days>\n    `;\n  }\n\n  /**\n   * The format used to render the year.\n   * \n   * The allowable formats are the same as the `year` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   * \n   * @type {('numeric'|'2-digit')}\n   * @default 'numeric'\n   */\n  get yearFormat() {\n    return this.state.yearFormat;\n  }\n  set yearFormat(yearFormat) {\n    this.setState({\n      yearFormat\n    });\n  }\n\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CalendarMonth);\ncustomElements.define('elix-calendar-month', CalendarMonth);\n\n\n//# sourceURL=webpack:///../elix/src/CalendarMonth.js?");

/***/ }),

/***/ "../elix/src/CalendarMonthNavigator.js":
/*!*********************************************!*\
  !*** ../elix/src/CalendarMonthNavigator.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities.js */ \"../elix/src/utilities.js\");\n/* harmony import */ var _calendar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calendar.js */ \"../elix/src/calendar.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _ArrowDirectionMixin_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ArrowDirectionMixin.js */ \"../elix/src/ArrowDirectionMixin.js\");\n/* harmony import */ var _CalendarDayButton_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CalendarDayButton.js */ \"../elix/src/CalendarDayButton.js\");\n/* harmony import */ var _CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CalendarElementMixin.js */ \"../elix/src/CalendarElementMixin.js\");\n/* harmony import */ var _CalendarMonth_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./CalendarMonth.js */ \"../elix/src/CalendarMonth.js\");\n/* harmony import */ var _DarkModeMixin_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./DarkModeMixin.js */ \"../elix/src/DarkModeMixin.js\");\n/* harmony import */ var _FocusVisibleMixin_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./FocusVisibleMixin.js */ \"../elix/src/FocusVisibleMixin.js\");\n/* harmony import */ var _KeyboardDirectionMixin_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./KeyboardDirectionMixin.js */ \"../elix/src/KeyboardDirectionMixin.js\");\n/* harmony import */ var _KeyboardMixin_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./KeyboardMixin.js */ \"../elix/src/KeyboardMixin.js\");\n/* harmony import */ var _LanguageDirectionMixin_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./LanguageDirectionMixin.js */ \"../elix/src/LanguageDirectionMixin.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Base =\n  Object(_ArrowDirectionMixin_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n  Object(_CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(\n  Object(_DarkModeMixin_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\n  Object(_FocusVisibleMixin_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(\n  Object(_KeyboardDirectionMixin_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(\n  Object(_KeyboardMixin_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(\n  Object(_LanguageDirectionMixin_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(\n    _CalendarMonth_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n  )))))));\n\n\n/**\n * Interactive month calendar that lets the user select a date\n * \n * @inherits CalendarMonth\n * @mixes ArrowDirectionMixin\n * @mixes CalendarElementMixin\n * @mixes DarkModeMixin\n * @mixes FocusVisibleMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardMixin\n */\nclass CalendarMonthNavigator extends Base {\n\n  constructor() {\n    super();\n    this.addEventListener('mousedown', event => {\n      this[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"raiseChangeEvents\"]] = true;\n      const target = event.composedPath()[0];\n      if (target instanceof Node) {\n        const days = this.days;\n        const index = Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"indexOfItemContainingTarget\"])(days, target);\n        /** @type {any} */\n        const day = days[index];\n        if (day) {\n          this.date = day.date;\n        }\n      }\n      this[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"raiseChangeEvents\"]] = false;\n    });\n    // Any click within this element puts focus on the top-level element.\n    Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"forwardFocus\"])(this, this);\n  }\n\n  arrowButtonLeft() {\n    const months = this.state.rightToLeft ? 1 : -1;\n    this.setState({\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByMonths\"](this.state.date, months)\n    });\n    return true;\n  }\n\n  arrowButtonRight() {\n    const months = this.state.rightToLeft ? -1 : 1;\n    this.setState({\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByMonths\"](this.state.date, months)\n    });\n    return true;\n  }\n\n  get defaultState() {\n    return Object.assign(super.defaultState, {\n      arrowButtonOverlap: false,\n      canGoLeft: true,\n      canGoRight: true,\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"today\"](),\n      dayRole: _CalendarDayButton_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n      orientation: 'both',\n      showCompleteWeeks: true,\n      showSelectedDay: true\n    });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"keydown\"]](event) {\n    let handled = false;\n\n    switch (event.key) {\n\n      case 'Home':\n        this.setState({\n          date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"today\"]()\n        });\n        handled = true;\n        break;\n\n      case 'PageDown':\n        this.setState({\n          date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByMonths\"](this.state.date, 1)\n        });\n        handled = true;\n        break;\n        \n      case 'PageUp':\n        this.setState({\n          date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByMonths\"](this.state.date, -1)\n        });\n        handled = true;\n        break;\n\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"keydown\"]] && super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"keydown\"]](event));\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goDown\"]]() {\n    if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goDown\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goDown\"]](); }\n    this.setState({\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByDays\"](this.state.date, 7)\n    });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goLeft\"]]() {\n    if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goLeft\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goLeft\"]](); }\n    this.setState({\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByDays\"](this.state.date, -1)\n    });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goRight\"]]() {\n    if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goRight\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goRight\"]](); }\n    this.setState({\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByDays\"](this.state.date, 1)\n    });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goUp\"]]() {\n    if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goUp\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"goUp\"]](); }\n    this.setState({\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_1__[\"offsetDateByDays\"](this.state.date, -7)\n    });\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"template\"]]() {\n    const result = super[_symbols_js__WEBPACK_IMPORTED_MODULE_2__[\"template\"]];\n    const monthYearHeader = result.content.querySelector('#monthYearHeader');\n    this[_ArrowDirectionMixin_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].wrap](monthYearHeader);\n\n    const styleTemplate = _template_js__WEBPACK_IMPORTED_MODULE_3__[\"html\"]`\n      <style>\n        #arrowIconLeft,\n        #arrowIconRight {\n          font-size: 24px;\n        }\n      </style>\n    `;\n    result.content.appendChild(styleTemplate.content);\n\n    return result;\n  }\n\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CalendarMonthNavigator);\ncustomElements.define('elix-calendar-month-navigator', CalendarMonthNavigator);\n\n\n//# sourceURL=webpack:///../elix/src/CalendarMonthNavigator.js?");

/***/ }),

/***/ "../elix/src/CalendarMonthYearHeader.js":
/*!**********************************************!*\
  !*** ../elix/src/CalendarMonthYearHeader.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calendar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar.js */ \"../elix/src/calendar.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CalendarElementMixin.js */ \"../elix/src/CalendarElementMixin.js\");\n/* harmony import */ var _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ReactiveElement.js */ \"../elix/src/ReactiveElement.js\");\n\n\n\n\n\n\n\nconst Base =\n  Object(_CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n    _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n  );\n\n\n/**\n * Header showing a localized month name and the year\n * \n * [A default representation of the month and year in browser's default locale](/demos/calendarMonthYearHeader.html)\n * \n * Given a reference `date` property, this component will show a calendar\n * representation of that month and year.\n * \n * All of the Elix calendar components attempt to provide full\n * [international calendar support](CalendarMonth#international-support)\n * to the extent currently possible in the user's web browser.\n * \n * [CalendarMonth](CalendarMonth) instantiates `CalendarMonthYearHeader` to show\n * the name of the current month and the year as a header for the calendar\n * month.\n * \n * @inherits ReactiveElement\n * @mixes CalendarElementMixin\n */\nclass CalendarMonthYearHeader extends Base {\n\n  get defaultState() {\n    return Object.assign(super.defaultState, {\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"today\"](),\n      monthFormat: 'long',\n      yearFormat: 'numeric'\n    });\n  }\n\n  /**\n   * The format used to render the month name.\n   * \n   * The allowable formats are the same as the `month` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   * \n   * @type {('numeric'|'2-digit'|'long'|'short'|'narrow')}\n   * @default 'long'\n   */\n  get monthFormat() {\n    return this.state.monthFormat;\n  }\n  set monthFormat(monthFormat) {\n    this.setState({\n      monthFormat\n    });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed);\n    if (changed.date || changed.locale || changed.monthFormat || changed.yearFormat) {\n      const { date, locale, monthFormat, yearFormat } = this.state;\n      const formatOptions = {};\n      if (monthFormat) {\n        formatOptions.month = monthFormat;\n      }\n      if (yearFormat) {\n        formatOptions.year = yearFormat;\n      }\n      const formatter = _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"dateTimeFormat\"](locale, formatOptions);\n      this.$.formatted.textContent = formatter.format(date);\n    }\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_2__[\"html\"]`\n      <style>\n        :host {\n          display: inline-block;\n          text-align: center;\n        }\n      </style>\n      <div id=\"formatted\"></div>\n    `;\n  }\n\n  /**\n   * The format used to render the year.\n   * \n   * The allowable formats are the same as the `year` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   * \n   * @type {('numeric'|'2-digit')}\n   * @default 'numeric'\n   */\n  get yearFormat() {\n    return this.state.yearFormat;\n  }\n  set yearFormat(yearFormat) {\n    this.setState({\n      yearFormat\n    });\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CalendarMonthYearHeader);\ncustomElements.define('elix-calendar-month-year-header', CalendarMonthYearHeader);\n\n\n//# sourceURL=webpack:///../elix/src/CalendarMonthYearHeader.js?");

/***/ }),

/***/ "../elix/src/ComboBox.js":
/*!*******************************!*\
  !*** ../elix/src/ComboBox.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities.js */ \"../elix/src/utilities.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _AriaRoleMixin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AriaRoleMixin.js */ \"../elix/src/AriaRoleMixin.js\");\n/* harmony import */ var _DelegateFocusMixin_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DelegateFocusMixin.js */ \"../elix/src/DelegateFocusMixin.js\");\n/* harmony import */ var _KeyboardMixin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./KeyboardMixin.js */ \"../elix/src/KeyboardMixin.js\");\n/* harmony import */ var _PopupSource_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./PopupSource.js */ \"../elix/src/PopupSource.js\");\n/* harmony import */ var _SeamlessButton_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SeamlessButton.js */ \"../elix/src/SeamlessButton.js\");\n\n\n\n\n\n\n\n\n\n\nconst Base =\n  Object(_AriaRoleMixin_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  Object(_DelegateFocusMixin_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n  Object(_KeyboardMixin_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n    _PopupSource_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n  )));\n\n\n/**\n * A text input paired with a popup that can be used as an alternative to typing\n * \n * @inherits PopupSource\n * @mixes AriaRoleMixin\n * @mixes DelegateFocusMixin\n * @mixes KeyboardMixin\n * @elementrole {'input'} input\n * @elementrole {'div'} source\n * @elementrole {SeamlessButton} toggleButton\n */\nclass ComboBox extends Base {\n  \n  // Forward any ARIA label to the input element.\n  get ariaLabel() {\n    return this.state.ariaLabel;\n  }\n  set ariaLabel(ariaLabel) {\n    this.setState({ ariaLabel });\n  }\n\n  componentDidUpdate(changed) {\n    super.componentDidUpdate(changed);\n    if (this.state.selectText) {\n      // Select the text in the input after giving the inner input a chance to render the value.\n      setTimeout(() => {\n        // Text selection might have been turned off in the interim;\n        // double-check that we still want to select text.\n        if (this.state.selectText) {\n          /** @type {any} */\n          const cast = this.$.input;\n          const value = cast.value;\n          if (value > '') {\n            cast.selectionStart = 0;\n            cast.selectionEnd = cast.value.length;\n          }\n        }\n      });\n    }\n  }\n\n  get defaultState() {\n\n    const state = Object.assign(super.defaultState, {\n      ariaLabel: '',\n      focused: false,\n      inputRole: 'input',\n      orientation: 'vertical',\n      placeholder: '',\n      role: 'combobox',\n      selectText: false,\n      sourceRole: 'div',\n      toggleButtonRole: _SeamlessButton_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n      value: '',\n    });\n\n    // Select text on closing.\n    // Exception: on mobile devices, leaving the text selected may show\n    // selection handles, which may suggest to the user that there's something\n    // more they should be doing with the text even though they're done with it.\n    // We therefore avoid leaving text selected if an on-screen keyboard is in\n    // use. Since we can't actually detect that, we use the absence of a\n    // fine-grained pointer (mouse) as a proxy for mobile.\n    state.onChange(['opened'], (state) => {\n      if (!state.opened) {\n        const probablyMobile = matchMedia('(pointer: coarse)').matches;\n        const selectText = !probablyMobile;\n        return {\n          selectText\n        };\n      }\n      return null;\n    });\n\n    return state;\n  }\n\n  /**\n   * The combo box's input element.\n   * \n   * @type {Element|null}\n   */\n  get input() {\n    return this.shadowRoot ?\n      this.$.input :\n      null;\n  }\n\n  /**\n   * The class, tag, or template used to create the input element.\n   * \n   * @type {Role}\n   * @default 'input'\n   */\n  get inputRole() {\n    return this.state.inputRole;\n  }\n  set inputRole(inputRole) {\n    this.setState({ inputRole });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"keydown\"]](event) {\n    let handled;\n\n    switch (event.key) {\n\n      // Up/Down arrow keys and Page Up/Page Down open the popup.\n      case 'ArrowDown':\n      case 'ArrowUp':\n      case 'PageDown':\n      case 'PageUp':\n        if (this.closed) {\n          this.open();\n          handled = true;\n        }\n        break;\n    \n      case 'Enter':\n        this.close();\n        handled = true;\n        break;\n\n      // Escape closes popup and indicates why.\n      case 'Escape':\n        this.close({\n          canceled: 'Escape'\n        });\n        handled = true;\n        break;\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"keydown\"]] && super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"keydown\"]](event));\n  }\n\n  /**\n   * The prompt text shown in the input if it is empty.\n   * \n   * @type {string}\n   */\n  get placeholder() {\n    return this.state.placeholder;\n  }\n  set placeholder(placeholder) {\n    this.setState({\n      placeholder\n    });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed);\n    if (changed.inputRole) {\n      _template_js__WEBPACK_IMPORTED_MODULE_2__[\"transmute\"](this.$.input, this.state.inputRole);\n\n      this.$.input.addEventListener('blur', () => {\n        // If we're open and lose focus, then close.\n        if (this.opened) {\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n          this.setState({\n            focused: false\n          });\n          this.close();\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n        }\n      });\n  \n      this.$.input.addEventListener('focus', () => {\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n        this.setState({\n          focused: true\n        });\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n      });\n\n      this.$.input.addEventListener('input', () => {\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n        /** @type {any} */\n        const cast = this.$.input;\n        const value = cast.value;\n        const changes = {\n          value,\n          selectText: false\n        };\n        if (this.closed && value > '') {\n          // If user types while popup is closed, implicitly open it.\n          changes.opened = true\n        }\n        this.setState(changes);\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n      })\n\n      this.$.input.addEventListener('keydown', () => {\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n        this.setState({\n          selectText: false\n        });\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n      })\n  \n      // If the user clicks on the input and the popup is closed, open it.\n      this.$.input.addEventListener('mousedown', () => {\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n        this.setState({\n          selectText: false\n        });\n        if (this.closed && !this.disabled) {\n          this.open();\n        }\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n      });\n    }\n    if (changed.toggleButtonRole) {\n      _template_js__WEBPACK_IMPORTED_MODULE_2__[\"transmute\"](this.$.toggleButton, this.state.toggleButtonRole);\n      this.$.toggleButton.addEventListener('mousedown', () => {\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n        this.toggle();\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n      });\n      if (this.$.toggleButton instanceof HTMLElement &&\n          this.$.input instanceof HTMLElement) {\n        // Forward focus for new toggle button.\n        Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"forwardFocus\"])(this.$.toggleButton, this.$.input);\n      }\n    }\n    if (changed.popupRole) {\n      const popup = this.$.popup;\n      popup.removeAttribute('tabindex');\n      if ('autoFocus' in popup) {\n        /** @type {any} */ (popup).autoFocus = false;\n      }\n      // TODO: Would be better if we could set backdropRole to null\n      const backdrop = /** @type {any} */ (popup).backdrop;\n      if (backdrop) {\n        backdrop.style.display = 'none';\n      }\n      const frame = /** @type {any} */ (popup).frame;\n      if (frame) {\n        Object.assign(frame.style, {\n          display: 'flex',\n          flexDirection: 'column'\n        });\n      }\n      if ('closeOnWindowResize' in popup) {\n        /** @type {any} */ (popup).closeOnWindowResize = false;\n      }\n    }\n    if (changed.ariaLabel) {\n      this.$.input.setAttribute('aria-label', this.state.ariaLabel);\n    }\n    if (changed.disabled) {\n      const { disabled } = this.state;\n      /** @type {any} */ (this.$.input).disabled = disabled;\n      /** @type {any} */ (this.$.toggleButton).disabled = disabled;\n    }\n    if (changed.placeholder) {\n      const { placeholder } = this.state;\n      /** @type {any} */ (this.$.input).placeholder = placeholder;\n    }\n    if (changed.popupPosition) {\n      const { popupPosition } = this.state;\n      this.$.downIcon.style.display = popupPosition === 'below' ?\n        'block' :\n        'none';\n      this.$.upIcon.style.display = popupPosition === 'above' ?\n        'block' :\n        'none';\n    }\n    if (changed.rightToLeft) {\n      const { rightToLeft } = this.state;\n      // We want to style the inner input if it's been created with\n      // WrappedStandardElement, otherwise style the input directly.\n      const cast = /** @type {any} */ (this.$.input);\n      const input = 'inner' in cast ?\n        cast.inner :\n        cast;\n      Object.assign(input.style, {\n        paddingBottom: '2px',\n        paddingLeft: rightToLeft ? '1.5em' : '2px',\n        paddingRight: rightToLeft ? '2px' : '1.5em',\n        paddingTop: '2px'\n      });\n      Object.assign(this.$.toggleButton.style, {\n        left: rightToLeft ? '3px' : '',\n        right: rightToLeft ? '' : '3px'\n      });\n    }\n    if (changed.value) {\n      const { value } = this.state;\n      /** @type {any} */ (this.$.input).value = value;\n    }\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"template\"]]() {\n    const base = super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"template\"]];\n\n    // Use an input element in the source.\n    const sourceSlot = base.content.querySelector('slot[name=\"source\"]');\n    if (!sourceSlot) {\n      throw `Couldn't find slot with name \"source\".`;\n    }\n    const sourceTemplate = _template_js__WEBPACK_IMPORTED_MODULE_2__[\"html\"]`\n      <input id=\"input\"></input>\n      <button id=\"toggleButton\" tabindex=\"-1\">\n        <svg id=\"downIcon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"5\" viewBox=\"0 0 10 5\">\n          <path d=\"M 0 0 l5 5 5 -5 z\"/>\n        </svg>\n        <svg id=\"upIcon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"5\" viewBox=\"0 0 10 5\">\n          <path d=\"M 0 5 l5 -5 5 5 z\"/>\n        </svg>\n      </button>\n    `;\n    _template_js__WEBPACK_IMPORTED_MODULE_2__[\"replace\"](sourceSlot, sourceTemplate.content);\n\n    return _template_js__WEBPACK_IMPORTED_MODULE_2__[\"concat\"](base, _template_js__WEBPACK_IMPORTED_MODULE_2__[\"html\"]`\n      <style>\n        :host {\n          outline: none;\n        }\n\n        #source {\n          background-color: inherit;\n          position: relative;\n        }\n\n        #input {\n          box-sizing: border-box;\n          font-family: inherit;\n          font-size: inherit;\n          font-style: inherit;\n          font-weight: inherit;\n          height: 100%;\n          width: 100%;\n        }\n\n        #toggleButton {\n          align-items: center;\n          bottom: 3px;\n          display: flex;\n          padding: 0;\n          position: absolute;\n          top: 3px;\n          width: 1.5em;\n        }\n\n        #toggleButton[disabled] {\n          opacity: 0.5;\n        }\n\n        #toggleButton:not([disabled]):hover {\n          background: #eee;\n        }\n\n        #downIcon,\n        #upIcon {\n          fill: currentColor;\n          margin: 0.25em;\n        }\n\n        #popup {\n          flex-direction: column;\n          overflow: hidden;\n        }\n      </style>\n    `);\n  }\n\n  /**\n   * The class, tag, or template used to create the button that toggles the\n   * popup.\n   * \n   * @type {Role}\n   * @default SeamlessButton\n   */\n  get toggleButtonRole() {\n    return this.state.toggleButtonRole;\n  }\n  set toggleButtonRole(toggleButtonRole) {\n    this.setState({ toggleButtonRole });\n  }\n\n  get value() {\n    return this.state.value;\n  }\n  set value(value) {\n    this.setState({ value });\n  }\n\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ComboBox);\ncustomElements.define('elix-combo-box', ComboBox);\n\n\n//# sourceURL=webpack:///../elix/src/ComboBox.js?");

/***/ }),

/***/ "../elix/src/ComposedFocusMixin.js":
/*!*****************************************!*\
  !*** ../elix/src/ComposedFocusMixin.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ComposedFocusMixin; });\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities.js */ \"../elix/src/utilities.js\");\n\n\n\n// Quick detection of whether we'll need to handle focus.\n// As of February 2019, we don't need to handle this in Chrome, perhaps because\n// they already support delegatesFocus (which handles related focus issues).\nconst focusTest = document.createElement('div');\nfocusTest.attachShadow({ mode: 'open', delegatesFocus: true });\n/** @type {any} */\nconst shadowRoot = focusTest.shadowRoot;\nconst nativeDelegatesFocus = shadowRoot.delegatesFocus;\n\n\n/**\n * Normalizes focus treatment for custom elements with Shadow DOM\n * \n * This mixin exists because the default behavior for mousedown should set the\n * focus to the closest ancestor of the clicked element that can take the focus.\n * As of Nov 2018, Chrome and Safari don't handle this as expected when the\n * clicked element is reassigned across more than one slot to end up inside a\n * focusable element. In such cases, the focus will end up on the body. Firefox\n * exhibits the behavior we want. See\n * https://github.com/w3c/webcomponents/issues/773.\n *\n * This mixin normalizes behavior to provide what Firefox does. When the user\n * mouses down inside anywhere inside the component's light DOM or Shadow DOM,\n * we walk up the composed tree to find the first element that can take the\n * focus and put the focus on it.\n * \n * @module ComposedFocusMixin\n */\nfunction ComposedFocusMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class ComposedFocus extends Base {\n\n    componentDidMount() {\n      if (super.componentDidMount) { super.componentDidMount(); }\n      this.addEventListener('mousedown', event => {\n        if (!this.state.composeFocus) {\n          return;\n        }\n        // Only process events for the main (usually left) button.\n        if (event.button !== 0) {\n          return;\n        }\n        const target = Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"closestFocusableAncestor\"])(event.target);\n        if (target) {\n          target.focus();\n          event.preventDefault();\n        }\n      });\n    }\n\n    get defaultState() {\n      return Object.assign(super.defaultState, {\n        composeFocus: !nativeDelegatesFocus\n      });\n    }\n\n  }\n\n  return ComposedFocus;\n}\n\n\n//# sourceURL=webpack:///../elix/src/ComposedFocusMixin.js?");

/***/ }),

/***/ "../elix/src/DarkModeMixin.js":
/*!************************************!*\
  !*** ../elix/src/DarkModeMixin.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return DarkModeMixin; });\n/**\n * Lets a component automatically or explicitly configure itself for dark backgrounds\n * \n * @module DarkModeMixin\n */\nfunction DarkModeMixin(Base) {\n  return class DarkMode extends Base {\n\n    // Once connected, check background color. We set state before calling super\n    // so the new state will be included when ReactiveMixin calls render.\n    connectedCallback() {\n      if (this.state.darkMode === null) {\n        // Infer dark mode from effective background color.\n        const backgroundColor = findBackgroundColor(this);\n        const rgb = parseRgb(backgroundColor);\n        if (rgb) {\n          const hsl = rgbToHsl(rgb);\n          // We consider any lightness below 50% to be dark.\n          const darkMode = hsl.l < 0.5;\n          this.setState({\n            darkMode\n          });\n        }\n      }\n      if (super.connectedCallback) { super.connectedCallback(); }\n    }\n\n    /**\n     * True if the component should configure itself for display on a dark background;\n     * false if the component should assume a light background.\n     * \n     * The default value of this property is inferred when the component is\n     * initially added to the page. The component will look up its hierarchy for\n     * an ancestor that has an explicit background color. If the color's\n     * lightness value in the HSL cylindrical-coordinate system is below 50%,\n     * the background is assumed to be dark and `darkMode` will default to true.\n     * If the color is lighter than that, or no explicit background color can be\n     * found, the default value of `darkMode` will be false.\n     * \n     * @type {boolean}\n     */\n    get darkMode() {\n      return this.state.darkMode;\n    }\n    set darkMode(darkMode) {\n      const parsed = String(darkMode) === 'true';\n      this.setState({\n        darkMode: parsed\n      });\n    }\n\n    get defaultState() {\n      return Object.assign(super.defaultState, {\n        darkMode: null\n      });\n    }\n\n  }\n}\n\n\n// Return the background color of the given element. If the color is\n// \"transparent\" (the default in Mozilla) or \"rgba(0, 0, 0, 0)\" (the default\n// transparent value in Blink and Webkit), walk up the parent chain until a\n// non-transparent color is found.\nfunction findBackgroundColor(element) {\n  if (element == null || element instanceof Document) {\n    // This element has no background, assume white.\n    return 'rgb(255,255,255)';\n  }\n  // @ts-ignore\n  if (element instanceof ShadowRoot) {\n    return findBackgroundColor(element.host);\n  }\n  const backgroundColor = getComputedStyle(element).backgroundColor;\n  if (backgroundColor === 'transparent' || backgroundColor === 'rgba(0, 0, 0, 0)') {\n    const parent = element.assignedSlot || element.parentNode || element.host;\n    return findBackgroundColor(parent);\n  } else {\n    return backgroundColor;\n  }\n}\n\n\n// Return the individual RGB values from a CSS RGB/RGBA color string.\nfunction parseRgb(rgbString) {\n  const rgbRegex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*[\\d.]+\\s*)?\\)/;\n  const match = rgbRegex.exec(rgbString);\n  if (match) {\n    const r = match[1];\n    const g = match[2];\n    const b = match[3];\n    return { r, g, b };\n  } else {\n    return null;\n  }\n}\n\n\n// Convert an RGB color to an HSL color.\n// From https://stackoverflow.com/a/3732187/76472.\nfunction rgbToHsl(rgb) {\n\n  const r = rgb.r / 255;\n  const g = rgb.g / 255;\n  const b = rgb.b / 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n\n  let h = 0; // achromatic\n  let s = 0;\n  let l = (max + min) / 2;\n\n  const d = max - min;\n  if (d !== 0) {\n    s = l > 0.5 ? d / (2 - d) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return { h, s, l };\n}\n\n\n//# sourceURL=webpack:///../elix/src/DarkModeMixin.js?");

/***/ }),

/***/ "../elix/src/DateComboBox.js":
/*!***********************************!*\
  !*** ../elix/src/DateComboBox.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calendar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar.js */ \"../elix/src/calendar.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _ArrowDirectionButton_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ArrowDirectionButton.js */ \"../elix/src/ArrowDirectionButton.js\");\n/* harmony import */ var _CalendarDayButton_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CalendarDayButton.js */ \"../elix/src/CalendarDayButton.js\");\n/* harmony import */ var _CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CalendarElementMixin.js */ \"../elix/src/CalendarElementMixin.js\");\n/* harmony import */ var _CalendarMonthNavigator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CalendarMonthNavigator.js */ \"../elix/src/CalendarMonthNavigator.js\");\n/* harmony import */ var _ComboBox_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ComboBox.js */ \"../elix/src/ComboBox.js\");\n/* harmony import */ var _SeamlessButton_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SeamlessButton.js */ \"../elix/src/SeamlessButton.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst Base =\n  Object(_CalendarElementMixin_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n    _ComboBox_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n  );\n\n\n/**\n * Combo box that lets the user type a date or pick one from a popup calendar\n * \n * @inherits ComboBox\n * @mixes CalendarElementMixin\n * @elementrole {CalendarMonthNavigator} calendar\n * @elementrole {SeamlessButton} todayButton\n */\nclass DateComboBox extends Base {\n\n  /**\n   * The class, tag, or template used to create the left and right arrow\n   * buttons.\n   * \n   * @type {Role}\n   * @default ArrowDirectionButton\n   */\n  get arrowButtonRole() {\n    return this.state.arrowButtonRole;\n  }\n  set arrowButtonRole(arrowButtonRole) {\n    this.setState({\n      arrowButtonRole\n    });\n  }\n  \n  get calendar() {\n    return this.shadowRoot ?\n      this.$.calendar :\n      null;\n  }\n\n  /**\n   * The class, tag, or template used to create the calendar.\n   * \n   * @type {Role}\n   * @default CalendarMonthNavigator\n   */\n  get calendarRole() {\n    return this.state.calendarRole;\n  }\n  set calendarRole(calendarRole) {\n    this.setState({\n      calendarRole\n    });\n  }\n\n  get dateTimeFormatOptions() {\n    return this.state.dateTimeFormatOptions;\n  }\n  set dateTimeFormatOptions(dateTimeFormatOptions) {\n    this.setState({\n      dateTimeFormatOptions\n    });\n  }\n\n  get date() {\n    return super.date;\n  }\n  set date(date) {\n    super.date = date;\n    this.setState({\n      datePriority: true\n    });\n  }\n\n  /**\n   * The class, tag, or template used to create the day elements.\n   * \n   * @type {Role}\n   * @default CalendarDay\n   */\n  get dayRole() {\n    return this.state.dayRole;\n  }\n  set dayRole(dayRole) {\n    this.setState({\n      dayRole\n    });\n  }\n\n  /**\n   * The format used to render the day names in the week days header.\n   * \n   * The allowable formats are the same as the `weekday` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   * \n   * @type {('long'|'narrow'|'short')}\n   * @default 'short'\n   */\n  get daysOfWeekFormat() {\n    return this.state.daysOfWeekFormat;\n  }\n  set daysOfWeekFormat(daysOfWeekFormat) {\n    this.setState({ daysOfWeekFormat });\n  }\n\n  get defaultState() {\n\n    const dateTimeFormatOptions = {\n      day: 'numeric',\n      month: 'numeric',\n      year: 'numeric'\n    };\n\n    const state = Object.assign(super.defaultState, {\n      arrowButtonRole: _ArrowDirectionButton_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n      calendarRole: _CalendarMonthNavigator_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"today\"](),\n      datePriority: false,\n      dateSelected: false,\n      dateTimeFormat: null,\n      dateTimeFormatOptions,\n      dayRole: _CalendarDayButton_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n      daysOfWeekFormat: 'short',\n      monthFormat: 'long',\n      timeBias: null,\n      todayButtonRole: _SeamlessButton_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n      yearFormat: 'numeric'\n    });\n\n    // If the date changed while focused, assume user changed date.\n    state.onChange(['date', 'value'], state => {\n      if (state.focused) {\n        return {\n          userChangedDate: true\n        };\n      }\n      return null;\n    })\n\n    // Update value from date if:\n    // the date was changed from the outside,\n    // we're closing or losing focus and the user's changed the date,\n    // or the format changed and the date was the last substantive property set.\n    state.onChange(['date', 'dateTimeFormat', 'focused', 'opened'], (state, changed) => {\n      const {\n        closeResult,\n        date,\n        datePriority,\n        dateTimeFormat,\n        focused,\n        opened,\n        userChangedDate\n      } = state;\n      const closing = changed.opened && !opened;\n      const canceled = closeResult && closeResult.canceled;\n      const blur = changed.focused && !focused;\n      if ((changed.date && !focused) ||\n          (blur && userChangedDate) ||\n          (closing && userChangedDate && !canceled) ||\n          (changed.dateTimeFormat && datePriority)) {\n        const formattedDate = date && dateTimeFormat ?\n          this.formatDate(date, dateTimeFormat) :\n          '';\n        // See notes on mobile at ComboBox.defaultState.\n        const probablyMobile = matchMedia('(pointer: coarse)').matches;\n        const selectText = formattedDate.length > 0 && !probablyMobile;\n        return {\n          selectText,\n          value: formattedDate\n        };\n      }\n      return null;\n    });\n\n    // Update date from value if the value was changed, or the date format or\n    // time bias changed and the value was the last substantive property set.\n    state.onChange(['dateTimeFormat', 'timeBias', 'value'], (state, changed) => {\n      const {\n        datePriority,\n        dateTimeFormat,\n        timeBias,\n        value\n      } = state;\n      if (dateTimeFormat &&\n          (changed.value ||\n          (!datePriority && (changed.dateTimeFormat || changed.timeBias)))) {\n        const parsedDate = this.parseDate(value, dateTimeFormat, timeBias);\n        if (parsedDate) {\n          return {\n            date: parsedDate\n          };\n        }\n      }\n      return null;\n    });\n\n    // Update our date format if the locale or format options change.\n    state.onChange(['dateTimeFormatOptions', 'locale'], state => {\n      const { dateTimeFormatOptions, locale } = state;\n      const dateTimeFormat = _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"dateTimeFormat\"](locale, dateTimeFormatOptions);\n      return {\n        dateTimeFormat\n      };\n    });\n\n    return state;\n  }\n\n  formatDate(date, dateTimeFormat) {\n    return dateTimeFormat.format(date);\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goDown\"]]() {\n    if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goDown\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goDown\"]](); }\n    const date = this.state.date || new Date();\n    this.setState({\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"offsetDateByDays\"](date, 7)\n    });\n    return true;\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goLeft\"]]() {\n    if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goLeft\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goLeft\"]](); }\n    const date = this.state.date || new Date();\n    this.setState({\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"offsetDateByDays\"](date, -1)\n    });\n    return true;\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goRight\"]]() {\n    if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goRight\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goRight\"]](); }\n    const date = this.state.date || new Date();\n    this.setState({\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"offsetDateByDays\"](date, 1)\n    });\n    return true;\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goUp\"]]() {\n    if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goUp\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goUp\"]](); }\n    const date = this.state.date || new Date();\n    this.setState({\n      date: _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"offsetDateByDays\"](date, -7)\n    });\n    return true;\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"keydown\"]](event) {\n    let handled = false;\n\n    const opened = this.opened;\n    const date = this.state.date || _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"today\"]();\n\n    switch (event.key) {\n\n      case 'ArrowDown':\n        if (opened && event.ctrlKey && event.shiftKey) {\n          handled = this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goDown\"]]();\n        }\n        break;\n\n      case 'ArrowLeft':\n        if (opened && event.ctrlKey && event.shiftKey) {\n          handled = this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goLeft\"]]();\n        }\n        break;\n\n      case 'ArrowRight':\n        if (opened && event.ctrlKey && event.shiftKey) {\n          handled = this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goRight\"]]();\n        }\n        break;\n\n      case 'ArrowUp':\n        if (opened && event.ctrlKey && event.shiftKey) {\n          handled = this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"goUp\"]]();\n        }\n        break;\n\n      case 'PageDown':\n        if (opened) {\n          this.setState({\n            date: _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"offsetDateByMonths\"](date, 1)\n          });\n          handled = true;\n        }\n        break;\n        \n      case 'PageUp':\n        if (opened) {\n          this.setState({\n            date: _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"offsetDateByMonths\"](date, -1)\n          });\n          handled = true;\n        }\n        break;\n\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"keydown\"]] && super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"keydown\"]](event));\n  }\n\n  get locale() {\n    return super.locale;\n  }\n  set locale(locale) {\n    // If external code sets the locale, it's impossible for that code to predict\n    // the effects on the value, so we'll need to raise change events.\n    const saveRaiseChangesEvents = this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]];\n    this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n    super.locale = locale;\n    this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = saveRaiseChangesEvents;\n  }\n\n  /**\n   * The format used to render the month name.\n   * \n   * The allowable formats are the same as the `month` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   * \n   * @type {('numeric'|'2-digit'|'long'|'short'|'narrow')}\n   * @default 'long'\n   */\n  get monthFormat() {\n    return this.state.monthFormat;\n  }\n  set monthFormat(monthFormat) {\n    this.setState({\n      monthFormat\n    });\n  }\n\n  parseDate(text, dateTimeFormat, timeBias) {\n    return _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"parseWithOptionalYear\"](text, dateTimeFormat, timeBias);\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed);\n    if (changed.calendarRole) {\n      _template_js__WEBPACK_IMPORTED_MODULE_2__[\"transmute\"](this.$.calendar, this.state.calendarRole);\n      this.$.calendar.addEventListener('date-changed', event => {\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n        /** @type {any} */\n        const cast = event;\n        this.date = cast.detail.date;\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n      });\n      this.$.calendar.addEventListener('mousedown', event => {\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n        this.close();\n        event.preventDefault(); // Keep focus on input.\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n      });\n    }\n    if (changed.todayButtonRole) {\n      _template_js__WEBPACK_IMPORTED_MODULE_2__[\"transmute\"](this.$.todayButton, this.state.todayButtonRole);\n      this.$.todayButton.addEventListener('mousedown', event => {\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n        this.date = _calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"today\"]();\n        this.close();\n        event.preventDefault(); // Keep focus on input.\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n      });\n    }\n    const cast = /** @type {any} */ (this.$.calendar);\n    if (changed.arrowButtonRole && 'arrowButtonRole' in this.$.calendar) {\n      cast.arrowButtonRole = this.state.arrowButtonRole;\n    }\n    if (changed.date) {\n      cast.date = this.state.date;\n    }\n    if (changed.dayRole && 'dayRole' in cast) {\n      cast.dayRole = this.state.dayRole;\n    }\n    if (changed.daysOfWeekFormat && 'daysOfWeekFormat' in cast) {\n      cast.daysOfWeekFormat = this.state.daysOfWeekFormat;\n    }\n    if (changed.locale) {\n      cast.locale = this.state.locale;\n    }\n    if (changed.monthFormat && 'monthFormat' in cast) {\n      cast.monthFormat = this.state.monthFormat;\n    }\n    if (changed.yearFormat && 'yearFormat' in cast) {\n      cast.yearFormat = this.state.yearFormat;\n    }\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"template\"]]() {\n    const result = super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"template\"]];\n\n    // Replace default slot with calendar.\n    const calendarTemplate = _template_js__WEBPACK_IMPORTED_MODULE_2__[\"html\"]`\n      <style>\n        :host {\n          width: 8em;\n        }\n\n        #calendar {\n          margin: 0.5em;\n        }\n\n        #todayButton {\n          border: 1px solid transparent;\n          padding: 0.5em;\n        }\n\n        #todayButton:hover {\n          border-color: gray;\n        }\n      </style>\n      <div id=\"calendar\" tabindex=\"-1\"></div>\n      <button id=\"todayButton\">Today</button>\n    `;\n    const defaultSlot = _template_js__WEBPACK_IMPORTED_MODULE_2__[\"defaultSlot\"](result.content);\n    if (defaultSlot) {\n      _template_js__WEBPACK_IMPORTED_MODULE_2__[\"transmute\"](defaultSlot, calendarTemplate);\n    }\n\n    return result;\n  }\n\n  /**\n   * If set, this indicates whether a date containing only a month and day\n   * should infer a year such that the time is in the future or in the past.\n   * \n   * Example: the current date is July 1, the locale is \"en-US\", and the\n   * supplied value is \"9/1\" (September 1 in the U.S.), then if `timeBias` is\n   * not set, the inferred year is the present year. If `timeBias` is set to\n   * \"past\", the date is taken to be a past date, so the inferred year will be\n   * the _previous_ year.\n   * \n   * @type {'future'|'past'|null}\n   * @default null\n   */\n  get timeBias() {\n    return this.state.timeBias;\n  }\n  set timeBias(timeBias) {\n    this.setState({\n      timeBias\n    });\n  }\n\n  /**\n   * The class, tag, or template used to create the (Go to) \"Today\" button.\n   * \n   * @type {Role}\n   * @default SeamlessButton\n   */\n  get todayButtonRole() {\n    return this.state.todayButtonRole;\n  }\n  set todayButtonRole(todayButtonRole) {\n    this.setState({\n      todayButtonRole\n    });\n  }\n\n  get value() {\n    return super.value;\n  }\n  set value(value) {\n    // If external code sets the value, it's impossible for that code to predict\n    // the effects on the date, so we'll need to raise change events.\n    const saveRaiseChangesEvents = this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]];\n    this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n    super.value = value;\n    this.setState({\n      datePriority: false\n    });\n    this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = saveRaiseChangesEvents;\n  }\n\n  /**\n   * The format used to render the year.\n   * \n   * The allowable formats are the same as the `year` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   * \n   * @type {('numeric'|'2-digit')}\n   * @default 'numeric'\n   */\n  get yearFormat() {\n    return this.state.yearFormat;\n  }\n  set yearFormat(yearFormat) {\n    this.setState({\n      yearFormat\n    });\n  }\n\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DateComboBox);\ncustomElements.define('elix-date-combo-box', DateComboBox);\n\n\n//# sourceURL=webpack:///../elix/src/DateComboBox.js?");

/***/ }),

/***/ "../elix/src/DelegateFocusMixin.js":
/*!*****************************************!*\
  !*** ../elix/src/DelegateFocusMixin.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return DelegateFocusMixin; });\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities.js */ \"../elix/src/utilities.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n\n/**\n * Delegates a component's focus to its first focusable shadow element.\n * \n * This mixin serves as a polyfill for the standard `delegatesFocus` shadow\n * root property. As of April 2019, that property is only supported in Chrome.\n * \n * @module DelegateFocusMixin\n */\nfunction DelegateFocusMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class DelegateFocus extends Base {\n\n    componentDidMount() {\n      if (super.componentDidMount) { super.componentDidMount(); }\n      // The delegatesFocus spec says that the focus outline should be shown on\n      // both the host and the focused subelement — which seems confusing and\n      // (in our opinion) looks ugly. If the browser supports delegatesFocus we\n      // suppress the host focus outline.\n      if (this.shadowRoot.delegatesFocus) {\n        this.style.outline = 'none';\n      }\n    }\n\n    /**\n     * Returns true if the component is delegating its focus.\n     * \n     * A component using `DelegateFocusMixin` will always have this property be\n     * true unless a class takes measures to override it.\n     * \n     * @type {boolean}\n     * @default true\n     */\n    get [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"delegatesFocus\"]]() {\n      return true;\n    }\n\n    // If someone tries to put the focus on us, delegate the focus to the first\n    // focusable element in the composed tree below our shadow root.\n    focus(focusOptions) {\n      if (this.shadowRoot.delegatesFocus) {\n        // Native support for delegatesFocus, so don't need to do anything.\n        super.focus(focusOptions);\n        return;\n      }\n      const focusElement = this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"focusTarget\"]];\n      if (focusElement) {\n        focusElement.focus(focusOptions);\n      }\n    }\n\n    get [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"focusTarget\"]]() {\n      return this.shadowRoot.delegatesFocus ?\n        this :\n        Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"firstFocusableElement\"])(this.shadowRoot);\n    }\n\n  }\n\n  return DelegateFocus;\n\n}\n\n\n//# sourceURL=webpack:///../elix/src/DelegateFocusMixin.js?");

/***/ }),

/***/ "../elix/src/DisabledMixin.js":
/*!************************************!*\
  !*** ../elix/src/DisabledMixin.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return DisabledMixin; });\n/**\n * Tracks the disabled state of a component that can be disabled\n * \n * @module DisabledMixin\n */\nfunction DisabledMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class Disabled extends Base {\n\n    componentDidMount() {\n      if (super.componentDidMount) { super.componentDidMount(); }\n      reflectDisabledAttribute(this);\n    }\n\n    componentDidUpdate(changed) {\n      if (super.componentDidUpdate) { super.componentDidUpdate(changed); }\n      if (changed.disabled) {\n        reflectDisabledAttribute(this);\n      }\n    }\n\n    get defaultState() {\n      return Object.assign(super.defaultState, {\n        disabled: false\n      });\n    }\n\n    /**\n     * True if the component is disabled, false (the default) if not.\n     * \n     * The value of this property will be reflected to the `disabled` attribute\n     * so that it can be referenced in CSS. Note that this non-native\n     * implementation of the `disabled` attribute will *not* trigger the\n     * `:disabled` CSS pseudo-class, so your style rules will have to reference\n     * the presence or absence of the `disabled` attribute. That is, instead\n     * of writing\n     * \n     *     my-component:disabled { ... }\n     * \n     * write this instead\n     * \n     *     my-component[disabled] { ... }\n     * \n     * Like the native `disabled` attribute, this attribute is boolean. That\n     * means that it's *existence* in markup sets the attribute, even if set to\n     * an empty string or a string like \"false\".\n     * \n     * @type {boolean}\n     * @default false\n     */\n    get disabled() {\n      return this.state.disabled;\n    }\n    set disabled(disabled) {\n      // If the supplied value is a boolean, we accept it directly. If the\n      // supplied value is a string, it was presumably set via an attribute. In\n      // that case, any non-null value counts as true.\n      const parsed = typeof disabled === 'boolean' ?\n        disabled :\n        disabled !== null;\n      // Setting the disabled state will eventually cause the property value to\n      // be reflected to the disabled attribute, which will invoke this setter\n      // again -- this time, with a string value. That string value should get\n      // parsed the same way, so the second setState call shouldn't have any\n      // effect.\n      this.setState({\n        disabled: parsed\n      });\n    }\n\n  }\n\n  return Disabled;\n}\n\n\n// Reflect value of disabled property to the corresponding attribute.\nfunction reflectDisabledAttribute(element) {\n  element.toggleAttribute('disabled', element.disabled);\n}\n\n\n//# sourceURL=webpack:///../elix/src/DisabledMixin.js?");

/***/ }),

/***/ "../elix/src/FocusVisibleMixin.js":
/*!****************************************!*\
  !*** ../elix/src/FocusVisibleMixin.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FocusVisibleMixin; });\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities.js */ \"../elix/src/utilities.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n\n// We consider the keyboard to be active if the window has received a keydown\n// event since the last mousedown event.\nlet keyboardActive = false;\n\n/** @type {any} */\nconst focusVisibleChangedListenerKey = Symbol('focusVisibleChangedListener');\n\n\n/**\n * Shows a focus indication if and only if the keyboard is active.\n * \n * The keyboard is considered to be active if a keyboard event has occurred\n * since the last mousedown event.\n * \n * This is loosely modeled after the proposed\n * [focus-visible](https://github.com/WICG/focus-visible) feature for CSS.\n * \n * @module FocusVisibleMixin\n */\nfunction FocusVisibleMixin(Base) {\n\n  // The class prototype added by the mixin.\n  return class FocusVisible extends Base {\n\n    constructor() {\n      // @ts-ignore\n      super();\n\n      // We listen to focusin/focusout instead of focus/blur because components\n      // like Menu want to handle focus visiblity for the items they contain,\n      // and those contained items can get the focus. Using focusin/focusout\n      // lets us know whether this element *or any element it contains* has the\n      // focus.\n      //\n      // Focus events are problematic in that they can occur during rendering:\n      // if an element with the focus is updated so that its tabindex is\n      // removed, it will lose focus. Since these focus handlers need to set\n      // state, this could lead to setting state during rendering, which is bad.\n      // To avoid this problem, we use promise timing to defer the setting of\n      // state.\n      this.addEventListener('focusout', event => {\n        Promise.resolve().then(() => {\n          // What has the focus now?\n          const newFocusedElement = event.relatedTarget || document.activeElement;\n          const isFocusedElement = this === newFocusedElement;\n          /** @type {any} */\n          const cast = this;\n          const containsFocus = Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"deepContains\"])(cast, newFocusedElement);\n          const lostFocus = !isFocusedElement && !containsFocus;\n          if (lostFocus) {\n            this.setState({\n              focusVisible: false\n            });\n            // No longer need to listen for changes in focus visibility.\n            document.removeEventListener('focus-visible-changed',\n              this[focusVisibleChangedListenerKey]);\n            this[focusVisibleChangedListenerKey] = null;\n          }\n        });\n      });\n      this.addEventListener('focusin', () => {\n        Promise.resolve().then(() => {\n          if (this.state.focusVisible !== keyboardActive) {\n            // Show the element as focused if the keyboard has been used.\n            this.setState({\n              focusVisible: keyboardActive\n            });\n          }\n          if (!this[focusVisibleChangedListenerKey]) {\n            // Listen to subsequent changes in focus visibility.\n            this[focusVisibleChangedListenerKey] = () => refreshFocus(this);\n            document.addEventListener('focus-visible-changed',\n              this[focusVisibleChangedListenerKey]);\n          }\n        });\n      });\n    }\n\n    get defaultState() {\n      return Object.assign(super.defaultState, {\n        focusVisible: false\n      });\n    }\n\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed) {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed); }\n      if (changed.focusVisible) {\n        // Suppress the component's normal `outline` style unless we know the\n        // focus should be visible.\n        this.style.outline = this.state.focusVisible ? '' : 'none';\n      }\n    }\n\n    /**\n     * Temporarily suppress visibility of the keyboard focus until the next\n     * keydown event.\n     * \n     * This can be useful in components like [Menu](Menu) that actively manage\n     * where the focus is in response to mouse hover activity. If the user uses\n     * the keyboard to invoke a menu, then changes to using the mouse, it can be\n     * distracting to see the focus indicator moving as well. In such\n     * situations, the component can invoke this method (e.g., in response to\n     * `mousemove`) to temporarily suppress focus visibility.\n     */\n    suppressFocusVisibility() {\n      keyboardActive = false;\n      refreshFocus(this);\n    }\n  }\n}\n\n\nfunction refreshFocus(element) {\n  element.setState({\n    focusVisible: keyboardActive\n  });\n}\n\n\nfunction updateKeyboardActive(newKeyboardActive) {\n  if (keyboardActive !== newKeyboardActive) {\n    keyboardActive = newKeyboardActive;\n    const event = new CustomEvent('focus-visible-changed', {\n      detail: {\n        focusVisible: keyboardActive\n      }\n    });\n    document.dispatchEvent(event);\n  }\n}\n\n\n// Listen for top-level keydown and mousedown events.\n// Use capture phase so we detect events even if they're handled.\nwindow.addEventListener('keydown', () => {\n  updateKeyboardActive(true);\n}, { capture: true });\n\nwindow.addEventListener('mousedown', () => {\n  updateKeyboardActive(false);\n}, { capture: true });\n\n\n//# sourceURL=webpack:///../elix/src/FocusVisibleMixin.js?");

/***/ }),

/***/ "../elix/src/KeyboardDirectionMixin.js":
/*!*********************************************!*\
  !*** ../elix/src/KeyboardDirectionMixin.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return KeyboardDirectionMixin; });\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n/**\n * Maps direction keys to direction semantics.\n * \n * This mixin is useful for components that want to map direction keys (Left,\n * Right, etc.) to movement in the indicated direction (go left, go right,\n * etc.).\n *\n * This mixin expects the component to invoke a `keydown` method when a key is\n * pressed. You can use [KeyboardMixin](KeyboardMixin) for that\n * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n *\n * This mixin calls methods such as `goLeft` and `goRight`. You can define\n * what that means by implementing those methods yourself. If you want to use\n * direction keys to navigate a selection, use this mixin with\n * [DirectionSelectionMixin](DirectionSelectionMixin).\n *\n * If the component defines a property called `orientation`, the value of that\n * property will constrain navigation to the horizontal or vertical axis.\n *\n * @module KeyboardDirectionMixin\n */\nfunction KeyboardDirectionMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class KeyboardDirection extends Base {\n\n    /**\n     * Invoked when the user wants to go/navigate down.\n     * The default implementation of this method does nothing.\n     */\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goDown\"]]() {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goDown\"]]) { return super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goDown\"]](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the end (e.g., of a list).\n     * The default implementation of this method does nothing.\n     */\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goEnd\"]]() {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goEnd\"]]) { return super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goEnd\"]](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goLeft\"]]() {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goLeft\"]]) { return super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goLeft\"]](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goRight\"]]() {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goRight\"]]) { return super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goRight\"]](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the start (e.g., of a\n     * list). The default implementation of this method does nothing.\n     */\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goStart\"]]() {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goStart\"]]) { return super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goStart\"]](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate up.\n     * The default implementation of this method does nothing.\n     */\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goUp\"]]() {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goUp\"]]) { return super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goUp\"]](); }\n    }\n\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"keydown\"]](event) {\n      let handled = false;\n\n      const orientation = this.orientation;\n      const horizontal = (orientation === 'horizontal' || orientation === 'both');\n      const vertical = (orientation === 'vertical' || orientation === 'both');\n\n      // Ignore Left/Right keys when metaKey or altKey modifier is also pressed,\n      // as the user may be trying to navigate back or forward in the browser.\n      switch (event.key) {\n\n        case 'ArrowDown':\n          if (vertical) {\n            handled = event.altKey ? this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goEnd\"]]() : this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goDown\"]]();\n          }\n          break;\n\n        case 'ArrowLeft':\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goLeft\"]]();\n          }\n          break;\n\n        case 'ArrowRight':\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goRight\"]]();\n          }\n          break;\n\n        case 'ArrowUp':\n          if (vertical) {\n            handled = event.altKey ? this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goStart\"]]() : this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goUp\"]]();\n          }\n          break;\n\n        case 'End':\n          handled = this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goEnd\"]]();\n          break;\n\n        case 'Home':\n          handled = this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"goStart\"]]();\n          break;\n      }\n\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"keydown\"]] && super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"keydown\"]](event)) || false;\n    }\n\n    // Default orientation implementation defers to super,\n    // but if not found, looks in state.\n    get orientation() {\n      return super.orientation || this.state && this.state.orientation || 'both';\n    }\n\n  }\n\n  return KeyboardDirection;\n}\n\n\n//# sourceURL=webpack:///../elix/src/KeyboardDirectionMixin.js?");

/***/ }),

/***/ "../elix/src/KeyboardMixin.js":
/*!************************************!*\
  !*** ../elix/src/KeyboardMixin.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return KeyboardMixin; });\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n/**\n * Manages keyboard handling for a component.\n *\n * This mixin handles several keyboard-related features.\n *\n * First, it wires up a single keydown event handler that can be shared by\n * multiple mixins on a component. The event handler will invoke a `keydown`\n * method with the event object, and any mixin along the prototype chain that\n * wants to handle that method can do so.\n *\n * If a mixin wants to indicate that keyboard event has been handled, and that\n * other mixins should *not* handle it, the mixin's `keydown` handler should\n * return a value of true. The convention that seems to work well is that a\n * mixin should see if it wants to handle the event and, if not, then ask the\n * superclass to see if it wants to handle the event. This has the effect of\n * giving the mixin that was applied last the first chance at handling a\n * keyboard event.\n *\n * Example:\n *\n *     [symbols.keydown](event) {\n *       let handled;\n *       switch (event.key) {\n *         // Handle the keys you want, setting handled = true if appropriate.\n *       }\n *       // Prefer mixin result if it's defined, otherwise use base result.\n *       return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n *     }\n *\n * A second feature provided by this mixin is that it implicitly makes the\n * component a tab stop if it isn't already, by setting `tabindex` to 0. This\n * has the effect of adding the component to the tab order in document order.\n *\n * @module KeyboardMixin\n */\nfunction KeyboardMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class Keyboard extends Base {\n\n    constructor() {\n      // @ts-ignore\n      super();\n      this.addEventListener('keydown', async (event) => {\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]] = true;\n        // For use with FocusVisibleMixin.\n        if (!this.state.focusVisible) {\n          // The user may have begun interacting with this element using the\n          // mouse/touch, but has now begun using the keyboard, so show focus.\n          this.setState({\n            focusVisible: true\n          });\n        }\n        const handled = this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"keydown\"]](event);\n        if (handled) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n        }\n        await Promise.resolve();\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]] = false;\n      });\n    }\n\n    get defaultState() {\n      // If we're using DelegateFocusMixin, we don't need or want to set a\n      // tabindex on the host; we'll rely on the inner shadow elements to take\n      // the focus and raise keyboard events. Otherwise, we do set a tabindex on\n      // the host, so that we can get keyboard events.\n      const tabIndex = this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"delegatesFocus\"]] ? null : 0;\n      const state = Object.assign(super.defaultState, {\n        tabIndex\n      });\n\n      return state;\n    }\n    \n    /**\n     * See the [symbols](symbols#keydown) documentation for details.\n     */\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"keydown\"]](event) {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"keydown\"]]) { return super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"keydown\"]](event); }\n      return false;\n    }\n\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed) {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed); }\n      if (changed.tabIndex) {\n        this.tabIndex = this.state.tabIndex;\n      }\n    }\n\n    // Record our own notion of the state of the tabIndex property so we can\n    // rerender if necessary.\n    get tabIndex() {\n      return super.tabIndex;\n    }\n    set tabIndex(tabIndex) {\n      // Parse the passed value, which could be a string or null.\n      let parsed = tabIndex !== null ? Number(tabIndex) : null;\n      if (parsed !== null && isNaN(parsed)) {\n        const defaultTabIndex = this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"defaultTabIndex\"]];\n        parsed = defaultTabIndex ? defaultTabIndex : 0;\n      }\n\n      // If parsed value isn't null and has changed, invoke the super setter.\n      if (parsed !== null && super.tabIndex !== parsed) {\n        super.tabIndex = parsed;\n      }\n\n      // The tabIndex setter can get called during rendering when we render our\n      // own notion of the tabIndex state, in which case we don't need or want\n      // to set state again.\n      if (!this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"rendering\"]]) {\n        // Record the new tabIndex in our state.\n        this.setState({\n          tabIndex: parsed\n        });\n      }\n    }\n\n  }\n\n  return Keyboard;\n}\n\n\n//# sourceURL=webpack:///../elix/src/KeyboardMixin.js?");

/***/ }),

/***/ "../elix/src/LanguageDirectionMixin.js":
/*!*********************************************!*\
  !*** ../elix/src/LanguageDirectionMixin.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return LanguageDirectionMixin; });\n/**\n * Lets an element determine whether it resides in right-to-left text.\n *\n * @module LanguageDirectionMixin\n */\nfunction LanguageDirectionMixin(Base) {\n\n  // The class prototype added by the mixin.\n  return class LanguageDirection extends Base {\n\n    // The only way to get text direction is to wait for the component to\n    // connect and then inspect the computed style on its root element. We set\n    // state before calling super so the new state will be included when\n    // ReactiveMixin calls render.\n    connectedCallback() {\n      /** @type {any} */ const element = this;\n      const languageDirection = getComputedStyle(element).direction;\n      const rightToLeft = languageDirection === 'rtl';\n      this.setState({\n        rightToLeft\n      });\n      if (super.connectedCallback) { super.connectedCallback(); }\n    }\n\n  }\n}\n\n\n//# sourceURL=webpack:///../elix/src/LanguageDirectionMixin.js?");

/***/ }),

/***/ "../elix/src/OpenCloseMixin.js":
/*!*************************************!*\
  !*** ../elix/src/OpenCloseMixin.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return OpenCloseMixin; });\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n/** @type {any} */\nconst closePromiseKey = Symbol('closePromise');\n/** @type {any} */\nconst closeResolveKey = Symbol('closeResolve');\n\n\n/**\n * Tracks the open/close state of a component.\n * \n * @module OpenCloseMixin\n */\nfunction OpenCloseMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class OpenClose extends Base {\n\n    /**\n     * Close the component (if not already closed).\n     * \n     * Some components like [AlertDialog](AlertDialog) want to indicate why or\n     * how they were closed. To support such scenarios, you can supply a value\n     * to the optional `closeResult` parameter. This closeResult will be made\n     * available in the `whenClosed` promise and the `state.closeResult` member.\n     * \n     * @param {object} [closeResult] - an indication of how or why the element closed\n     */\n    async close(closeResult) {\n      if (super.close) { await super.close(); }\n      this.setState({ closeResult });\n      await this.toggle(false);\n    }\n\n    /**\n     * True if the element is currently closed.\n     * \n     * @type {boolean}\n     */\n    get closed() {\n      return this.state && !this.state.opened;\n    }\n    set closed(closed) {\n      const parsed = String(closed) === 'true';\n      this.toggle(!parsed);\n    }\n\n    /**\n     * True if the element has completely closed.\n     * \n     * For components not using asynchronous open/close effects, this property\n     * returns the same value as the `closed` property. For elements that have a\n     * true value of `state.openCloseEffects` (e.g., elements using\n     * [TransitionEffectMixin](TransitionEffectMixin)), this property returns\n     * true only if `state.effect` is \"close\" and `state.effectPhase` is\n     * \"after\".\n     * \n     * @type {boolean}\n     */\n    get closeFinished() {\n      // TODO: Define closeFinished as computed state\n      return this.state.openCloseEffects ?\n        this.state.effect === 'close' && this.state.effectPhase === 'after' :\n        this.closed;\n    }\n\n    get closeResult() {\n      return this.state.closeResult;\n    }\n\n    componentDidUpdate(changed) {\n      if (super.componentDidUpdate) { super.componentDidUpdate(changed); }\n\n      if (changed.opened && this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]]) {\n        /**\n         * Raised when the opened/closed state of the component changes.\n         * \n         * @event opened-changed\n         */\n        const openedChangedEvent = new CustomEvent('opened-changed', {\n          detail: {\n            closeResult: this.state.closeResult,\n            opened: this.state.opened\n          }\n        });\n        this.dispatchEvent(openedChangedEvent);\n\n        if (this.state.opened) {\n          /**\n           * Raised when the component opens.\n           * \n           * @event opened\n           */\n          const openedEvent = new CustomEvent('opened');\n          this.dispatchEvent(openedEvent);\n        } else {\n          /**\n           * Raised when the component closes.\n           * \n           * @event closed\n           */\n          const closedEvent = new CustomEvent('closed', {\n            detail: {\n              closeResult: this.state.closeResult\n            }\n          });\n          this.dispatchEvent(closedEvent);\n        }\n      }\n\n      // If someone's waiting for the component to close, and it's completely\n      // finished closing, then resolve the close promise.\n      const closeResolve = this[closeResolveKey];\n      if (this.closeFinished && closeResolve) {\n        this[closeResolveKey] = null;\n        this[closePromiseKey] = null;\n        closeResolve(this.state.closeResult);\n      }\n    }\n\n    get defaultState() {\n      const defaults = {\n        closeResult: null,\n        opened: false\n      };\n      // If this component defines a `startEffect` method (e.g., by using\n      // TransitionEffectMixin), include default state for open/close effects.\n      // Since the component is closed by default, the default effect state is\n      // after the close effect has completed.\n      if (this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"startEffect\"]]) {\n        Object.assign(defaults, {\n          effect: 'close',\n          effectPhase: 'after',\n          openCloseEffects: true\n        });\n      }\n      return Object.assign(super.defaultState, defaults);\n    }\n\n    /**\n     * Open the element (if not already opened).\n     */\n    async open() {\n      if (super.open) { await super.open(); }\n      this.setState({ closeResult: undefined });\n      await this.toggle(true);\n    }\n    \n    /**\n     * True if the element is currently opened.\n     * \n     * @type {boolean}\n     */\n    get opened() {\n      return this.state && this.state.opened;\n    }\n    set opened(opened) {\n      const parsed = String(opened) === 'true';\n      this.setState({ closeResult: undefined });\n      this.toggle(parsed);\n    }\n\n    /**\n     * Toggle the open/close state of the element.\n     * \n     * @param {boolean} [opened] - true if the element should be opened, false\n     * if closed.\n     */\n    async toggle(opened = !this.opened) {\n      if (super.toggle) { await super.toggle(opened); }\n      const changed = opened !== this.state.opened;\n      if (changed) {\n        const changes = { opened };\n        if (this.state.openCloseEffects) {\n          changes.effect = opened ? 'open' : 'close';\n          if (this.state.effectPhase === 'after') {\n            changes.effectPhase = 'before';\n          }\n        }\n        await this.setState(changes);\n      }\n    }\n\n    /**\n     * This method can be used as an alternative to listening to the\n     * \"opened-changed\" event, particularly in situations where you want to only\n     * handle the next time the component is closed.\n     * \n     * @returns {Promise} A promise that resolves when the element has\n     * completely closed, including the completion of any asynchronous opening\n     * effect.\n     */\n    whenClosed() {\n      if (!this[closePromiseKey]) {\n        this[closePromiseKey] = new Promise(resolve => {\n          this[closeResolveKey] = resolve;\n        });\n      }\n      return this[closePromiseKey];\n    }\n  }\n\n  return OpenClose;\n}\n\n\n//# sourceURL=webpack:///../elix/src/OpenCloseMixin.js?");

/***/ }),

/***/ "../elix/src/Overlay.js":
/*!******************************!*\
  !*** ../elix/src/Overlay.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _Backdrop_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Backdrop.js */ \"../elix/src/Backdrop.js\");\n/* harmony import */ var _OpenCloseMixin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./OpenCloseMixin.js */ \"../elix/src/OpenCloseMixin.js\");\n/* harmony import */ var _OverlayFrame_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./OverlayFrame.js */ \"../elix/src/OverlayFrame.js\");\n/* harmony import */ var _OverlayMixin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./OverlayMixin.js */ \"../elix/src/OverlayMixin.js\");\n/* harmony import */ var _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ReactiveElement.js */ \"../elix/src/ReactiveElement.js\");\n/* harmony import */ var _SlotContentMixin_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SlotContentMixin.js */ \"../elix/src/SlotContentMixin.js\");\n\n\n\n\n\n\n\n\n\n\n/** @type {any} */\nconst appendedToDocumentKey = Symbol('appendedToDocument');\n\n\n// TODO: We'd like to use DelegateFocusMixin in this component, but see the note\n// at OverlayMixin's openedChanged function.\nconst Base =\n  Object(_OpenCloseMixin_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  Object(_OverlayMixin_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n  Object(_SlotContentMixin_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(\n    _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n  )));\n\n\n/**\n * An element that appears over other page elements\n * \n * The main overlay content is presented within a frame on top of an optional\n * backdrop.\n * \n * The overlay logic is provided by [OverlayMixin](OverlayMixin). `Overlay` adds\n * the definition of customizable element tags: [frameTag](#frameTag) for the\n * frame around the overlay content, and [backdropTag](#backdropTag) (if\n * defined) for the optional element covering the page elements behind the\n * overlay.\n * \n * As a convenience, the `open` method of `Overlay` will automatically add the\n * overlay to the end of the document body if the overlay isn't already in the\n * document. If the overlay is automatically attached in this way, then when it\n * closes, it will automatically be removed.\n * \n * See [Dialog](Dialog) and [Popup](Popup) for modal and modeless subclasses,\n * respectively.\n * \n * @inherits ReactiveElement\n * @mixes OpenCloseMixin\n * @mixes OverlayMixin\n * @mixes SlotContentMixin\n * @elementrole {Backdrop} backdrop\n * @elementrole {OverlayFrame} frame\n */\nclass Overlay extends Base {\n\n  get backdrop() {\n    return this.$ && this.$.backdrop;\n  }\n\n  /**\n   * The class, tag, or template used for the optional backdrop element behind\n   * the overlay.\n   * \n   * This can help focus the user's attention on the overlay content.\n   * Additionally, a backdrop can be used to absorb clicks on background page\n   * elements. For example, [Dialog](Dialog) uses [ModalBackdrop](ModalBackdrop)\n   * as an overlay backdrop in such a way.\n   * \n   * @type {Role}\n   * @default Backdrop\n   */\n  get backdropRole() {\n    return this.state.backdropRole;\n  }\n  set backdropRole(backdropRole) {\n    this.setState({ backdropRole });\n  }\n\n  componentDidUpdate(changed) {\n    super.componentDidUpdate(changed);\n    if (changed.opened && this.state.content) {\n      // If contents know how to size themselves, ask them to check their size.\n      this.state.content.forEach(element => {\n        if (element[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"checkSize\"]]) {\n          element[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"checkSize\"]]();\n        }\n      });\n    }\n    // If we're finished closing an overlay that was automatically added to the\n    // document, remove it now. Note: we only do this when the component\n    // updates, not when it mounts, because we don't want an automatically-added\n    // element to be immediately removed during its connectedCallback.\n    if (this.closeFinished && this[appendedToDocumentKey]) {\n      this[appendedToDocumentKey] = false;\n      if (this.parentNode) {\n        this.parentNode.removeChild(this);\n      }\n    }\n  }\n\n  get defaultState() {\n    return Object.assign(super.defaultState, {\n      backdropRole: _Backdrop_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n      frameRole: _OverlayFrame_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n    });\n  }\n\n  get frame() {\n    return this.$ && this.$.frame;\n  }\n\n  /**\n   * The class, tag, or template used to contain the primary overlay content.\n   * \n   * The frame element can be used to provide a border around the overlay\n   * content, and to provide visual effects such as a drop-shadow to help\n   * distinguish overlay content from background page elements.\n   * \n   * @type {Role}\n   * @default OverlayFrame\n   */\n  get frameRole() {\n    return this.state.frameRole;\n  }\n  set frameRole(frameRole) {\n    this.setState({ frameRole });\n  }\n\n  async open() {\n    if (!this.isConnected) {\n      // Overlay isn't in document yet.\n      this[appendedToDocumentKey] = true;\n      document.body.appendChild(this);\n    }\n    if (super.open) { await super.open(); }\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed);\n    if (changed.backdropRole) {\n      _template_js__WEBPACK_IMPORTED_MODULE_1__[\"transmute\"](this.$.backdrop, this.state.backdropRole);\n    }\n    if (changed.frameRole) {\n      _template_js__WEBPACK_IMPORTED_MODULE_1__[\"transmute\"](this.$.frame, this.state.frameRole);\n    }\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_1__[\"html\"]`\n      <style>\n        :host {\n          align-items: center;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          left: 0;\n          height: 100%;\n          max-height: 100vh;\n          max-width: 100vw;\n          outline: none;\n          position: fixed;\n          -webkit-tap-highlight-color: transparent;\n          top: 0;\n          width: 100%;\n        }\n\n        #frame {\n          box-sizing: border-box;\n          max-height: 100%;\n          max-width: 100%;\n          overscroll-behavior: contain;\n          pointer-events: initial;\n        }\n      </style>\n      <elix-backdrop id=\"backdrop\" tabindex=\"-1\"></elix-backdrop>\n      <elix-overlay-frame id=\"frame\" role=\"none\">\n        <slot></slot>\n      </elix-overlay-frame>\n    `;\n  }\n\n}\n\n\ncustomElements.define('elix-overlay', Overlay);\n/* harmony default export */ __webpack_exports__[\"default\"] = (Overlay);\n\n\n//# sourceURL=webpack:///../elix/src/Overlay.js?");

/***/ }),

/***/ "../elix/src/OverlayFrame.js":
/*!***********************************!*\
  !*** ../elix/src/OverlayFrame.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ReactiveElement.js */ \"../elix/src/ReactiveElement.js\");\n\n\n\n\n\n/**\n * A simple frame for overlay content.\n * \n * The default appearance of `OverlayFrame` uses a simple drop-shadow to let the\n * user see the framed content as being on top of the background page content.\n * \n * @inherits ReactiveElement\n */\nclass OverlayFrame extends _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_1__[\"html\"]`\n      <style>\n        :host {\n          background: white;\n          border: 1px solid rgba(0, 0, 0, 0.2);\n          box-shadow: 0 0px 10px rgba(0, 0, 0, 0.5);\n          position: relative;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n}\n\n\ncustomElements.define('elix-overlay-frame', OverlayFrame);\n/* harmony default export */ __webpack_exports__[\"default\"] = (OverlayFrame);\n\n\n//# sourceURL=webpack:///../elix/src/OverlayFrame.js?");

/***/ }),

/***/ "../elix/src/OverlayMixin.js":
/*!***********************************!*\
  !*** ../elix/src/OverlayMixin.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return OverlayMixin; });\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities.js */ \"../elix/src/utilities.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n\n/** @type {any} */\nconst defaultZIndexKey = Symbol('assignedZIndex');\n/** @type {any} */\nconst restoreFocusToElementKey = Symbol('restoreFocusToElement');\n\n\n/**\n * Displays an opened element on top of other page elements.\n * \n * This mixin handles showing and hiding an overlay element. It, together with\n * [OpenCloseMixin](OpenCloseMixin), form the core behavior for [Overlay](Overlay),\n * which in turn forms the basis of Elix's overlay components.\n * \n * @module OverlayMixin\n */\nfunction OverlayMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class Overlay extends Base {\n\n    constructor() {\n      // @ts-ignore\n      super();\n      this.addEventListener('blur', event => {\n        // What has the focus now?\n        const newFocusedElement = event.relatedTarget || document.activeElement;\n        /** @type {any} */\n        const node = this;\n        const focusInside = Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"deepContains\"])(node, newFocusedElement);\n        if (!focusInside) {\n          if (this.opened) {\n            // The user has most likely clicked on something in the background\n            // of a modeless overlay. Remember that element, and restore focus\n            // to it when the overlay finishes closing.\n            this[restoreFocusToElementKey] = newFocusedElement;\n          } else {\n            // A blur event fired, but the overlay closed itself before the blur\n            // event could be processed. In closing, we may have already\n            // restored the focus to the element that originally invoked the\n            // overlay. Since the user has clicked somewhere else to close the\n            // overlay, put the focus where they wanted it.\n            newFocusedElement.focus();\n            this[restoreFocusToElementKey] = null;\n          }\n        }\n      });\n    }\n\n    // TODO: Document\n    get autoFocus() {\n      return this.state.autoFocus;\n    }\n    set autoFocus(autoFocus) {\n      this.setState({ autoFocus });\n    }\n\n    componentDidMount() {\n      if (super.componentDidMount) { super.componentDidMount(); }\n      openedChanged(this);\n    }\n\n    componentDidUpdate(changed) {\n      if (super.componentDidUpdate) { super.componentDidUpdate(changed); }\n      if (changed.opened) {\n        openedChanged(this);\n      }\n    }\n\n    get defaultState() {\n      return Object.assign(super.defaultState, {\n        autoFocus: true\n      });\n    }\n\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed) {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed); }\n      if (changed.effectPhase || changed.opened) {\n        const closed = typeof this.closeFinished === 'undefined' ?\n          this.closed :\n          this.closeFinished;\n\n        // We'd like to just use the `hidden` attribute, but Edge has trouble\n        // with that: if the hidden attribute is removed from an overlay to\n        // display it, Edge may not paint it correctly. And a side-effect\n        // of styling with the hidden attribute is that naive styling of the\n        // component from the outside (to change to display: flex, say) will\n        // override the display: none implied by hidden. To work around both\n        // these problems, we use display: none when the overlay is closed.\n        this.style.display = closed ? 'none' : null;\n\n        if (closed) {\n          if (this[defaultZIndexKey]) {\n            // Remove default z-index.\n            this.style.zIndex = null;\n            this[defaultZIndexKey] = null;\n          }\n        } else if (this[defaultZIndexKey]) {\n          this.style.zIndex = this[defaultZIndexKey];\n        } else {\n          const cast = /** @type {any} */ (this);\n          const computedZIndex = getComputedStyle(cast).zIndex;\n          if (computedZIndex === 'auto' && this.style.zIndex === '') {\n            // No z-index has been assigned to this element via CSS.\n            // Pick a default z-index, remember it, and apply it.\n            const defaultZIndex = maxZIndexInUse() + 1;\n            this[defaultZIndexKey] = defaultZIndex;\n            this.style.zIndex = defaultZIndex;\n          }\n        }\n      }\n    }\n  }\n\n  return Overlay;\n}\n\n\n/*\n * Return the highest z-index currently in use in the document's light DOM.\n * \n * This calculation looks at all light DOM elements, so is theoretically\n * expensive. That said, it only runs when an overlay is opening, and is only used\n * if an overlay doesn't have a z-index already. In cases where performance is\n * an issue, this calculation can be completely circumvented by manually\n * applying a z-index to an overlay.\n */\nfunction maxZIndexInUse() {\n  const elements = document.body.querySelectorAll('*');\n  const zIndices = Array.from(elements, element => {\n    const style = getComputedStyle(element);\n    let zIndex = 0;\n    if (style.position !== 'static' && style.zIndex !== 'auto') {\n      const parsed = style.zIndex ? parseInt(style.zIndex) : 0;\n      zIndex = !isNaN(parsed) ? parsed : 0;\n    }\n    return zIndex;\n  });\n  return Math.max(...zIndices);\n}\n\n\n// Update the overlay following a change in opened state.\nfunction openedChanged(element) {\n  if (element.state.autoFocus) {\n    if (element.state.opened) {\n      // Opened\n      if (!element[restoreFocusToElementKey] && document.activeElement !== document.body) {\n        // Remember which element had the focus before we were opened.\n        element[restoreFocusToElementKey] = document.activeElement;\n      }\n      // Focus on the element itself (if it's focusable), or the first focusable\n      // element inside it.\n      // TODO: We'd prefer to require that overlays (like the Overlay base\n      // class) make use of delegatesFocus via DelegateFocusMixin, which would\n      // let us drop the need for this mixin here to do anything special with\n      // focus. However, an initial trial of this revealed an issue in\n      // MenuButton, where invoking the menu did not put the focus on the first\n      // menu item as expected. Needs more investigation.\n      const focusElement = Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"firstFocusableElement\"])(element);\n      if (focusElement) {\n        focusElement.focus();\n      }\n    } else {\n      // Closed\n      if (element[restoreFocusToElementKey]) {\n        // Restore focus to the element that had the focus before the overlay was\n        // opened.\n        element[restoreFocusToElementKey].focus();\n        element[restoreFocusToElementKey] = null;\n      }\n    }\n  }\n}\n\n\n//# sourceURL=webpack:///../elix/src/OverlayMixin.js?");

/***/ }),

/***/ "../elix/src/Popup.js":
/*!****************************!*\
  !*** ../elix/src/Popup.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Overlay_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Overlay.js */ \"../elix/src/Overlay.js\");\n/* harmony import */ var _KeyboardMixin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./KeyboardMixin.js */ \"../elix/src/KeyboardMixin.js\");\n/* harmony import */ var _PopupModalityMixin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PopupModalityMixin.js */ \"../elix/src/PopupModalityMixin.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n\n\n\nconst Base =\n  Object(_KeyboardMixin_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  Object(_PopupModalityMixin_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n    _Overlay_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n  ));\n\n\n/**\n * Lightweight form of modeless overlay that can be easily dismissed\n * \n * When opened, the popup displays its children on top of other page elements.\n * \n * @inherits Overlay\n * @mixes KeyboardMixin\n * @mixes PopupModalityMixin\n */\nclass Popup extends Base {\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_3__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_3__[\"render\"]](changed);\n    if (changed.backdropRole) {\n      const mousedownHandler = async event => {\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_3__[\"raiseChangeEvents\"]] = true;\n        await this.close();\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_3__[\"raiseChangeEvents\"]] = false;\n        event.preventDefault();\n        event.stopPropagation();\n      };\n      this.$.backdrop.addEventListener('mousedown', mousedownHandler);\n\n      // Mobile Safari doesn't seem to generate a mousedown handler on the\n      // backdrop in some cases that Mobile Chrome handles. For completeness, we\n      // also listen to touchend.\n      if (!('PointerEvent' in window)) {\n        this.$.backdrop.addEventListener('touchend', mousedownHandler);\n      }\n    }\n  }\n\n}\n\n\ncustomElements.define('elix-popup', Popup);\n/* harmony default export */ __webpack_exports__[\"default\"] = (Popup);\n\n\n//# sourceURL=webpack:///../elix/src/Popup.js?");

/***/ }),

/***/ "../elix/src/PopupModalityMixin.js":
/*!*****************************************!*\
  !*** ../elix/src/PopupModalityMixin.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PopupModalityMixin; });\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities.js */ \"../elix/src/utilities.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n\n/** @type {any} */\nconst implicitCloseListenerKey = Symbol('implicitCloseListener');\n\n\n/**\n * Gives an overlay lightweight popup-style behavior.\n * \n * This mixin expects the component to provide:\n * \n * * An open/close API compatible with `OpenCloseMixin`.\n * \n * The mixin provides these features to the component:\n * \n * * Event handlers that close the element presses the Esc key, moves the focus\n *   outside the element, scrolls the document, resizes the document, or\n *   switches focus away from the document.\n * * A default ARIA role of `alert`.\n * \n * For modal overlays, use `DialogModalityMixin` instead. See the documentation\n * of that mixin for a comparison of modality behaviors.\n * \n * @module PopupModalityMixin\n */\nfunction PopupModalityMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class PopupModality extends Base {\n\n    constructor() {\n      // @ts-ignore\n      super();\n\n      // If we lose focus, and the new focus isn't inside us, then close.\n      this.addEventListener('blur', async (event) => {\n        // What has the focus now?\n        const newFocusedElement = event.relatedTarget || document.activeElement;\n        /** @type {any} */\n        const cast = this;\n        if (!Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"deepContains\"])(cast, newFocusedElement)) {\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n          await this.close();\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n        }\n      });\n    }\n\n    componentDidUpdate(changed) {\n      if (super.componentDidUpdate) { super.componentDidUpdate(changed); }\n      if (changed.opened) {\n        if (this.opened) {\n          // Wait before wiring up events – if the popup was opened because the\n          // user clicked something, that opening click event may still be\n          // bubbling up, and we only want to start listening after it's been\n          // processed. Alternatively, if the popup caused the page to scroll, we\n          // don't want to immediately close because the page scrolled (only if\n          // the user scrolls).\n          const callback = 'requestIdleCallback' in window ?\n            window['requestIdleCallback'] :\n            setTimeout;\n          callback(() => {\n            // It's conceivable the popup was closed before the timeout completed,\n            // so double-check that it's still opened before listening to events.\n            if (this.opened) {\n              addEventListeners(this);\n            }\n          });\n        } else {\n          removeEventListeners(this);\n        }\n      }\n    }\n\n    /**\n     * True if the popup should close if the user resizes the window.\n     * \n     * @type {boolean}\n     * @default true\n     */\n    get closeOnWindowResize() {\n      return this.state.closeOnWindowResize;\n    }\n    set closeOnWindowResize(closeOnWindowResize) {\n      this.setState({ closeOnWindowResize });\n    }\n\n    get defaultState() {\n      return Object.assign(super.defaultState, {\n        closeOnWindowResize: true,\n        role: 'alert'\n      });\n    }\n\n    // Close on Esc key.\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"keydown\"]](event) {\n      let handled = false;\n\n      switch (event.key) {\n        case 'Escape':\n          this.close({\n            canceled: 'Escape'\n          });\n          handled = true;\n          break;\n      }\n\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super.keydown && super.keydown(event)) || false;\n    }\n\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed) {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed); }\n      if (changed.role) {\n        // Apply top-level role.\n        const { role } = this.state;\n        this.setAttribute('role', role);\n      }\n    }\n    \n    // Setting the standard role attribute will invoke this property setter,\n    // which will allow us to update our state.\n    get role() {\n      return super.role;\n    }\n    set role(role) {\n      super.role = role;\n      if (!this[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"rendering\"]]) {\n        this.setState({\n          role\n        });\n      }\n    }\n\n  }\n\n  return PopupModality;\n}\n\n\nfunction addEventListeners(element) {\n\n  // Close handlers for window events.\n  element[implicitCloseListenerKey] = async (event) => {\n    const handleEvent = event.type !== 'resize' || element.state.closeOnWindowResize;\n    if (!Object(_utilities_js__WEBPACK_IMPORTED_MODULE_0__[\"ownEvent\"])(element, event) && handleEvent) {\n      element[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = true;\n      await element.close();\n      element[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"raiseChangeEvents\"]] = false;\n    }\n  };\n\n  // Window blur event tracks loss of focus of *window*, not just element.\n  window.addEventListener('blur', element[implicitCloseListenerKey]);\n  window.addEventListener('resize', element[implicitCloseListenerKey]);\n  window.addEventListener('scroll', element[implicitCloseListenerKey]);\n}\n\n\nfunction removeEventListeners(element) {\n  if (element[implicitCloseListenerKey]) {\n    window.removeEventListener('blur', element[implicitCloseListenerKey]);\n    window.removeEventListener('resize', element[implicitCloseListenerKey]);\n    window.removeEventListener('scroll', element[implicitCloseListenerKey]);\n    element[implicitCloseListenerKey] = null;\n  }\n}\n\n\n//# sourceURL=webpack:///../elix/src/PopupModalityMixin.js?");

/***/ }),

/***/ "../elix/src/PopupSource.js":
/*!**********************************!*\
  !*** ../elix/src/PopupSource.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _AriaRoleMixin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AriaRoleMixin.js */ \"../elix/src/AriaRoleMixin.js\");\n/* harmony import */ var _Backdrop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Backdrop.js */ \"../elix/src/Backdrop.js\");\n/* harmony import */ var _DisabledMixin_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DisabledMixin.js */ \"../elix/src/DisabledMixin.js\");\n/* harmony import */ var _FocusVisibleMixin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./FocusVisibleMixin.js */ \"../elix/src/FocusVisibleMixin.js\");\n/* harmony import */ var _LanguageDirectionMixin_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./LanguageDirectionMixin.js */ \"../elix/src/LanguageDirectionMixin.js\");\n/* harmony import */ var _OpenCloseMixin_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./OpenCloseMixin.js */ \"../elix/src/OpenCloseMixin.js\");\n/* harmony import */ var _OverlayFrame_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./OverlayFrame.js */ \"../elix/src/OverlayFrame.js\");\n/* harmony import */ var _Popup_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Popup.js */ \"../elix/src/Popup.js\");\n/* harmony import */ var _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ReactiveElement.js */ \"../elix/src/ReactiveElement.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst resizeListenerKey = Symbol('resizeListener');\n\n\nconst Base =\n  Object(_AriaRoleMixin_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  Object(_DisabledMixin_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\n  Object(_FocusVisibleMixin_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\n  Object(_LanguageDirectionMixin_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(\n  Object(_OpenCloseMixin_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(\n    _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]\n  )))));\n\n\n/**\n * Positions a popup with respect to a source element\n * \n * @inherits ReactiveElement\n * @mixes AriaRoleMixin\n * @mixes DisabledMixin\n * @mixes FocusVisibleMixin\n * @mixes KeyboardMixin\n * @mixes OpenCloseMixin\n * @elementrole {Backdrop} backdrop\n * @elementrole {OverlayFrame} frame\n * @elementrole {Popup} popup\n * @elementrole {'button'} source\n */\nclass PopupSource extends Base {\n\n  /**\n   * The class, tag, or template used for the optional backdrop element behind\n   * the overlay.\n   * \n   * This can help focus the user's attention on the overlay content.\n   * Additionally, a backdrop can be used to absorb clicks on background page\n   * elements. For example, [Dialog](Dialog) uses [ModalBackdrop](ModalBackdrop)\n   * as an overlay backdrop in such a way.\n   * \n   * @type {Role}\n   * @default Backdrop\n   */\n  get backdropRole() {\n    return this.state.backdropRole;\n  }\n  set backdropRole(backdropRole) {\n    this.setState({ backdropRole });\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    if (this.state.opened) {\n      // Popup is opened initially, which is somewhat unusual.\n      waitThenRenderOpened(this);\n    }\n    this.setAttribute('aria-haspopup', 'true');\n  }\n\n  componentDidUpdate(changed) {\n    super.componentDidUpdate(changed);\n    if (changed.opened) {\n      if (this.opened) {\n        waitThenRenderOpened(this);\n      } else {\n        removeEventListeners(this);\n      }\n    } else if (this.opened && !this.state.popupMeasured) {\n      // Need to recalculate popup measurements.\n      measurePopup(this);\n    }\n  }\n\n  get defaultState() {\n\n    const result = Object.assign(super.defaultState, {\n      backdropRole: _Backdrop_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n      frameRole: _OverlayFrame_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n      horizontalAlign: 'start',\n      popupHeight: null,\n      popupMeasured: false,\n      popupPosition: 'below',\n      popupRole: _Popup_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n      popupWidth: null,\n      role: 'none',\n      roomAbove: null,\n      roomBelow: null,\n      roomLeft: null,\n      roomRight: null,\n      sourceRole: 'div'      \n    });\n\n    // Closing popup resets our calculations of popup size and room.\n    result.onChange(['opened'], state => {\n      if (!state.opened) {\n        return {\n          popupHeight: null,\n          popupMeasured: false,\n          popupWidth: null,\n          roomAbove: null,\n          roomBelow: null,\n          roomLeft: null,\n          roomRight: null\n        }\n      }\n      return null;\n    });\n\n    return result;\n  }\n\n  /**\n   * The class, tag, or template used to contain the popup content.\n   * \n   * The frame element can be used to provide a border around the popup content,\n   * and to provide visual effects such as a drop-shadow to help distinguish\n   * popup content from background page elements.\n   * \n   * @type {Role}\n   * @default OverlayFrame\n   */\n  get frameRole() {\n    return this.state.frameRole;\n  }\n  set frameRole(frameRole) {\n    this.setState({ frameRole });\n  }\n\n  /**\n   * The alignment of the popup with respect to the source button.\n   * \n   * * `start`: popup and source are aligned on the leading edge according to\n   *   the text direction\n   * * `end`: popup and source are aligned on the trailing edge according to the\n   *   text direction\n   * * `left`: popup and source are left-aligned\n   * * `right`: popup and source are right-aligned\n   * * `stretch: both left and right edges are aligned\n   * \n   * @type {('start'|'end'|'left'|'right'|'stretch')}\n   * @default 'start'\n   */\n  get horizontalAlign() {\n    return this.state.horizontalAlign;\n  }\n  set horizontalAlign(horizontalAlign) {\n    this.setState({\n      horizontalAlign\n    });\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed);\n    if (changed.backdropRole) {\n      if ('backdropRole' in this.$.popup) {\n        const { backdropRole } = this.state;\n        /** @type {any} */ (this.$.popup).backdropRole = backdropRole;\n      }\n    }\n    if (changed.frameRole) {\n      if ('frameRole' in this.$.popup) {\n        const { frameRole } = this.state;\n        /** @type {any} */ (this.$.popup).frameRole = frameRole;\n      }\n    }\n    if (changed.popupRole) {\n      _template_js__WEBPACK_IMPORTED_MODULE_1__[\"transmute\"](this.$.popup, this.state.popupRole);\n\n      // Popup's opened state becomes our own opened state.\n      this.$.popup.addEventListener('opened', () => {\n        if (!this.opened) {\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]] = true;\n          this.open();\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]] = false;\n        }\n      });\n\n      // Popup's closed state becomes our own closed state.\n      this.$.popup.addEventListener('closed', event => {\n        if (!this.closed) {\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]] = true;\n          /** @type {any} */ \n          const cast = event;\n          const closeResult = cast.detail.closeResult;\n          this.close(closeResult);\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]] = false;\n        }\n      });\n    }\n    if (changed.horizontalAlign || changed.popupMeasured ||\n        changed.rightToLeft) {\n      const {\n        horizontalAlign,\n        popupHeight,\n        popupMeasured,\n        popupPosition,\n        popupWidth,\n        rightToLeft,\n        roomAbove,\n        roomBelow,\n        roomLeft,\n        roomRight\n      } = this.state;\n      \n      const fitsAbove = popupHeight <= roomAbove;\n      const fitsBelow = popupHeight <= roomBelow;\n      const canLeftAlign = popupWidth <= roomRight;\n      const canRightAlign = popupWidth <= roomLeft;\n\n      const preferPositionBelow = popupPosition === 'below';\n\n      // We respect each position popup preference (above/below/right/right) if\n      // there's room in that direction. Otherwise, we use the horizontal/vertical\n      // position that maximizes the popup width/height.\n      const positionBelow =\n        (preferPositionBelow && (fitsBelow || roomBelow >= roomAbove)) ||\n        (!preferPositionBelow && !fitsAbove && roomBelow >= roomAbove);\n      const fitsVertically = positionBelow && fitsBelow ||\n        !positionBelow && fitsAbove;\n      const maxFrameHeight = fitsVertically ?\n        null :\n        positionBelow ?\n          roomBelow :\n          roomAbove;\n\n      // Position popup.\n      const bottom = positionBelow ? null : 0;\n\n      let left;\n      let right;\n      let maxFrameWidth;\n      if (horizontalAlign === 'stretch') {\n        left = 0;\n        right = 0;\n        maxFrameWidth = null;\n      } else {\n        const preferLeftAlign = horizontalAlign === 'left' ||\n          (rightToLeft ?\n            horizontalAlign === 'end' :\n            horizontalAlign === 'start');\n        // The above/below preference rules also apply to left/right alignment.\n        const alignLeft =\n          (preferLeftAlign && (canLeftAlign || roomRight >= roomLeft)) ||\n          (!preferLeftAlign && !canRightAlign && roomRight >= roomLeft);\n        left = alignLeft ? 0 : null;\n        right = !alignLeft ? 0 : null;\n    \n        const fitsHorizontally = alignLeft && roomRight ||\n          !alignLeft && roomLeft;\n        maxFrameWidth = fitsHorizontally ?\n          null :\n          alignLeft ?\n            roomRight :\n            roomLeft;\n      }\n\n      // Until we've measured the rendered position of the popup, render it in\n      // fixed position (so it doesn't affect page layout or scrolling), and don't\n      // make it visible yet. If we use `visibility: hidden` for this purpose, the\n      // popup won't be able to receive the focus. Instead, we use zero opacity as\n      // a way to make the popup temporarily invisible until we have checked where\n      // it fits.\n      const opacity = popupMeasured ? null : 0;\n      const position = popupMeasured ? 'absolute' : 'fixed';\n\n      const popup = this.$.popup;\n      Object.assign(popup.style, {\n        bottom,\n        left,\n        opacity,\n        position,\n        right\n      });\n      const frame = /** @type {any} */ (popup).frame;\n      Object.assign(frame.style, {\n        maxHeight: maxFrameHeight ? `${maxFrameHeight}px` : null,\n        maxWidth: maxFrameWidth ? `${maxFrameWidth}px` : null\n      });\n      this.$.popupContainer.style.top = positionBelow ? null : '0';\n    }\n    if (changed.sourceRole) {\n      _template_js__WEBPACK_IMPORTED_MODULE_1__[\"transmute\"](this.$.source, this.state.sourceRole);\n    }    \n    if (changed.opened) {\n      const { opened } = this.state;\n      Object.assign(this.$.source.style, {\n        backgroundColor: opened ? 'highlight' : null,\n        color: opened ? 'highlighttext' : null\n      });\n      /** @type {any} */ (this.$.popup).opened = opened;\n      this.setAttribute('aria-expanded', opened.toString());\n    }\n    if (changed.disabled) {\n      if ('disabled' in this.$.source) {\n        const { disabled } = this.state;\n        /** @type {any} */ (this.$.source).disabled = disabled;\n      }\n    }\n  }\n\n  /**\n   * The preferred direction for the popup.\n   * \n   * * `above`: popup should appear above the source\n   * * `below`: popup should appear below the source\n   * \n   * @type {('above'|'below')}\n   * @default 'below'\n   */\n  get popupPosition() {\n    return this.state.popupPosition;\n  }\n  set popupPosition(popupPosition) {\n    this.setState({\n      popupPosition\n    });\n  }\n\n  /**\n   * The class, tag, or template used to define the popup.\n   * \n   * The popup element is responsible for handling overlay behavior.\n   * \n   * @type {Role}\n   * @default Popup\n   */\n  get popupRole() {\n    return this.state.popupRole;\n  }\n  set popupRole(popupRole) {\n    this.setState({ popupRole });\n  }\n\n  /**\n   * The class, tag, or template used for the button (or other element) that\n   * will invoke the popup.\n   * \n   * @type {Role}\n   * @default 'button'\n   */\n  get sourceRole() {\n    return this.state.sourceRole;\n  }\n  set sourceRole(sourceRole) {\n    this.setState({ sourceRole });\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_1__[\"html\"]`\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n        }\n\n        #source {\n          height: 100%;\n          -webkit-tap-highlight-color: transparent;\n          touch-action: manipulation;\n          width: 100%;\n        }\n\n        #popupContainer {\n          height: 0;\n          outline: none;\n          position: absolute;\n          width: 100%;\n        }\n\n        #popup {\n          align-items: initial;\n          flex-direction: initial;\n          height: initial;\n          justify-content: initial;\n          left: initial;\n          outline: none;\n          position: absolute;\n          top: initial;\n          width: initial;\n        }\n      </style>\n      <div id=\"source\">\n        <slot name=\"source\"></slot>\n      </div>\n      <div id=\"popupContainer\" role=\"none\">\n        <div id=\"popup\" role=\"none\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n}\n\n\nfunction addEventListeners(element) {\n  element[resizeListenerKey] = () => {\n    measurePopup(element);\n  }\n  window.addEventListener('resize', element[resizeListenerKey]);\n}\n\n\nfunction removeEventListeners(element) {\n  if (element[resizeListenerKey]) {\n    window.removeEventListener('resize', element[resizeListenerKey]);\n    element[resizeListenerKey] = null;\n  }\n}\n\n\n// If we haven't already measured the popup since it was opened, measure its\n// dimensions and the relevant distances in which the popup might be opened.\nfunction measurePopup(element) {\n  const windowHeight = window.innerHeight;\n  const windowWidth = window.innerWidth;\n  const popupRect = element.$.popup.getBoundingClientRect();\n  const sourceRect = element.getBoundingClientRect();\n  element.setState({\n    popupHeight: popupRect.height,\n    popupMeasured: true,\n    popupWidth: popupRect.width,\n    roomAbove: sourceRect.top,\n    roomBelow: Math.ceil(windowHeight - sourceRect.bottom),\n    roomLeft: sourceRect.right,\n    roomRight: Math.ceil(windowWidth - sourceRect.left),\n    windowHeight,\n    windowWidth\n  });\n}\n\n//\n// When a popup is first rendered, we let it render invisibly so that it doesn't\n// affect the page layout.\n//\n// We then wait, for two reasons:\n// \n// 1) We need to give the popup time to render invisibly. That lets us get the\n//    true size of the popup content.\n//\n// 2) Wire up events that can dismiss the popup. If the popup was opened because\n//    the user clicked something, that opening click event may still be bubbling\n//    up, and we only want to start listening after it's been processed.\n//    Along the same lines, if the popup caused the page to scroll, we don't\n//    want to immediately close because the page scrolled (only if the user\n//    scrolls).\n//\n// After waiting, we can take care of both of the above tasks.\n//\nfunction waitThenRenderOpened(element) {\n  // Wait a tick to let the newly-opened component actually render.\n  setTimeout(() => {\n    // It's conceivable the popup was closed before the timeout completed,\n    // so double-check that it's still opened before listening to events.\n    if (element.opened) {\n      measurePopup(element);\n      addEventListeners(element);\n    }\n  });\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PopupSource);\ncustomElements.define('elix-popup-source', PopupSource);\n\n\n//# sourceURL=webpack:///../elix/src/PopupSource.js?");

/***/ }),

/***/ "../elix/src/ReactiveElement.js":
/*!**************************************!*\
  !*** ../elix/src/ReactiveElement.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _AttributeMarshallingMixin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AttributeMarshallingMixin.js */ \"../elix/src/AttributeMarshallingMixin.js\");\n/* harmony import */ var _ReactiveMixin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ReactiveMixin.js */ \"../elix/src/ReactiveMixin.js\");\n/* harmony import */ var _ShadowTemplateMixin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ShadowTemplateMixin.js */ \"../elix/src/ShadowTemplateMixin.js\");\n\n\n\n\n\n/**\n * General-purpose base for writing components in functional-reactive style\n * \n * This base class lets you create web components in a functional-reactive\n * programming (FRP) style. It simply bundles a small set of mixins:\n *\n *     const ReactiveElement =\n *       AttributeMarshallingMixin(\n *       ReactiveMixin(\n *       ShadowTemplateMixin(\n *         HTMLElement\n *       )))));\n *\n * `ReactiveElement` is provided as a convenience. You can achieve the same\n * result by applying the mixins yourself to `HTMLElement`.\n * \n * @inherits HTMLElement\n * @mixes AttributeMarshallingMixin\n * @mixes ReactiveMixin\n * @mixes ShadowTemplateMixin\n */\nconst ReactiveElement =\n  Object(_AttributeMarshallingMixin_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\n  Object(_ReactiveMixin_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  Object(_ShadowTemplateMixin_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n    HTMLElement\n  )));\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ReactiveElement);\n\n\n//# sourceURL=webpack:///../elix/src/ReactiveElement.js?");

/***/ }),

/***/ "../elix/src/ReactiveMixin.js":
/*!************************************!*\
  !*** ../elix/src/ReactiveMixin.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ReactiveMixin; });\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./State.js */ \"../elix/src/State.js\");\n\n\n\n\n/** @type {any} */\nconst mountedKey = Symbol('mounted');\n/** @type {any} */\nconst stateKey = Symbol('state');\n/** @type {any} */\nconst raiseChangeEventsInNextRenderKey = Symbol('raiseChangeEventsInNextRender');\n\n\n// Tracks total set of changes made to elements since their last render.\nconst changedSinceLastRender = new WeakMap();\n\n\n/**\n * Manages component state and renders changes in state\n * \n * This is modeled after React/Preact's state management, and is adapted for\n * use with web components. Applying this mixin to a component will give it\n * FRP behavior comparable to React's.\n * \n * @module ReactiveMixin\n */\nfunction ReactiveMixin(Base) {\n  return class Reactive extends Base {\n\n    constructor() {\n      // @ts-ignore\n      super();\n      // Set the initial state from the default state defined by the component\n      // and its mixins.\n      this.setState(this.defaultState);\n    }\n\n    componentDidMount() {\n      if (super.componentDidMount) { super.componentDidMount(); }\n    }\n\n    componentDidUpdate(changed) {\n      if (super.componentDidUpdate) { super.componentDidUpdate(changed); }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      // Render the component. If the component was forced to render before this\n      // point, and the state hasn't changed, this call will be a no-op.\n      this.render();\n    }\n\n    /**\n     * The default state for the component. This can be extended by mixins and\n     * classes to provide additional default state.\n     * \n     * @type {State}\n     */\n    get defaultState() {\n      return new _State_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    }\n\n    /**\n     * Render pending component changes to the DOM.\n     * \n     * This method does nothing if the state has not changed since the last\n     * render call.\n     * \n     * This method invokes all internal render methods. It then invoked\n     * `componentDidMount` (for first render) or `componentDidUpdate` (for\n     * subsequent renders).\n     */\n    render() {\n\n      // Determine what's changed since the last render.\n      const changed = changedSinceLastRender.get(this);\n\n      // We only render if the component's never been rendered before, or is\n      // something's actually changed since the last render. Consecutive\n      // synchronous setState calls will queue up corresponding async render\n      // calls. By the time the first render call actually happens, the complete\n      // state is available, and that is what is rendered. When the following\n      // render calls happen, they will see that the complete state has already\n      // been rendered, and skip doing any work.\n      if (!this[mountedKey] || changed !== null) {\n\n        // If at least one of the setState calls was made in response to user\n        // interaction or some other component-internal event, set the\n        // raiseChangeEvents flag so that componentDidMount/componentDidUpdate\n        // know whether to raise property change events.\n        const saveRaiseChangeEvents = this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]];\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]] = this[raiseChangeEventsInNextRenderKey];\n\n        // We set a flag to indicate that rendering is happening. The component\n        // may use this to avoid triggering other updates during the render.\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"rendering\"]] = true;\n\n        // Invoke any internal render implementations.\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed);\n\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"rendering\"]] = false;\n\n        // Since we've now rendered all changes, clear the change log. If other\n        // async render calls are queued up behind this call, they'll see an\n        // empty change log, and so skip unnecessary render work.\n        changedSinceLastRender.set(this, null);\n\n        // Let the component know it was rendered.\n        // First time is consider mounting; subsequent times are updates.\n        if (!this[mountedKey]) {\n          this.componentDidMount();\n          this[mountedKey] = true;\n        } else {\n          this.componentDidUpdate(changed);\n        }\n\n        // Restore state of event flags.\n        this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]] = saveRaiseChangeEvents;\n        this[raiseChangeEventsInNextRenderKey] = saveRaiseChangeEvents;\n      }\n    }\n\n    /**\n     * Internal method for rendering any recent changes in state to the DOM.\n     * \n     * The default implementation of this method does nothing. Override this\n     * method in your component to update your component's host element and\n     * any shadow elements to reflect the component's new state. See the\n     * [rendering example](ReactiveMixin#rendering).\n     * \n     * Be sure to call `super` in your method implementation so that your\n     * component's base classes and mixins have a chance to perform their own\n     * render work.\n     * \n     * @param {object} changed - dictionary of flags indicating which state\n     * members have changed since the last render\n     */\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed) {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed); }\n    }\n\n    /**\n     * Update the component's state by merging the specified changes on\n     * top of the existing state. If the component is connected to the document,\n     * and the new state has changed, this returns a promise to asynchronously\n     * render the component. Otherwise, this returns a resolved promise.\n     * \n     * @param {object} changes - the changes to apply to the element's state\n     * @returns {Promise} - resolves when the new state has been rendered\n     */\n    async setState(changes) {\n      // There's no good reason to have a render method update state.\n      if (this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"rendering\"]]) {\n        /* eslint-disable no-console */\n        console.warn(`${this.constructor.name} called setState during rendering, which you should avoid.\\nSee https://elix.org/documentation/ReactiveMixin.`);\n      }\n\n      const firstSetState = this[stateKey] === undefined;\n      if (firstSetState) {\n        // Create temporary state as seed.\n        this[stateKey] = Object.freeze(new _State_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]());\n      }\n\n      const { state, changed } = this[stateKey].copyWithChanges(changes);\n\n      const renderWorthy = firstSetState || changed;\n      if (!renderWorthy) {\n        // No need to update state.\n        return;\n      }\n\n      // Freeze the new state so it's immutable. This prevents accidental\n      // attempts to set state without going through setState.\n      Object.freeze(state);\n\n      // Set the new state.\n      this[stateKey] = state;\n\n      // Log the changes.\n      const log = changedSinceLastRender.get(this) || {};\n      Object.assign(log, changed);\n      changedSinceLastRender.set(this, log);\n\n      if (!(this.isConnected && renderWorthy)) {\n        // Not in document or no worthwhile changes to render.\n        return;\n      }\n\n      // Remember whether we're supposed to raise property change events.\n      if (this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]]) {\n        this[raiseChangeEventsInNextRenderKey] = true;\n      }\n      \n      // Yield with promise timing. This lets any *synchronous* setState\n      // calls that happen after the current setState call complete first.\n      // Their effects on the state will be batched up before the render\n      // call below actually happens.\n      await Promise.resolve();\n      \n      // Render the component.\n      this.render();\n    }\n\n    /**\n     * The component's current state.\n     * The returned state object is immutable. To update it, invoke `setState`.\n     * \n     * @type {State}\n     */\n    get state() {\n      return this[stateKey];\n    }\n  }\n}\n\n\n//# sourceURL=webpack:///../elix/src/ReactiveMixin.js?");

/***/ }),

/***/ "../elix/src/SeamlessButton.js":
/*!*************************************!*\
  !*** ../elix/src/SeamlessButton.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _Button_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Button.js */ \"../elix/src/Button.js\");\n\n\n\n\n\n/**\n * A button with no border or background in its normal state.\n * \n * `SeamlessButton` is useful for clickable subelements inside a more complex\n * component.\n * \n * @inherits Button\n */\nclass SeamlessButton extends _Button_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]]() {\n    return _template_js__WEBPACK_IMPORTED_MODULE_1__[\"concat\"](super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]], _template_js__WEBPACK_IMPORTED_MODULE_1__[\"html\"]`\n      <style>\n        #inner {\n          background: none;\n          border: none;\n          padding: 0;\n        }\n      </style>\n    `);\n  }\n\n}\n\n\ncustomElements.define('elix-seamless-button', SeamlessButton);\n/* harmony default export */ __webpack_exports__[\"default\"] = (SeamlessButton);\n\n\n//# sourceURL=webpack:///../elix/src/SeamlessButton.js?");

/***/ }),

/***/ "../elix/src/ShadowTemplateMixin.js":
/*!******************************************!*\
  !*** ../elix/src/ShadowTemplateMixin.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ShadowTemplateMixin; });\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n// A cache of processed templates, indexed by element class.\nconst classTemplateMap = new Map();\n\n/** @type {any} */\nconst shadowReferencesKey = Symbol('shadowReferences');\n\n/**\n * Stamps a template into a component's Shadow DOM when instantiated\n *\n * To use this mixin, define a `template` method that returns a string or HTML\n * `<template>` element:\n *\n *     import * as template from 'elix/src/template.js';\n * \n *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n *       get [symbols.template]() {\n *         return template.html`Hello, <em>world</em>.`;\n *       }\n *     }\n *\n * When your component class is instantiated, a shadow root will be created on\n * the instance, and the contents of the template will be cloned into the\n * shadow root. If your component does not define a `template` method, this\n * mixin has no effect.\n * \n * This adds a member on the component called `this.$` that can be used to\n * reference shadow elements with IDs. E.g., if component's shadow contains an\n * element `<button id=\"foo\">`, then this mixin will create a member\n * `this.$.foo` that points to that button.\n *\n * @module ShadowTemplateMixin\n */\nfunction ShadowTemplateMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class ShadowTemplate extends Base {\n\n    /**\n     * A convenient shortcut for looking up an element by ID in the component's\n     * Shadow DOM subtree.\n     *\n     * Example: if component's template contains a shadow element\n     * `<button id=\"foo\">`, you can use the reference `this.$.foo` to obtain\n     * the corresponding button in the component instance's shadow tree.\n     * The `$` function is simply a shorthand for `getElementById`, so\n     * `this.$.foo` is the same as `this.shadowRoot.getElementById('foo')`.\n     *\n     * @type {object} - a dictionary mapping shadow element IDs to elements\n     */\n    get $() {\n      if (!this[shadowReferencesKey]) {\n        // Construct a proxy that maps $ -> getElementById.\n        const element = this;\n        this[shadowReferencesKey] = new Proxy({}, {\n          /* eslint-disable no-unused-vars */\n          get(target, property, receiver) {\n            return element.shadowRoot ?\n              element.shadowRoot.getElementById(property) :\n              null;\n          }\n        });\n      }\n      return this[shadowReferencesKey];\n    }\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed) {\n      if (super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]]) { super[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"render\"]](changed); }\n      if (this.shadowRoot) {\n        // Already rendered\n        return;\n      }\n      \n      // If this type of element defines a template, prepare it for use.\n      const template = getTemplate(this);\n      if (template) {\n        // Stamp the template into a new shadow root.\n        const delegatesFocus = this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"delegatesFocus\"]];\n        const root = this.attachShadow({\n          delegatesFocus,\n          mode: 'open'\n        });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n}\n\n\nfunction getTemplate(element) {\n  const hasDynamicTemplate = element[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"hasDynamicTemplate\"]];\n  let template = hasDynamicTemplate ?\n    undefined : // Always retrieve template\n    classTemplateMap.get(element.constructor); // See if we've cached it\n  if (template === undefined) {\n    // Ask the component for its template.\n    template = element[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"template\"]] || null;\n    if (template && !(template instanceof HTMLTemplateElement)) {\n      throw `Warning: the [symbols.template] property for ${element.constructor.name} must return an HTMLTemplateElement.`;\n    }\n    if (!hasDynamicTemplate) {\n      // Store prepared template for next creation of same type of element.\n      classTemplateMap.set(element.constructor, template);\n    }\n  }\n  return template;\n}\n\n\n//# sourceURL=webpack:///../elix/src/ShadowTemplateMixin.js?");

/***/ }),

/***/ "../elix/src/SlotContentMixin.js":
/*!***************************************!*\
  !*** ../elix/src/SlotContentMixin.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return SlotContentMixin; });\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n/**\n * Defines a component's content as the flattened set of nodes assigned to a\n * slot.\n * \n * This mixin defines a component's `content` state member as the flattened\n * set of nodes assigned to a slot, typically the default slot.\n *\n * If the set of assigned nodes changes, the `content` state will be updated.\n * This helps a component satisfy the Gold Standard checklist item for\n * monitoring\n * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n *\n * By default, the mixin looks in the component's shadow subtree for a default\n * (unnamed) `slot` element. You can specify that a different slot should be\n * used by overriding the `symbols.contentSlot` property.\n *\n * Most Elix [elements](elements) use `SlotContentMixin`, including\n * [ListBox](ListBox), [Modes](Modes), and [Tabs](Tabs).\n *\n * @module SlotContentMixin\n */\nfunction SlotContentMixin(Base) {\n\n  // The class prototype added by the mixin.\n  class SlotContent extends Base {\n\n    componentDidMount() {\n      if (super.componentDidMount) { super.componentDidMount(); }\n\n      // Listen to changes on the default slot.\n      const slot = this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"contentSlot\"]];\n      if (slot) {\n        slot.addEventListener('slotchange', async () => {\n\n          // Although slotchange isn't generally a user-driven event, it's\n          // impossible for us to know whether a change in slot content is going\n          // to result in effects that the host of this element can predict.\n          // To be on the safe side, we raise any change events that come up\n          // during the processing of this event.\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]] = true;\n          \n          // The nodes assigned to the given component have changed.\n          // Update the component's state to reflect the new content.\n          const content = slot.assignedNodes({ flatten: true });\n          Object.freeze(content);\n          this.setState({ content });\n\n          await Promise.resolve();\n          this[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"raiseChangeEvents\"]] = false;\n        });\n\n      }\n    }\n\n    /**\n     * See [symbols.contentSlot](symbols#contentSlot).\n     */\n    get [_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"contentSlot\"]]() {\n      const slot = this.shadowRoot && this.shadowRoot.querySelector('slot:not([name])');\n      if (!this.shadowRoot || !slot) {\n        /* eslint-disable no-console */\n        console.warn(`SlotContentMixin expects ${this.constructor.name} to define a shadow tree that includes a default (unnamed) slot.\\nSee https://elix.org/documentation/SlotContentMixin.`);\n      }\n      return slot;\n    }\n\n    get defaultState() {\n      return Object.assign(super.defaultState, {\n        content: null\n      });\n    }\n\n  }\n\n  return SlotContent;\n}\n\n\n//# sourceURL=webpack:///../elix/src/SlotContentMixin.js?");

/***/ }),

/***/ "../elix/src/State.js":
/*!****************************!*\
  !*** ../elix/src/State.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst changeCallbacksKey = Symbol('changeCallbacks');\n\n\n/**\n * A state object that can reconcile changes from multiple sources.\n */\nclass State {\n\n  constructor(defaults) {\n    if (defaults) {\n      applyStateChanges(this, defaults);\n    }\n  }\n\n  /**\n   * Return a new copy of this state that includes the indicated changes,\n   * invoking any registered `onChange` handlers that depend on the changed\n   * state members.\n   * \n   * There is no need to invoke this method yourself.\n   * [ReactiveMixin](ReactiveMixin) will take care of doing that when you invoke\n   * [setState](ReactiveMixin#setState).\n   * \n   * @param {object} changes - the changes to apply to the state\n   * @returns {object} - the new `state`, and a `changed` flag indicating\n   * whether there were any substantive changes\n   */\n  copyWithChanges(changes) {\n    // Create a new state object that holds a copy of the old state. If we pass\n    // the current state to the State constructor, we'll trigger the application\n    // of its change handlers, which will ultimately realize the state is\n    // already as refined as possible, and so do work for nothing. So we create\n    // a new empty State, merge in the old state, then run the change handlers\n    // with the requested changes.\n    const state = Object.assign(new State(), this);\n\n    // If the changes include new change callbacks, apply those too.\n    if (changes[changeCallbacksKey]) {\n      // Also copy over the set of change callbacks.\n      state[changeCallbacksKey] = changes[changeCallbacksKey];\n    }\n\n    const changed = applyStateChanges(state, changes);\n    return { state, changed };\n  }\n  \n  /**\n   * Ask the `State` object to invoke the specified `callback` when any of the\n   * state members listed in the `dependencies` array change.\n   * \n   * The `callback` should be a function that accepts:\n   * \n   * * A `state` parameter indicating the current state.\n   * * A `changed` parameter. This will be a set of flags that indicate which\n   *   specified state members have changed since the last time the callback was\n   *   run. If the handler doesn't care about which specific members have\n   *   changed, this parameter can be omitted.\n   * \n   * The callback should return `null` if it finds the current state acceptable.\n   * If the callback wants to make changes to the state, it returns an object\n   * representing the changes that should be applied to the state. The callback\n   * does *not* need to check to see whether the changes actually need to be\n   * applied to the state; the `State` object itself will avoid applying\n   * unnecessary changes.\n   * \n   * The common place to invoke `onChange` is when an element's `defaultState`\n   * is being constructed.\n\n   * @param {string[]|string} dependencies - the name(s) of the state fields\n   * that should trigger the callback if they are changed\n   * @param {function} callback - the function to run when any of the\n   * dependencies changes\n   */\n  onChange(dependencies, callback) {\n    if (!this[changeCallbacksKey]) {\n      this[changeCallbacksKey] = {};\n    }\n    const array = dependencies instanceof Array ?\n      dependencies :\n      [dependencies];\n    // Register the callback for each dependent state field.\n    array.forEach(dependency => {\n      if (!this[changeCallbacksKey][dependency]) {\n        this[changeCallbacksKey][dependency] = []\n      }\n      this[changeCallbacksKey][dependency].push(callback);\n    });\n  }\n\n}\n\n\nfunction equal(value1, value2) {\n  if (value1 instanceof Date && value2 instanceof Date) {\n    return value1.getTime() === value2.getTime();\n  }\n  return value1 === value2;\n}\n\n\n// Return a dictionary of flags indicating which of the indicated changes to the\n// state are actually changes. Return null if there were no changes.\nfunction fieldsChanged(state, changes) {\n  let changed = null;\n  for (const field in changes) {\n    if (!equal(changes[field], state[field])) {\n      if (!changed) {\n        changed = {};\n      }\n      changed[field] = true;\n    }\n  }\n  return changed;\n}\n\n\n// Destructively apply the indicated changes to the given state, running\n// any registered change handlers.\n// Return a dictionary of flags indicating which fields actually changed,\n// or null if there were no changes.\nfunction applyStateChanges(state, changes) {\n  let result = null;\n\n  // Applying the changes may produce a new round of changes, and that round\n  // might produce new changes, and so on. Loop until we complete a pass that\n  // produces no changes.\n  for (\n    let changed;\n    changed = fieldsChanged(state, changes), changed;\n  ) {\n\n    // Apply the changes to the state.\n    Object.assign(state, changes);\n\n    // Remember what actually changed.\n    if (!result) {\n      result = {};\n    }\n    Object.assign(result, changed);\n\n    // Run the change handlers, gathering up the changes those produce.\n    changes = {};\n    if (state[changeCallbacksKey]) {\n      // Get callbacks for fields that changed.\n      const callbacks = [];\n      for (const field in changed) {\n        const callbacksForField = state[changeCallbacksKey][field] || [];\n        callbacksForField.forEach(callback => {\n          // A single callback may be triggered by multiple fields; only add a\n          // callback to the list if it's not already there.\n          // @ts-ignore\n          if (!callbacks.includes(callback)) {\n            callbacks.push(callback);\n          }\n        });\n      }\n      // Run the callbacks and collect their changes.\n      const results = callbacks.map(callback => callback(state, changed));\n      // If the change handlers produced changes, we'll run the loop again.\n      Object.assign(changes, ...results);\n    }\n  }\n\n  return result;\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (State);\n\n\n//# sourceURL=webpack:///../elix/src/State.js?");

/***/ }),

/***/ "../elix/src/WrappedStandardElement.js":
/*!*********************************************!*\
  !*** ../elix/src/WrappedStandardElement.js ***!
  \*********************************************/
/*! exports provided: applyAttribute, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyAttribute\", function() { return applyAttribute; });\n/* harmony import */ var _AttributeMarshallingMixin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AttributeMarshallingMixin.js */ \"../elix/src/AttributeMarshallingMixin.js\");\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template.js */ \"../elix/src/template.js\");\n/* harmony import */ var _DelegateFocusMixin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DelegateFocusMixin.js */ \"../elix/src/DelegateFocusMixin.js\");\n/* harmony import */ var _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ReactiveElement.js */ \"../elix/src/ReactiveElement.js\");\n\n\n\n\n\n\n\nconst extendsKey = Symbol('extends');\n// const renderedKey = Symbol('rendered');\n\n\n/*\n * A set of events which, if fired by the inner standard element, should be\n * re-raised by the custom element.\n *\n * These are events which are spec'ed to NOT get retargetted across a Shadow DOM\n * boundary, organized by which element(s) raise the events. To properly\n * simulate these, we will need to listen for the real events, then re-raise a\n * simulation of the original event. For more information, see\n * https://www.w3.org/TR/shadow-dom/#h-events-that-are-not-leaked-into-ancestor-trees.\n *\n * It appears that we do *not* need to re-raise the non-bubbling \"focus\" and\n * \"blur\" events. These appear to be automatically re-raised as expected -- but\n * it's not clear why that happens.\n *\n * The list below is reasonably complete. It omits elements that cannot be\n * wrapped (see class notes above). Also, we haven't actually tried wrapping\n * every element in this list; some of the more obscure ones might not actually\n * work as expected, but it was easier to include them for completeness than\n * to actually verify whether or not the element can be wrapped.\n */\nconst reraiseEvents = {\n  address: ['scroll'],\n  blockquote: ['scroll'],\n  caption: ['scroll'],\n  center: ['scroll'],\n  dd: ['scroll'],\n  dir: ['scroll'],\n  div: ['scroll'],\n  dl: ['scroll'],\n  dt: ['scroll'],\n  fieldset: ['scroll'],\n  form: ['reset', 'scroll'],\n  frame: ['load'],\n  h1: ['scroll'],\n  h2: ['scroll'],\n  h3: ['scroll'],\n  h4: ['scroll'],\n  h5: ['scroll'],\n  h6: ['scroll'],\n  iframe: ['load'],\n  img: ['abort', 'error', 'load'],\n  input: ['abort', 'change', 'error', 'select', 'load'],\n  li: ['scroll'],\n  link: ['load'],\n  menu: ['scroll'],\n  object: ['error', 'scroll'],\n  ol: ['scroll'],\n  p: ['scroll'],\n  script: ['error', 'load'],\n  select: ['change', 'scroll'],\n  tbody: ['scroll'],\n  tfoot: ['scroll'],\n  thead: ['scroll'],\n  textarea: ['change', 'select', 'scroll']\n};\n\n\n/*\n * Mouse events that should be disabled if the inner component is disabled.\n */\nconst mouseEventNames = [\n  'click',\n  'dblclick',\n  'mousedown',\n  'mouseenter',\n  'mouseleave',\n  'mousemove',\n  'mouseout',\n  'mouseover',\n  'mouseup',\n  'wheel'\n];\n\n\n// Keep track of which re-raised events should bubble.\nconst eventBubbles = {\n  abort: true,\n  change: true,\n  reset: true\n};\n\n\n// Elements which are display: block by default.\n// Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\nconst blockElements = [\n  'address',\n  'article',\n  'aside',\n  'blockquote',\n  'canvas',\n  'dd',\n  'div',\n  'dl',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'main',\n  'nav',\n  'noscript',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'section',\n  'table',\n  'tfoot',\n  'ul',\n  'video'\n];\n\n\n// Standard attributes that don't have corresponding properties.\n// These need to be delegated from the wrapper to the inner element.\nconst attributesWithoutProperties = [\n  'accept-charset',\n  'autoplay',\n  'buffered',\n  'challenge',\n  'codebase',\n  'colspan',\n  'contenteditable',\n  'controls',\n  'crossorigin',\n  'datetime',\n  'dirname',\n  'for',\n  'formaction',\n  'http-equiv',\n  'icon',\n  'ismap',\n  'itemprop',\n  'keytype',\n  'language',\n  'loop',\n  'manifest',\n  'maxlength',\n  'minlength',\n  'muted',\n  'novalidate',\n  'preload',\n  'radiogroup',\n  'readonly',\n  'referrerpolicy',\n  'rowspan',\n  'scoped',\n  'usemap'\n];\n\n\nconst Base =\n  Object(_DelegateFocusMixin_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n    _ReactiveElement_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n  );\n\n\n/**\n * Wraps a standard HTML element so it can be extended\n * \n * The typical way to use this class is via its static `wrap` method.\n * \n * @inherits ReactiveElement\n * @mixes DelegateFocusMixin\n */\nclass WrappedStandardElement extends Base {\n\n  // Wrapped standard elements need to forward some attributes to the inner\n  // element in cases where the attribute does not have a corresponding\n  // property. These attributes include those prefixed with \"aria-\", and some\n  // unusual standard attributes like contenteditable. To handle those, this\n  // class defines its own attributeChangedCallback.\n  attributeChangedCallback(name, oldValue, newValue) {\n    const forwardAttribute = attributesWithoutProperties.indexOf(name) >= 0;\n    if (forwardAttribute) {\n      const innerAttributes = Object.assign({}, this.state.innerAttributes, {\n        [name]: newValue\n      });\n      this.setState({\n        innerAttributes\n      });\n    } else {\n      // Rely on the base attributeChangedCallback provided by\n      // AttributeMarshallingMixin.\n      super.attributeChangedCallback(name, oldValue, newValue);\n    }\n  }\n\n  // Delegate method defined by HTMLElement.\n  blur() {\n    this.inner.blur();\n  }\n\n  // One HTMLElement we *don't* delegate is `click`. Generally speaking, a click\n  // on the outer wrapper should behave the same as a click on the inner\n  // element. Also, we want to ensure outside event listeners get a click event\n  // when the click method is invoked. But a click on the inner element will\n  // raise a click event that won't be re-raised by default across the shadow\n  // boundary. The precise behavior seems to be slightly different in Safari\n  // than other browsers, but it seems safer to not delegate click.\n  //\n  // click() {}\n\n  componentDidMount() {\n    super.componentDidMount();\n\n    // Listen for any events raised by the inner element which will not\n    // automatically be retargetted across the Shadow DOM boundary, and re-raise\n    // those events when they happen.\n    const eventNames = reraiseEvents[this.extends] || [];\n    eventNames.forEach(eventName => {\n      this.inner.addEventListener(eventName, () => {\n        const event = new Event(eventName, {\n          bubbles: eventBubbles[eventName] || false\n        });\n        this.dispatchEvent(event);\n      });\n    });\n\n    // If inner element can be disabled, then listen to mouse events on the\n    // *outer* element and absorb them if the inner element is disabled.\n    // Without this, a mouse event like a click on the inner disabled element\n    // would be treated as a click on the outer element. Someone listening to\n    // clicks on the outer element would get a click event, even though the\n    // overall element is supposed to be disabled.\n    if ('disabled' in this.$.inner) {\n      mouseEventNames.forEach(eventName => {\n        this.addEventListener(eventName, event => {\n          /** @type {any} */\n          const element = this.$.inner;\n          if (element.disabled) {\n            event.stopImmediatePropagation();\n          }\n        });\n      });\n    }\n\n  }\n\n  get defaultState() {\n    return Object.assign(super.defaultState, {\n      innerAttributes: {},\n      innerProperties: {}\n    });\n  }\n\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"defaultTabIndex\"]]() {\n    const focusableByDefault = {\n      a: true,\n      area: true,\n      button: true,\n      details: true,\n      iframe: true,\n      input: true,\n      select: true,\n      textarea: true\n    };\n    return focusableByDefault[this.extends] ?\n      0 :\n      -1;\n  }\n\n  get extends() {\n    return this.constructor[extendsKey];\n  }\n  \n  /**\n   * Returns a reference to the inner standard HTML element!\n   *\n   * @type {HTMLElement}\n   */\n  get inner() {\n    /** @type {any} */\n    const result = this.$ && this.$.inner;\n    if (!result) {\n      /* eslint-disable no-console */\n      console.warn('Attempted to get an inner standard element before it was instantiated.');\n    }\n    return result;\n  }\n  \n  getInnerProperty(name) {\n    // If we haven't rendered yet, use internal state value. Once we've\n    // rendered, we get the value from the wrapped element itself. Return our\n    // concept of the current property value from state. If the property hasn't\n    // been defined, however, get the current value of the property from the\n    // inner element.\n    //\n    // This is intended to support cases like an anchor element. If someone sets\n    // `href` on a wrapped anchor, we'll know the value of `href` from state,\n    // but we won't know the value of href-dependent calculated properties like\n    // `protocol`. Using two sources of truth (state and the inner element)\n    // seems fragile, but it's unclear how else to handle this without\n    // reimplementing all HTML property interactions ourselves.\n    //\n    // This arrangement also means that, if an inner element property can change\n    // in response to user interaction (e.g., an input element's value changes\n    // as the user types), the component must listen to suitable events on the\n    // inner element and update its state accordingly.\n    const value = this.state.innerProperties[name];\n    return value || (this.shadowRoot && this.inner[name]);\n  }\n\n  static get observedAttributes() {\n    // For our custom attributeChangedCallback to work, we need to observe\n    // the attributes we want to forward.\n    // @ts-ignore\n    return [...super.observedAttributes, ...attributesWithoutProperties];\n  }\n\n  [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed) {\n    super[_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"render\"]](changed);\n    const inner = this.inner;\n    if (changed.tabIndex) {\n      inner.tabIndex = this.state.tabIndex;\n    }\n    if (changed.innerAttributes) {\n      // Forward attributes to the inner element.\n      // See notes at attributeChangedCallback.\n      const { innerAttributes } = this.state;\n      for (const name in innerAttributes) {\n        applyAttribute(inner, name, innerAttributes[name]);\n      }\n    }\n    if (changed.innerProperties) {\n      const { innerProperties } = this.state;\n      Object.assign(inner, innerProperties);\n      const { disabled } = innerProperties;\n      if (disabled !== undefined) {\n        this.toggleAttribute('disabled', disabled);\n      }\n    }\n  }\n\n  // Save property assignment in state.\n  setInnerProperty(name, value) {\n    // We normally don't check an existing state value before calling setState,\n    // relying instead on setState to do that check for us. However, we have\n    // dangers in this particular component of creating infinite loops.\n    //\n    // E.g., setting the tabindex attibute will call attributeChangedCallback,\n    // which will set the tabIndex property, which will want to set state, which\n    // will cause a render, which will try to reflect the current value of the\n    // tabIndex property to the tabindex attribute, causing a loop.\n    //\n    // To avoid this, we check the existing value before updating our state.\n    const current = this.state.innerProperties[name];\n    if (current !== value) {\n      const innerProperties = Object.assign({}, this.state.innerProperties, {\n        [name]: value\n      });\n      this.setState({ innerProperties });\n    }\n  }\n\n  /**\n   * The template copied into the shadow tree of new instances of this element.\n   *\n   * The default value of this property is a template that includes an instance\n   * the standard element being wrapped, with a `<slot>` element inside that\n   * to pick up the element's light DOM content. For example, if you wrap an\n   * `<a>` element, then the default template will look like:\n   *\n   *     <template>\n   *       <style>\n   *       :host {\n   *         display: inline-block;\n   *       }\n   *       </style>\n   *       <a id=\"inner\">\n   *         <slot></slot>\n   *       </a>\n   *     </template>\n   *\n   * The `display` styling applied to the host will be `block` for elements that\n   * are block elements by default, and `inline-block` (not `inline`) for other\n   * elements.\n   *\n   * If you'd like the template to include other elements, then override this\n   * property and return a template of your own. The template should include an\n   * instance of the standard HTML element you are wrapping, and the ID of that\n   * element should be \"inner\".\n   *\n   * @type {(string|HTMLTemplateElement)}\n   */\n  get [_symbols_js__WEBPACK_IMPORTED_MODULE_1__[\"template\"]]() {\n    const display = blockElements.indexOf(this.extends) >= 0 ?\n      'block' :\n      'inline-block';\n    return _template_js__WEBPACK_IMPORTED_MODULE_2__[\"html\"]`<style>:host { display: ${display}} #inner { box-sizing: border-box; height: 100%; width: 100%; }</style><${this.extends} id=\"inner\"><slot></slot></${this.extends}`;\n  }\n\n  /**\n   * Creates a class that wraps a standard HTML element.\n   *\n   * Note that the resulting class is a subclass of WrappedStandardElement, not\n   * the standard class being wrapped. E.g., if you call\n   * `WrappedStandardElement.wrap('a')`, you will get a class whose shadow tree\n   * will include an anchor element, but the class will *not* inherit from\n   * HTMLAnchorElement.\n   *\n   * @static\n   * @param {string} extendsTag - the standard HTML element tag to extend\n   */\n  static wrap(extendsTag) {\n\n    // Create the new class.\n    class Wrapped extends WrappedStandardElement {}\n    \n    // Indicate which tag it wraps.\n    Wrapped[extendsKey] = extendsTag;\n\n    // Create getter/setters that delegate to the wrapped element.\n    const element = document.createElement(extendsTag);\n    defineDelegates(Wrapped, Object.getPrototypeOf(element));\n\n    return Wrapped;\n  }\n\n}\n\n\n// Update the given attribute on an element.\n// \n// Passing a non-null `value` acts like a call to `setAttribute(name, value)`.\n// If the supplied `value` is nullish, this acts like a call to\n// `removeAttribute(name)`.\n//\nfunction applyAttribute(element, name, value) {\n  if (_AttributeMarshallingMixin_js__WEBPACK_IMPORTED_MODULE_0__[\"booleanAttributes\"][name]) {\n    // Boolean attribute\n    if (typeof value === 'string') {\n      element.setAttribute(name, '');\n    } else if (value === null) {\n      element.removeAttribute(name);\n    }\n  } else {\n    // Regular string-valued attribute\n    if (value != null) {\n      element.setAttribute(name, value.toString());\n    } else {\n      element.removeAttribute(name);\n    }\n  }\n}\n\n\nfunction createDelegate(name, descriptor) {\n  if (typeof descriptor.value === 'function') {\n    if (name !== 'constructor') {\n      return createMethodDelegate(name, descriptor);\n    }\n  } else if (typeof descriptor.get === 'function' ||\n    typeof descriptor.set === 'function') {\n    return createPropertyDelegate(name, descriptor);\n  }\n  return null;\n}\n\n\nfunction createMethodDelegate(name, descriptor) {\n  const value = function(...args) {\n    // @ts-ignore\n    this.inner[name](...args);\n  };\n  const delegate = {\n    configurable: descriptor.configurable,\n    enumerable: descriptor.enumerable,\n    value,\n    writable: descriptor.writable\n  };\n  return delegate;\n}\n\n\nfunction createPropertyDelegate(name, descriptor) {\n  const delegate = {\n    configurable: descriptor.configurable,\n    enumerable: descriptor.enumerable\n  };\n  if (descriptor.get) {\n    delegate.get = function() {\n      return this.getInnerProperty(name);\n    };\n  }\n  if (descriptor.set) {\n    delegate.set = function(value) {\n      this.setInnerProperty(name, value);\n    };\n  }\n  if (descriptor.writable) {\n    delegate.writable = descriptor.writable;\n  }\n  return delegate;\n}\n\n\n// Define delegates for the given class for each property/method on the\n// indicated prototype.\nfunction defineDelegates(cls, prototype) {\n  const names = Object.getOwnPropertyNames(prototype);\n  names.forEach(name => {\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, name);\n    if (!descriptor) {\n      return;\n    }\n    const delegate = createDelegate(name, descriptor);\n    if (delegate) {\n      Object.defineProperty(cls.prototype, name, delegate);\n    }\n  });\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (WrappedStandardElement);\n\n\n//# sourceURL=webpack:///../elix/src/WrappedStandardElement.js?");

/***/ }),

/***/ "../elix/src/calendar.js":
/*!*******************************!*\
  !*** ../elix/src/calendar.js ***!
  \*******************************/
/*! exports provided: millisecondsPerDay, dateTimeFormat, datesEqual, daysBetweenDates, daysSinceFirstDayOfWeek, firstDayOfWeek, firstDateOfWeek, firstDateOfMonth, formatDate, lastDateOfMonth, lastDateOfWeek, midnightOnDate, noonOnDate, parse, parseWithOptionalYear, sameMonthAndYear, offsetDateByDays, offsetDateByMonths, today, weekendEnd, weekendStart */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"millisecondsPerDay\", function() { return millisecondsPerDay; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dateTimeFormat\", function() { return dateTimeFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"datesEqual\", function() { return datesEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"daysBetweenDates\", function() { return daysBetweenDates; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"daysSinceFirstDayOfWeek\", function() { return daysSinceFirstDayOfWeek; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"firstDayOfWeek\", function() { return firstDayOfWeek; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"firstDateOfWeek\", function() { return firstDateOfWeek; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"firstDateOfMonth\", function() { return firstDateOfMonth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatDate\", function() { return formatDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lastDateOfMonth\", function() { return lastDateOfMonth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lastDateOfWeek\", function() { return lastDateOfWeek; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"midnightOnDate\", function() { return midnightOnDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"noonOnDate\", function() { return noonOnDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return parse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseWithOptionalYear\", function() { return parseWithOptionalYear; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sameMonthAndYear\", function() { return sameMonthAndYear; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"offsetDateByDays\", function() { return offsetDateByDays; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"offsetDateByMonths\", function() { return offsetDateByMonths; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"today\", function() { return today; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"weekendEnd\", function() { return weekendEnd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"weekendStart\", function() { return weekendStart; });\n/* harmony import */ var _weekData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./weekData.js */ \"../elix/src/weekData.js\");\n/**\n * Helpers for date math and locale-sensitive calendar preferences.\n * \n * The visual representation of calendars varies quite a bit from place to\n * place; see the discussion at\n * [CalendarMonth](CalendarMonth#international-support). The `calendar` helpers\n * provide some assistance in determining a locale's calendar presentation\n * preferences, and working with date math in general.\n * \n * \n * Where these functions take a `locale` string parameter, that should follow\n * the same format as the [locales\n * argument](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument)\n * of the `Intl` internationalization API. Moreover, the locale should identify\n * at least a language and a region. Examples: \"en-US\" identifies US English,\n * while \"en-GB\" identifies English in Great Britain. The use of \"en\" on its own\n * would be insufficient.\n * \n * @module calendar\n */\n\n\n\n\n\n// Default region is \"World\", see https://www.ctrl.blog/entry/en-001\nconst defaultRegion = '001';\n\n\nconst millisecondsPerDay = 24 * 60 * 60 * 1000;\n\n\nfunction dateTimeFormat(locale, options) {\n  const caExtension = locale.includes('-ca-') ? '' : '-ca-gregory';\n  const nuExtension = locale.includes('-nu-') ? '' : '-nu-latn';\n  const extension = caExtension || nuExtension ? '-u' : '';\n  const extendedLocale = `${locale}${extension}${caExtension}${nuExtension}`;\n  return new Intl.DateTimeFormat(extendedLocale, options);\n}\n\n\n/**\n * Return true if both date object represent the same point in time or are both\n * null.\n * \n * @param {Date|null} date1 \n * @param {Date|null} date2 \n * @returns {boolean}\n */\nfunction datesEqual(date1, date2) {\n  if (date1 === null && date2 === null) {\n    return true;\n  } else if (date1 !== null && date2 !== null) {\n    return date1.getTime() === date2.getTime();\n  } else {\n    return false;\n  }\n}\n\n\nfunction daysBetweenDates(date1, date2) {\n  const days = Math.round((date2.getTime() - date1.getTime()) / millisecondsPerDay);\n  return days;\n}\n\n\n/**\n * Returns the number of days between the first day of the calendar week in the\n * indicated locale and the given date. In other words, the result indicates\n * which column of a typical calendar the date would appear in.\n * \n * Example: Suppose the given date is a Monday. In the locale 'en-US', the first\n * day of the calendar week is a Sunday, so this function would return 1. In the\n * locale 'en-GB', the first day of the calendar week is a Monday, in which case\n * this function would return 0.\n * \n * @param {Date} date - the target date\n * @param {string} locale - the calendar locale\n * @returns {number} the number of days between the first day of the week in\n * the locale's calendar and the target date\n */\nfunction daysSinceFirstDayOfWeek (date, locale) {\n  const firstDay = firstDayOfWeek(locale);\n  return (date.getDay() - firstDay + 7) % 7;\n}\n\n\n/**\n * Returns the first day of the week in a typical calendar in the indicated\n * locale, where 0 is Sunday, 1 is Monday, ..., and 6 = Saturday.\n * \n * @param {string} locale - the calendar locale\n * @returns {number} the number of the first day of the week in the locale\n */\nfunction firstDayOfWeek(locale) {\n  const region = getLocaleRegion(locale);\n  const firstDay = _weekData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].firstDay[region];\n  return firstDay !== undefined ?\n    firstDay :\n    _weekData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].firstDay[defaultRegion];\n}\n\n\n/**\n * Return the date of the first day of the week in the locale's calendar that\n * contains the given date.\n * \n * @param {Date} date - the target date\n * @param {string} locale - the calendar locale\n * @returns {Date}\n */\nfunction firstDateOfWeek(date, locale) {\n  const days = daysSinceFirstDayOfWeek(date, locale);\n  const firstDate = offsetDateByDays(date, -days);\n  return midnightOnDate(firstDate);\n}\n\n\n/**\n * Returns the first date of the month that contains the indicated target date.\n * \n * @param {Date} date - the target date\n * @returns {Date}\n */\nfunction firstDateOfMonth(date) {\n  const result = midnightOnDate(date);\n  result.setDate(1);\n  return result;\n}\n\n\nfunction formatDate(date, options) {\n  const { locale, dateTimeFormatOptions } = options;\n  const format = dateTimeFormat(locale, dateTimeFormatOptions);\n  return format.format(date);\n}\n\n\n/**\n * Returns the last date of the month that contains the indicated target date.\n * \n * @param {Date} date - the target date\n * @returns {Date}\n */\nfunction lastDateOfMonth(date) {\n  // Get last day of month by going to first day of next month and backing up a day.\n  const result = firstDateOfMonth(date);\n  result.setMonth(result.getMonth() + 1);\n  result.setDate(result.getDate() - 1);\n  return result;\n}\n\n\n/**\n * Return the date of the last day of the week in the locale's calendar that\n * contains the given date.\n * \n * @param {Date} date - the target date\n * @param {string} locale - the calendar locale\n * @returns {Date}\n */\nfunction lastDateOfWeek(date, locale) {\n  const days = daysSinceFirstDayOfWeek(date, locale);\n  const firstDate = offsetDateByDays(date, 6-days);\n  return midnightOnDate(firstDate);\n}\n\n\n/**\n * Returns midnight on the indicated target date.\n * \n * @param {Date} date - the target date\n * @returns {Date}\n */\nfunction midnightOnDate(date) {\n  const midnight = new Date(date.getTime());\n  midnight.setHours(0);\n  midnight.setMinutes(0);\n  midnight.setSeconds(0);\n  midnight.setMilliseconds(0);\n  return midnight;\n}\n\n\n/**\n * Returns noon on the indicated target date.\n * \n * @param {Date} date - the target date\n * @returns {Date}\n */\nfunction noonOnDate(date) {\n  const midnight = new Date(date.getTime());\n  midnight.setHours(12);\n  midnight.setMinutes(0);\n  midnight.setSeconds(0);\n  midnight.setMilliseconds(0);\n  return midnight;\n}\n\n\n/**\n * Parse a text string as a date using the formatting preferences of the\n * indicated locale and the `Intl.DateTimeFormat` formatting options.\n * \n * The `Intl.DateTimeFormat` facility can format dates as text; this `parse`\n * function performs the reverse operation.\n * \n * Parsing is limited to supporting numeric day/month/year formats. The locale\n * and options only dictate the presence of the day, month, and year, and the\n * order in which they will be expected. Missing day/month/year values will\n * be inferred from the current date.\n * \n * @param {string} text - the text to parse as a date\n * @param {Intl.DateTimeFormat} dateTimeFormat - the format to parse\n * @returns {Date|null} - the parsed date\n */\nfunction parse(text, dateTimeFormat) {\n  const today = new Date();\n  // @ts-ignore\n  const parts = dateTimeFormat.formatToParts(today);\n  // Convert parts to a regex.\n  // For reference, literals/separators we need to support are: `/‏/.年月. -:`\n  // (Those two slashes are different Unicode characters.) That said, since\n  // we're only supporting numeric day/month/year, we just take anything\n  // that's not a digit as a separator.\n  const regExText = parts.map(part =>\n    part.type === 'literal' ?\n      '(\\\\D+)' :\n      // TODO: use named capture group `(<${part.type}>\\\\d+)`\n      // when that's widely supported.\n      `(\\\\d+)`\n  ).join('');\n  const regEx = new RegExp(regExText);\n  // Match against the text.\n  const match = regEx.exec(text);\n  if (!match) {\n    return null;\n  }\n  // Convert match values to (effectively) named capture groups.\n  const groups = {};\n  parts.forEach((part, index) => {\n    groups[part.type] = match[index + 1];\n  });\n  // @ts-ignore\n  const { day, hour, minute, month, second, year } = groups;\n  // Adjust short year to current century.\n  const yearValue = year && parseInt(year);\n  const adjustedYear = yearValue < 100 ?\n    2000 + yearValue :\n    year;\n  return new Date(\n    adjustedYear || today.getFullYear(),\n    month !== undefined ? month - 1 : today.getMonth(),\n    day || today.getDate(),\n    hour || 0,\n    minute || 0,\n    second || 0\n  );\n}\n\n\n/**\n * Parse the indicated text as a date, first as a full date that includes the\n * year or, if that fails to parse, as an abbreviated date that omits the year.\n * \n * @param {string} text - the text to parse as a date\n * @param {Intl.DateTimeFormat} dateTimeFormat - the format to parse\n * @param {'future'|'past'} [timeBias] - bias towards future if true, past if false\n * @returns {Date|null} - the parsed date\n */\nfunction parseWithOptionalYear(text, dateTimeFormat, timeBias) {\n  // Try parsing using requested DateTimeFormat.\n  const fullDate = parse(text, dateTimeFormat);\n  if (fullDate) {\n    return fullDate;\n  }\n  // Try parsing without year. Create an identical DateTimeFormat options, but\n  // mark `year` as undefined so it won't be used.\n  const {\n    day,\n    locale,\n    month\n  } = dateTimeFormat.resolvedOptions();\n  const abbreviatedFormat = new Intl.DateTimeFormat(locale, {\n    day,\n    month\n  });\n  const abbreviatedDate = parse(text, abbreviatedFormat);\n  if (abbreviatedDate && timeBias) {\n    const today = new Date();\n    const todayDay = today.getDate();\n    const todayMonth = today.getMonth();\n    const abbreviatedDay = abbreviatedDate.getDate();\n    const abbreviatedMonth = abbreviatedDate.getMonth();\n    const abbreviatedYear = abbreviatedDate.getFullYear();\n    if (timeBias === 'future') {\n      if (abbreviatedMonth < todayMonth ||\n        (abbreviatedMonth === todayMonth && abbreviatedDay < todayDay)) {\n        abbreviatedDate.setFullYear(abbreviatedYear + 1);\n      }\n    } else if (timeBias === 'past') {\n      if (abbreviatedMonth > todayMonth ||\n        (abbreviatedMonth === todayMonth && abbreviatedDay > todayDay)) {\n        abbreviatedDate.setFullYear(abbreviatedYear - 1);\n      }\n    }\n  }\n  return abbreviatedDate;\n}\n\n\n/**\n * Return true if the two dates fall in the same month and year.\n * \n * @param {Date} date1 - the first date to compare\n * @param {Date} date2 - the second date to compare\n * @returns {boolean}\n */\nfunction sameMonthAndYear(date1, date2) {\n  return date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth();\n}\n\n\n/**\n * Return the result of adding/subtracting a number of days to a date.\n * \n * @param {Date} date - the target date\n * @param {number} days - the number of days to add/subtract\n * @returns {Date}\n */\nfunction offsetDateByDays(date, days) {\n  // Use noon hour for date math, since adding/subtracting multiples of 24 hours\n  // starting from noon is guaranteed to end up on the correct date (although\n  // the hours might have changed).\n  // TODO: Given the nature of date, there could easily be gnarly date math bugs\n  // here. Ideally some time-geek library should be used for this calculation.\n  const result = noonOnDate(date);\n  result.setDate(result.getDate() + days);\n  copyTimeFromDateToDate(date, result); // Restore original hours\n  return result;\n}\n\n\n/**\n * TODO: Docs\n * \n * @param {Date} date \n * @param {number} months \n * @returns {Date}\n */\nfunction offsetDateByMonths(date, months) {\n  const result = noonOnDate(date);\n  result.setMonth(date.getMonth() + months);\n  copyTimeFromDateToDate(date, result); // Restore original hours\n  return result;\n}\n\n\n/**\n * Returns midnight today.\n * \n * @returns {Date}\n */\nfunction today() {\n  return midnightOnDate(new Date());\n}\n\n\n/**\n * Returns the day of week (0 = Sunday, 1 = Monday, etc.) for the last day of\n * the weekend in the indicated locale.\n * \n * @param {string} locale - the calendar locale\n * @returns {number}\n */\nfunction weekendEnd(locale) {\n  const region = getLocaleRegion(locale);\n  const day = _weekData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].weekendEnd[region];\n  return day !== undefined ?\n    day :\n    _weekData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].weekendEnd[defaultRegion];\n}\n\n\n/**\n * Returns the day of week (0 = Sunday, 1 = Monday, etc.) for the first day of\n * the weekend in the indicated locale.\n * \n * @param {string} locale - the calendar locale\n * @returns {number}\n */\nfunction weekendStart(locale) {\n  const region = getLocaleRegion(locale);\n  const day = _weekData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].weekendStart[region];\n  return day !== undefined ?\n    day :\n    _weekData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].weekendStart[defaultRegion];\n}\n\n\n// Update the time on date2 to match date1.\nfunction copyTimeFromDateToDate(date1, date2) {\n  date2.setHours(date1.getHours());\n  date2.setMinutes(date1.getMinutes());\n  date2.setSeconds(date1.getSeconds());\n  date2.setMilliseconds(date1.getMilliseconds());\n}\n\nfunction getLocaleRegion(locale) {\n  const localeParts = locale ? locale.split('-') : null;\n  return localeParts ? localeParts[1] : defaultRegion;\n}\n\n\n//# sourceURL=webpack:///../elix/src/calendar.js?");

/***/ }),

/***/ "../elix/src/symbols.js":
/*!******************************!*\
  !*** ../elix/src/symbols.js ***!
  \******************************/
/*! exports provided: checkSize, contentSlot, defaultTabIndex, delegatesFocus, elementsWithTransitions, focusTarget, getItemText, goDown, goEnd, goLeft, goRight, goStart, goUp, hasDynamicTemplate, itemMatchesState, itemsDelegate, keydown, mouseenter, mouseleave, populate, raiseChangeEvents, render, rendering, scrollTarget, startEffect, swipeDown, swipeLeft, swipeRight, swipeUp, swipeTarget, tap, template, update */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkSize\", function() { return checkSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contentSlot\", function() { return contentSlot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultTabIndex\", function() { return defaultTabIndex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"delegatesFocus\", function() { return delegatesFocus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"elementsWithTransitions\", function() { return elementsWithTransitions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"focusTarget\", function() { return focusTarget; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getItemText\", function() { return getItemText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"goDown\", function() { return goDown; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"goEnd\", function() { return goEnd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"goLeft\", function() { return goLeft; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"goRight\", function() { return goRight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"goStart\", function() { return goStart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"goUp\", function() { return goUp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasDynamicTemplate\", function() { return hasDynamicTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itemMatchesState\", function() { return itemMatchesState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itemsDelegate\", function() { return itemsDelegate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keydown\", function() { return keydown; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mouseenter\", function() { return mouseenter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mouseleave\", function() { return mouseleave; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"populate\", function() { return populate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"raiseChangeEvents\", function() { return raiseChangeEvents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rendering\", function() { return rendering; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scrollTarget\", function() { return scrollTarget; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startEffect\", function() { return startEffect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"swipeDown\", function() { return swipeDown; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"swipeLeft\", function() { return swipeLeft; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"swipeRight\", function() { return swipeRight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"swipeUp\", function() { return swipeUp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"swipeTarget\", function() { return swipeTarget; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tap\", function() { return tap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"template\", function() { return template; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"update\", function() { return update; });\n/**\n * Collection of shared Symbol objects for internal component communication.\n * \n * The shared `Symbol` objects in this module let mixins and a component\n * internally communicate without exposing these properties and methods in the\n * component's public API. They also help avoid unintentional name collisions,\n * as a component developer must specifically import the `symbols` module and\n * reference one of its symbols.\n *\n * To use these `Symbol` objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol. E.g.,\n * [ShadowTemplateMixin](ShadowTemplateMixin) expects a component to define\n * a property called [symbols.template](#template):\n *\n *     import * as template from 'elix/src/template.js'\n *     import * as symbols from 'elix/src/symbols.js';\n *     import ShadowTemplateMixin from 'elix/src/ShadowTemplateMixin.js';\n * \n *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n *       [symbols.template]() {\n *         return template.html`Hello, <em>world</em>.`;\n *       }\n *     }\n * \n * The above use of `symbols.template` lets the mixin find the component's\n * template in a way that will not pollute the component's public API or\n * interfere with other component logic. For example, if for some reason the\n * component wants to define a separate property with the plain string name,\n * \"template\", it can do so without affecting the above property setter.\n * \n * While this project generally uses `Symbol` objects to hide component\n * internals, Elix does make some exceptions for methods or properties that are\n * very helpful to have handy during debugging. E.g.,\n * [ReactiveMixin](ReactiveMixin) exposes its [setState](ReactiveMixin#setState)\n * method publicly, even though invoking that method from outside a component is\n * generally bad practice. The mixin exposes `setState` because it's very useful\n * to have access to that in a debug console.\n *\n * @module symbols\n */\n\n/**\n * Symbol for the `checkSize` method.\n * \n * If defined, this method will be invoked by [ResizeMixin](ResizeMixin)\n * when an element's size may have changed. The default implementation of\n * this method compares the element's current `clientHeight` and `clientWidth`\n * properties against the last known values of those properties (saved in\n * `state.clienHeight` and `state.clientWidth`).\n * \n * Components should override this method if they contain elements that may need\n * to know about size changes as well. For example, when an [Overlay](Overlay)\n * mixin opens, it invokes this method on any content elements that define it.\n * This gives the contents a chance to resize in response to being displayed.\n */\nconst checkSize = Symbol('checkSize');\n\n/**\n * Symbol for the `contentSlot` property.\n * \n * [SlotContentMixin](SlotContentMixin) uses this to identify which slot\n * element in the component's shadow tree that holds the component's content.\n * By default, this is the first slot element with no \"name\" attribute. You\n * can override this to return a different slot.\n * \n * @var {HTMLSlotElement} contentSlot\n */\nconst contentSlot = Symbol('contentSlot');\n\n/**\n * Symbol for the `defaultTabIndex` property.\n * \n * [KeyboardMixin](KeyboardMixin) uses this if it is unable to successfully\n * parse a string tabindex attribute.\n */\nconst defaultTabIndex = Symbol('defaultTabIndex');\n\n/**\n * Symbol for the `delegatesFocus` property.\n * \n * [DelegatesFocusMixin](DelegatesFocusMixin) defines this property, returning\n * true to indicate that the focus is being delegated, even in browsers that\n * don't support that natively. Mixins like [KeyboardMixin](KeyboardMixin) use\n * this to accommodate focus delegation.\n */\nconst delegatesFocus = Symbol('delegatesFocus');\n\n/**\n * Symbol for the `elementsWithTransitions` property.\n * \n * [TransitionEffectMixin](TransitionEffectMixin) inspects this property\n * to determine which element(s) have CSS\n * transitions applied to them for visual effects.\n * \n * @returns {Element[]} The elements with CSS transitions\n */\nconst elementsWithTransitions = Symbol('elementsWithTransitions');\n\n/**\n * Symbol for the `focusTarget` property.\n * \n * [DelegatesFocusMixin](DelegatesFocusMixin) defines this property as either:\n * 1) the element itself, in browsers that support native focus delegation or,\n * 2) the shadow root's first focusable element.\n */\nconst focusTarget = Symbol('focusTarget');\n\n/**\n * Symbol for the `getItemText` method.\n *\n * This method can be applied to an item to return its text.\n * [KeyboardPrefixSelectionMixin](KeyboardPrefixSelectionMixin) uses this to\n * obtain the text for each item in a list, then matches keypresses again that\n * text.\n * \n * This method takes a single parameter: the `HTMLElement` of the item from\n * which text should be extracted.\n *\n * @function getItemText\n * @returns {string} the text of the item\n */\nconst getItemText = Symbol('getItemText');\n\n/**\n * Symbol for the `goDown` method.\n *\n * This method is invoked when the user wants to go/navigate down.\n *\n * @function goDown\n */\nconst goDown = Symbol('goDown');\n\n/**\n * Symbol for the `goEnd` method.\n *\n * This method is invoked when the user wants to go/navigate to the end (e.g.,\n * of a list).\n *\n * @function goEnd\n */\nconst goEnd = Symbol('goEnd');\n\n/**\n * Symbol for the `goLeft` method.\n *\n * This method is invoked when the user wants to go/navigate left. Mixins that\n * make use of this method include\n * [KeyboardDirectionMixin](KeyboardDirectionMixin) and\n * [SwipeDirectionMixin](SwipeDirectionMixin).\n *\n * @function goLeft\n */\nconst goLeft = Symbol('goLeft');\n\n/**\n * Symbol for the `goRight` method.\n *\n * This method is invoked when the user wants to go/navigate right. Mixins\n * that make use of this method include\n * [KeyboardDirectionMixin](KeyboardDirectionMixin) and\n * [SwipeDirectionMixin](SwipeDirectionMixin).\n *\n * @function goRight\n */\nconst goRight = Symbol('goRight');\n\n/**\n * Symbol for the `goStart` method.\n *\n * This method is invoked when the user wants to go/navigate to the start\n * (e.g., of a list).\n *\n * @function goStart\n */\nconst goStart = Symbol('goStart');\n\n/**\n * Symbol for the `goUp` method.\n *\n * This method is invoked when the user wants to go/navigate up.\n *\n * @function goUp\n */\nconst goUp = Symbol('goUp');\n\n/**\n * Symbol for the `hasDynamicTemplate` property.\n * \n * If your component class does not always use the same template, define a\n * static class property getter with this symbol and have it return `true`.\n * This will disable template caching for your component.\n */\nconst hasDynamicTemplate = Symbol('hasDynamicTemplate');\n\n/**\n * Symbol for the `itemMatchesState` method.\n * \n * `ContentItemsMixin` uses this callback to determine whether a content node\n * should be included in the `items` collection in the given state. By default,\n * substantive, visible elements are considered items; other nodes (including\n * text nodes, comment nodes, processing instructions) and invisible elements\n * (including `script` and `style` tags) are not considered to be items.\n * \n * Various mixins and components override this to refine the idea of what\n * counts as an item. E.g., [Menu](Menu) overrides this to exclude disabled\n * menu items, using code similar to this:\n * \n *     // Filter the set of items to ignore disabled items.\n *     [symbols.itemMatchesState](item, state) {\n *       const base = super[symbols.itemMatchesState] ?\n *         super[symbols.itemMatchesState](item, state) :\n *         true;\n *       return base && !item.disabled;\n *     }\n *\n * @function itemMatchesState\n * @param {Node} item - the node that may or may not belong in the given state\n * @param {object} state - the state in question\n * @returns {boolean}\n */\nconst itemMatchesState = Symbol('itemMatchesState');\n\n/**\n * Symbol for the `itemsDelegate` property.\n * \n * A component using [DelegateItemsMixin](DelegateItemsMixin) uses this property\n * to indicate which one of its shadow elements is the one whose `items`\n * property will be treated as the component's own `items`.\n * \n * @var {Element} itemsDelegate\n */\nconst itemsDelegate = Symbol('itemsDelegate');\n\n/**\n * Symbol for the `keydown` method.\n *\n * This method is invoked when an element receives a `keydown` event.\n *\n * An implementation of `symbols.keydown` should return `true` if it handled\n * the event, and `false` otherwise. If `true` is returned (the event was\n * handled), `KeyboardMixin` invokes the event's `preventDefault` and\n * `stopPropagation` methods to let the browser know the event was handled.\n * \n * The convention for handling `symbols.keydown` is that the last mixin\n * applied wins. That is, if an implementation of `symbols.keydown` *did*\n * handle the event, it can return immediately. If it did not, it should\n * invoke `super` to let implementations further up the prototype chain have\n * their chance.\n * \n * This method takes a `KeyboardEvent` parameter that contains the event being\n * processed.\n *\n * @function keydown\n */\nconst keydown = Symbol('keydown');\n\n/**\n * Symbol for the `mouseenter` method.\n * \n * [HoverMixin](HoverMixin) invokes this method when the user moves the\n * mouse over a component. That mixin provides a base implementation of this\n * method, but you can extend it to do additional work on `mouseenter`.\n * \n * This method takes a `MouseEvent` parameter that contains the event being\n * processed.\n *\n * @function mouseenter\n */\nconst mouseenter = Symbol('mouseenter');\n\n/**\n * Symbol for the `mouseleave` method.\n * \n * [HoverMixin](HoverMixin) invokes this method when the user moves off a\n * component. That mixin provides a base implementation of this method, but\n * you can extend it to do additional work on `mouseleave`.\n * \n * This method takes a `MouseEvent` parameter that contains the event being\n * processed.\n *\n * @function mouseleave\n */\nconst mouseleave = Symbol('mouseleave');\n\n/**\n * Symbol for the `populate` method.\n * \n * [PopulateUpdateMixin](PopulateUpdateMixin) invokes this method as the first\n * of two rendering phases. In this phase, the component can manipulate the\n * Shadow DOM tree to ensure the correct elements are present.\n * \n * @function populate\n */\nconst populate = Symbol('populate');\n\n/**\n * Symbol for the `raiseChangeEvents` property.\n *\n * This property is used by mixins to determine whether they should raise\n * property change events. The standard HTML pattern is to only raise such\n * events in response to direct user interactions. For a detailed discussion\n * of this point, see the Gold Standard checklist item for\n * [Propery Change Events](https://github.com/webcomponents/gold-standard/wiki/Property%20Change%20Events).\n *\n * The above article describes a pattern for using a flag to track whether\n * work is being performed in response to internal component activity, and\n * whether the component should therefore raise property change events.\n * This `raiseChangeEvents` symbol is a shared flag used for that purpose by\n * all Elix mixins and components. Sharing this flag ensures that internal\n * activity (e.g., a UI event listener) in one mixin can signal other mixins\n * handling affected properties to raise change events.\n *\n * All UI event listeners (and other forms of internal handlers, such as\n * timeouts and async network handlers) should set `raiseChangeEvents` to\n * `true` at the start of the event handler, then `false` at the end:\n *\n *     this.addEventListener('click', event => {\n *       this[symbols.raiseChangeEvents] = true;\n *       // Do work here, possibly setting properties, like:\n *       this.foo = 'Hello';\n *       this[symbols.raiseChangeEvents] = false;\n *     });\n *\n * Elsewhere, property setters that raise change events should only do so it\n * this property is `true`:\n *\n *     set foo(value) {\n *       // Save foo value here, do any other work.\n *       if (this[symbols.raiseChangeEvents]) {\n *         export const event = new CustomEvent('foo-changed');\n *         this.dispatchEvent(event);\n *       }\n *     }\n *\n * In this way, programmatic attempts to set the `foo` property will not\n * trigger the `foo-changed` event, but UI interactions that update that\n * property will cause those events to be raised.\n *\n * @var {boolean} raiseChangeEvents\n */\nconst raiseChangeEvents = Symbol('raiseChangeEvents');\n\n/**\n * Symbol for an internal `render` method.\n * \n * [ReactiveMixin](ReactiveMixin) has a public [render](ReactiveMixin#render)\n * method that can be invoked to force the component to render. That public\n * method internally invokes an `symbols.render` method, which a component can\n * implement to actually render itself.\n * \n * @function render\n */\nconst render = Symbol('render');\n\n/**\n * Symbol for the `rendering` property.\n * \n * [ReactiveMixin](ReactiveMixin) sets this property to true during rendering,\n * at other times it will be false.\n * \n * @var {boolean} rendering\n */\nconst rendering = Symbol('rendering');\n\n/**\n * Symbol for the `scrollTarget` property.\n *\n * This property indicates which element in a component's shadow subtree\n * should be scrolled. [SelectionInViewMixin](SelectionInViewMixin) can use\n * this property to determine which element should be scrolled to keep the\n * selected item in view.\n * \n * @var {Element} scrollTarget\n */\nconst scrollTarget = Symbol('scrollTarget');\n\n/**\n * Symbol for the `startEffect` method.\n * \n * A component using [TransitionEffectMixin](TransitionEffectMixin) can invoke\n * this method to trigger the application of a named, asynchronous CSS\n * transition effect.\n * \n * This method takes a single `string` parameter giving the name of the effect\n * to start.\n * \n * @function startEffect\n */\nconst startEffect = Symbol('startEffect');\n\n/**\n * Symbol for the `swipeDown` method.\n * \n * The swipe mixin [TouchSwipeMixin](TouchSwipeMixin) invokes this method when\n * the user finishes a gesture to swipe down.\n * \n * @function swipeDown\n */\nconst swipeDown = Symbol('swipeDown');\n\n/**\n * Symbol for the `swipeLeft` method.\n * \n * The swipe mixins [TouchSwipeMixin](TouchSwipeMixin) and\n * [TrackpadSwipeMixin](TrackpadSwipeMixin) invoke this method when the user\n * finishes a gesture to swipe left.\n * \n * @function swipeLeft\n */\nconst swipeLeft = Symbol('swipeLeft');\n\n/**\n * Symbol for the `swipeLeft` method.\n * \n * The swipe mixins [TouchSwipeMixin](TouchSwipeMixin) and\n * [TrackpadSwipeMixin](TrackpadSwipeMixin) invoke this method when the user\n * finishes a gesture to swipe left.\n * \n * @function swipeRight\n */\nconst swipeRight = Symbol('swipeRight');\n\n/**\n * Symbol for the `swipeUp` method.\n * \n * The swipe mixin [TouchSwipeMixin](TouchSwipeMixin) invokes this method when\n * the user finishes a gesture to swipe up.\n * \n * @function swipeUp\n */\nconst swipeUp = Symbol('swipeUp');\n\n/**\n * Symbol for the `swipeTarget` property.\n * \n * By default, the swipe mixins [TouchSwipeMixin](TouchSwipeMixin) and\n * [TrackpadSwipeMixin](TrackpadSwipeMixin) assume that the element the user\n * is swiping the top-level element. In some cases (e.g., [Drawer](Drawer)),\n * the component wants to let the user swipe a shadow element. In such cases,\n * this property should return the element that should be swiped.\n * \n * The swipe target's `offsetWidth` is used by the mixin to calculate the\n * `state.swipeFraction` member when the user drags their finger. The\n * `swipeFraction` is the distance the user has dragged in the current drag\n * operation over that `offsetWidth`.\n * \n * @var {HTMLElement} swipeTarget\n */\nconst swipeTarget = Symbol('swipeTarget');\n\n/**\n * Symbol for the `tap` method.\n *\n * This method is invoked when an element receives an operation that should\n * be interpreted as a tap. [TapSelectionMixin](TapSelectionMixin)\n * invokes this when the element receives a `mousedown` event, for example.\n *\n * @function tap\n */\nconst tap = Symbol('tap');\n\n/**\n * Symbol for the `template` method.\n *\n * [ShadowTemplateMixin](ShadowTemplateMixin) uses this property to obtain a\n * component's template, which it will clone into a component's shadow root.\n * \n * @var {HTMLTemplateElement} template\n */\nconst template = Symbol('template');\n\n/**\n * Symbol for the `update` method.\n * \n * [PopulateUpdateMixin](PopulateUpdateMixin) invokes this method as the second\n * of two rendering phases. In this phase, the component can apply updates to\n * the top-level host element or its shadow elements to reflect the component's\n * current state.\n * \n * @function update\n */\nconst update = Symbol('update');\n\n\n//# sourceURL=webpack:///../elix/src/symbols.js?");

/***/ }),

/***/ "../elix/src/template.js":
/*!*******************************!*\
  !*** ../elix/src/template.js ***!
  \*******************************/
/*! exports provided: concat, createElement, defaultSlot, html, replace, transmute, wrap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"concat\", function() { return concat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createElement\", function() { return createElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultSlot\", function() { return defaultSlot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"html\", function() { return html; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"replace\", function() { return replace; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transmute\", function() { return transmute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"wrap\", function() { return wrap; });\n/**\n * Helpers for dynamically creating and patching component templates.\n * \n * The [ShadowTemplateMixin](ShadowTemplateMixin) lets you define a component\n * template that will be used to popuplate the shadow subtree of new component\n * instances. These helpers, especially the [html](#html) function, are intended\n * to simplify the creation of such templates.\n * \n * In particular, these helpers can be useful in [patching\n * templates](customizing#template-patching) inherited from a base class.\n * \n * Some of these functions take _descriptors_ that can either be a class, a tag\n * name, or an HTML template. These are generally used to fill specific roles in\n * an element's template; see [element roles](customizing#element-roles).\n * \n * @module template\n */\n\n\n/**\n * Returns a new template whose content is the concatenated content of the\n * supplied templates.\n * \n * This function is used by Elix components to customize their appearance,\n * For example, a component might\n * [append an additional stylesheet](customizing#appending-an-additional-stylesheet)\n * to extend or override the styles provided by a base class template.\n * \n * @param  {HTMLTemplateElement[]} templates - the templates to concatenate\n * @returns {HTMLTemplateElement} - a new template created by concatenating the\n * input templates\n */\nfunction concat(...templates) {\n  const result = document.createElement('template');\n  templates.forEach(template => {\n    const clone = document.importNode(template.content, true);\n    result.content.appendChild(clone);\n  });\n  return result;\n}\n\n\n/**\n * Create an element from a role descriptor (a component class constructor,\n * an HTML tag name, or an HTML template).\n * \n * If the descriptor is an HTML template, and the resulting document fragment\n * contains a single top-level node, that node is returned directly (instead of\n * the fragment).\n * \n * @param {(Function|string|HTMLTemplateElement)} descriptor - the descriptor that\n * will be used to create the element\n * @returns {Node} the new element\n */\nfunction createElement(descriptor) {\n  if (typeof descriptor === 'function') {\n    // Component class constructor\n    /** @type {any} */\n    const cast = descriptor;\n    return new cast();\n  } else if (descriptor instanceof HTMLTemplateElement) {\n    // Template\n    const fragment = document.importNode(descriptor.content, true);\n    return fragment.children.length === 1 ?\n      fragment.children[0] :\n      fragment;\n  } else {\n    // String tag name: e.g., 'div'\n    return document.createElement(descriptor);\n  }\n}\n\n\n/**\n * Search a tree for a default slot: a slot with no \"name\" attribute. Return\n * null if not found.\n * \n * @param {DocumentFragment} tree - the tree to search\n * @returns {Node|null}\n */\nfunction defaultSlot(tree) {\n  return tree.querySelector('slot:not([name])');\n}\n\n\n/**\n * A JavaScript template string literal that returns an HTML template.\n * \n * Example:\n * \n *     const myTemplate = html`Hello, <em>world</em>.`\n * \n * returns an `HTMLTemplateElement` whose `innerHTML` is `Hello, <em>world</em>.`\n * \n * This function is called `html` so that it can be easily used with HTML\n * syntax-highlighting extensions for various popular code editors.\n * \n * @param {TemplateStringsArray} strings - the strings passed to the JavaScript template\n * literal\n * @param {string[]} substitutions - the variable values passed to the\n * JavaScript template literal\n * @returns {HTMLTemplateElement}\n */\nfunction html(strings, ...substitutions) {\n  // Concatenate the strings and substitutions.\n  const complete = strings.map((string, index) => {\n    const substitution = index < substitutions.length ?\n      substitutions[index] :\n      '';\n    return `${string}${substitution}`;\n  }).join('');\n  const template = document.createElement('template');\n  template.innerHTML = complete;\n  return template;\n}\n\n\n/**\n * Replace an original node in a tree or document fragment with the indicated\n * replacement node. The attributes, classes, styles, and child nodes of the\n * original node will be moved to the replacement.\n * \n * @param {(Node|null)} original - an existing node to be replaced\n * @param {Node} replacement - the node to replace the existing node with\n * @returns {Node} the updated replacement node\n */\nfunction replace(original, replacement) {\n  if (!original) {\n    throw 'The original element could not be found.';\n  }\n  const parent = original.parentNode;\n  if (!parent) {\n    throw 'An element must have a parent before it can be substituted.'\n  }\n  if ((original instanceof HTMLElement || original instanceof SVGElement) &&\n      (replacement instanceof HTMLElement || replacement instanceof SVGElement)) {\n    // Merge attributes from original to replacement, letting replacement win\n    // conflicts. Handle classes and styles separately (below).\n    Array.prototype.forEach.call(original.attributes, attribute => {\n      if (!replacement.getAttribute(attribute.name) &&\n          attribute.name !== 'class' && attribute.name !== 'style') {\n        replacement.setAttribute(attribute.name, attribute.value);\n      }\n    });\n    // Copy classes/styles from original to replacement, letting replacement win\n    // conflicts.\n    Array.prototype.forEach.call(original.classList, className => {\n      replacement.classList.add(className);\n    });\n    Array.prototype.forEach.call(original.style, key => {\n      if (!replacement.style[key]) {\n        replacement.style[key] = original.style[key];\n      }\n    });\n  }\n  // Copy over children.\n  while(original.childNodes.length > 0) {\n    replacement.appendChild(original.childNodes[0]);\n  }\n\n  parent.replaceChild(replacement, original);\n  return replacement;\n}\n\n\n/**\n * Replace a node or nodes with new element(s), transferring all attributes,\n * classes, styles, and child nodes from the original(s) to the replacement(s).\n * \n * The descriptor used for the replacements can be a 1) component class\n * constructor, 2) an HTML tag name, or 3) an HTML template. For #1 and #2, if\n * the existing elements that match the selector are already of the desired\n * class/tag name, the replacement operation is skipped.\n * \n * @param {(Array|NodeList|Node)} original - the node to replace\n * @param {(Function|string|HTMLTemplateElement)} descriptor - the descriptor used\n * to generate replacement elements\n * @returns {Array|Node} the replacement node(s)\n */\nfunction transmute(original, descriptor) {\n  if (original instanceof Array) {\n    // Transmute an array.\n    const replacements = original.map(node => transmute(node, descriptor));\n    return replacements;\n  } else if (original instanceof NodeList) {\n    // Transmute a list of nodes.\n    const replacements = [...original].map(node => transmute(node, descriptor));\n    return replacements;\n  } else if ((typeof descriptor === 'function' && original.constructor === descriptor) ||\n    (typeof descriptor === 'string' && original instanceof Element && \n      original.localName === descriptor)) {\n    // Already correct type of element, no transmutation necessary.\n    return original;\n  } else {\n    // Transmute the single node.\n    const replacement = createElement(descriptor);\n    replace(original, replacement);\n    return replacement;\n  }\n}\n\n\n/**\n * Destructively wrap a node or document fragment with the indicated wrapper\n * node. The contents of the original node/fragment are moved to the indicated\n * destination node (which should be a node within the wrapper).\n * \n * @param {Node} original - the node to wrap\n * @param {(DocumentFragment|Element)} wrapper - the node to wrap with\n * @param {string} destination - a CSS selector indicating a node in the wrapper\n * in which the original node should be put\n */\nfunction wrap(original, wrapper, destination) {\n  const destinationNode = wrapper.querySelector(destination);\n  if (!destinationNode) {\n    throw `Can't find the wrapper destination indicated by \"${destination}\".`;\n  }\n  if (original.parentNode) {\n    original.parentNode.replaceChild(wrapper, original);\n    destinationNode.appendChild(original);\n  } else if (original instanceof DocumentFragment) {\n    while (original.childNodes.length > 0) {\n      destinationNode.appendChild(original.childNodes[0]);\n    }\n    original.appendChild(wrapper);\n  }\n}\n\n\n//# sourceURL=webpack:///../elix/src/template.js?");

/***/ }),

/***/ "../elix/src/utilities.js":
/*!********************************!*\
  !*** ../elix/src/utilities.js ***!
  \********************************/
/*! exports provided: applyChildNodes, closestFocusableAncestor, deepContains, firstFocusableElement, forwardFocus, indexOfItemContainingTarget, ownEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyChildNodes\", function() { return applyChildNodes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"closestFocusableAncestor\", function() { return closestFocusableAncestor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deepContains\", function() { return deepContains; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"firstFocusableElement\", function() { return firstFocusableElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forwardFocus\", function() { return forwardFocus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"indexOfItemContainingTarget\", function() { return indexOfItemContainingTarget; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ownEvent\", function() { return ownEvent; });\n/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ \"../elix/src/symbols.js\");\n\n\n\n/**\n * Miscellaneous utility functions for web components\n * \n * @module utilities\n */\n\nconst mousedownListenerKey = Symbol('mousedownListener');\n\n\n/**\n * Sets the element's `childNodes` to the given set of nodes.\n * \n * This adds or removes the element's `childNodes` as necessary to match the\n * nodes indicated in the `childNodes` parameter.\n * \n * @param {Node} element - the element to update\n * @param {(NodeList|Node[])} childNodes - the set of nodes to apply\n */\nfunction applyChildNodes(element, childNodes) {\n  // If the childNodes parameter is the actual childNodes of an element, then as\n  // we append those nodes to the indicated target element, they'll get removed\n  // from the original set. To keep the list stable, we make a copy.\n  const copy = [...childNodes];\n\n  const oldLength = element.childNodes.length;\n  const newLength = copy.length;\n  const length = Math.max(oldLength, newLength);\n  for (let i = 0; i < length; i++) {\n    const oldChild = element.childNodes[i];\n    const newChild = copy[i];\n    if (i >= oldLength) {\n      // Add new item not in old set.\n      element.appendChild(newChild);\n    } else if (i >= newLength) {\n      // Remove old item past end of new set.\n      element.removeChild(element.childNodes[newLength]);\n    } else if (oldChild !== newChild) {\n      if (copy.indexOf(oldChild, i) >= i) {\n        // Old node comes later in final set. Insert the new node rather than\n        // replacing it so that we don't detach the old node only to have to\n        // reattach it later.\n        element.insertBefore(newChild, oldChild);\n      } else {\n        // Replace old item with new item.\n        element.replaceChild(newChild, oldChild);\n      }\n    }\n  }\n}\n\n\n// Return the closest focusable ancestor in the *composed* tree.\n// If no focusable ancestor is found, returns null.\nfunction closestFocusableAncestor(element) {\n  // We want an element that has a tabIndex of 0 or more. We ignore disabled\n  // elements, and slot elements (which oddly have a tabIndex of 0).\n  if (element.tabIndex >= 0 && !element.disabled\n    && !(element instanceof HTMLSlotElement)) {\n    // Found an enabled component that wants the focus.\n    return element;\n  }\n  // If an element defines a focusTarget (e.g., via DelegateFocusMixin),\n  // see if that focusTarget is focusable at this point.\n  const focusTarget = element[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"focusTarget\"]];\n  if (focusTarget && focusTarget.tabIndex >= 0 && !focusTarget.disabled) {\n    return focusTarget;\n  }\n  // Not focusable; look higher in composed tree.\n  const parent = element.assignedSlot ?\n    element.assignedSlot :\n    // @ts-ignore\n    element.parentNode instanceof ShadowRoot ?\n      element.parentNode.host :\n      element.parentNode;\n  return parent ?\n    closestFocusableAncestor(parent) :\n    null;\n}\n\n\n /**\n * Returns true if the first node contains the second, even if the second node\n * is in a shadow tree.\n *\n * The standard Node.contains() function does not account for Shadow DOM, and\n * returns false if the supplied target node is sitting inside a shadow tree\n * within the container.\n * \n * @param {Node} container - The container to search within.\n * @param {Node} target - The node that may be inside the container.\n * @returns {boolean} - True if the container contains the target node.\n */\nfunction deepContains(container, target) {\n  /** @type {any} */\n  let current = target;\n  while (current) {\n    const parent = current.assignedSlot || current.parentNode || current.host;\n    if (parent === container) {\n      return true;\n    }\n    current = parent;\n  }\n  return false;\n}\n\n\n/**\n * Return the first focusable element in the composed tree below the given root.\n * The composed tree includes nodes assigned to slots.\n *\n * This heuristic considers only the document order of the elements below the\n * root and whether a given element is focusable. It currently does not respect\n * the tab sort order defined by tabindex values greater than zero.\n * \n * @param {HTMLElement} root - the root of the tree in which to search\n * @returns {HTMLElement|null} - the first focusable element, or null if none\n * was found\n */\nfunction firstFocusableElement(root) {\n  // CSS selectors for focusable elements from\n  // https://stackoverflow.com/a/30753870/76472\n  const focusableQuery = 'a[href],area[href],button:not([disabled]),details,iframe,input:not([disabled]),select:not([disabled]),textarea:not([disabled]),[contentEditable=\"true\"],[tabindex]';\n  // Walk the tree looking for nodes that match the above selectors.\n  const walker = walkComposedTree(root, node =>\n    node instanceof HTMLElement && \n    node.matches(focusableQuery) &&\n    node.tabIndex >= 0\n  );\n  // We only actually need the first matching value.\n  const { value } = walker.next();\n  // value, if defined, will always be an HTMLElement, but we do the following\n  // check to pass static type checking.\n  return value instanceof HTMLElement ?\n    value :\n    null;\n}\n\n\n/**\n * Trap any `mousedown` events on the `origin` element and prevent the default\n * behavior from setting the focus on that element. Instead, put the focus on\n * the `target` element (or, if the `target` is not focusable, on the target's\n * closest focusable ancestor).\n * \n * If this method is called again with the same `origin` element, the old\n * forwarding is overridden, and focus will now go to the new `target` element.\n * \n * If the `target` parameter is `null`, focus handling will be removed from the\n * indicated `origin`.\n * \n * @param {HTMLElement} origin\n * @param {HTMLElement|null} target\n */\nfunction forwardFocus(origin, target) {\n  if (origin[mousedownListenerKey]) {\n    // Origin was previously forwarding focus, probably to a different target.\n    // Remove the previous event listener.\n    origin.removeEventListener('mousedown', origin[mousedownListenerKey]);\n  }\n  if (target) {\n    origin[mousedownListenerKey] = (event) => {\n      // Only process events for the main (usually left) button.\n      if (event.button !== 0) {\n        return;\n      }\n      // What element wants the focus?\n      const desiredTarget = target[_symbols_js__WEBPACK_IMPORTED_MODULE_0__[\"focusTarget\"]] || target;\n      // What ancestor can actually take the focus?\n      const focusableTarget = closestFocusableAncestor(desiredTarget);\n      focusableTarget.focus();\n      event.preventDefault();  \n    };\n    origin.addEventListener('mousedown', origin[mousedownListenerKey]);\n  }\n}\n\n\n/**\n * Search a list element for the item that contains the specified target.\n * \n * When dealing with UI events (e.g., mouse clicks) that may occur in\n * subelements inside a list item, you can use this routine to obtain the\n * containing list item.\n * \n * @param {NodeList|Node[]} items - A list element containing a set of items\n * @param {Node} target - A target element that may or may not be an item in the\n * list.\n * @returns {number} - The index of the list child that is or contains the\n * indicated target node. Returns -1 if not found.\n */\nfunction indexOfItemContainingTarget(items, target) {\n  return Array.prototype.findIndex.call(items, item =>\n    item === target || deepContains(item, target)\n  );\n}\n\n\n/**\n * Return true if the event came from within the node (or from the node itself);\n * false otherwise.\n * \n * @param {Node} node - The node to consider in relation to the event\n * @param {Event} event - The event which may have been raised within/by the\n * node\n * @returns {boolean} - True if the event was raised within or by the node\n */\nfunction ownEvent(node, event) {\n  /** @type {any} */\n  const cast = event;\n  const eventSource = cast.composedPath()[0];\n  return node === eventSource || deepContains(node, eventSource);\n}\n\n\n// Walk the composed tree at the root for elements that pass the given filter.\nfunction* walkComposedTree(node, filter) {\n  if (filter(node)) {\n    yield node;\n  }\n  let children;\n  if (node.shadowRoot) {\n    // Walk the shadow instead of the light DOM.\n    children = node.shadowRoot.children;\n  } else {\n    const assignedNodes = node instanceof HTMLSlotElement ?\n      node.assignedNodes({ flatten: true }) :\n      [];\n    children = assignedNodes.length > 0 ?\n      // Walk light DOM nodes assigned to this slot.\n      assignedNodes :\n      // Walk light DOM children.\n      node.children;\n  }\n  if (children) {\n    for (let i = 0; i < children.length; i++) {\n      yield* walkComposedTree(children[i], filter);\n    }\n  }\n}\n\n\n//# sourceURL=webpack:///../elix/src/utilities.js?");

/***/ }),

/***/ "../elix/src/weekData.js":
/*!*******************************!*\
  !*** ../elix/src/weekData.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// Generated at Mon Sep 24 2018 15:31:31 GMT-0700 (PDT)\n// from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\nconst weekData = {\n  \"firstDay\": {\n    \"001\": 1,\n    \"AD\": 1,\n    \"AE\": 6,\n    \"AF\": 6,\n    \"AG\": 0,\n    \"AI\": 1,\n    \"AL\": 1,\n    \"AM\": 1,\n    \"AN\": 1,\n    \"AR\": 0,\n    \"AS\": 0,\n    \"AT\": 1,\n    \"AU\": 0,\n    \"AX\": 1,\n    \"AZ\": 1,\n    \"BA\": 1,\n    \"BD\": 0,\n    \"BE\": 1,\n    \"BG\": 1,\n    \"BH\": 6,\n    \"BM\": 1,\n    \"BN\": 1,\n    \"BR\": 0,\n    \"BS\": 0,\n    \"BT\": 0,\n    \"BW\": 0,\n    \"BY\": 1,\n    \"BZ\": 0,\n    \"CA\": 0,\n    \"CH\": 1,\n    \"CL\": 1,\n    \"CM\": 1,\n    \"CN\": 0,\n    \"CO\": 0,\n    \"CR\": 1,\n    \"CY\": 1,\n    \"CZ\": 1,\n    \"DE\": 1,\n    \"DJ\": 6,\n    \"DK\": 1,\n    \"DM\": 0,\n    \"DO\": 0,\n    \"DZ\": 6,\n    \"EC\": 1,\n    \"EE\": 1,\n    \"EG\": 6,\n    \"ES\": 1,\n    \"ET\": 0,\n    \"FI\": 1,\n    \"FJ\": 1,\n    \"FO\": 1,\n    \"FR\": 1,\n    \"GB\": 1,\n    \"GB-alt-variant\": 0,\n    \"GE\": 1,\n    \"GF\": 1,\n    \"GP\": 1,\n    \"GR\": 1,\n    \"GT\": 0,\n    \"GU\": 0,\n    \"HK\": 0,\n    \"HN\": 0,\n    \"HR\": 1,\n    \"HU\": 1,\n    \"ID\": 0,\n    \"IE\": 0,\n    \"IL\": 0,\n    \"IN\": 0,\n    \"IQ\": 6,\n    \"IR\": 6,\n    \"IS\": 1,\n    \"IT\": 1,\n    \"JM\": 0,\n    \"JO\": 6,\n    \"JP\": 0,\n    \"KE\": 0,\n    \"KG\": 1,\n    \"KH\": 0,\n    \"KR\": 0,\n    \"KW\": 6,\n    \"KZ\": 1,\n    \"LA\": 0,\n    \"LB\": 1,\n    \"LI\": 1,\n    \"LK\": 1,\n    \"LT\": 1,\n    \"LU\": 1,\n    \"LV\": 1,\n    \"LY\": 6,\n    \"MA\": 6,\n    \"MC\": 1,\n    \"MD\": 1,\n    \"ME\": 1,\n    \"MH\": 0,\n    \"MK\": 1,\n    \"MM\": 0,\n    \"MN\": 1,\n    \"MO\": 0,\n    \"MQ\": 1,\n    \"MT\": 0,\n    \"MV\": 5,\n    \"MX\": 0,\n    \"MY\": 1,\n    \"MZ\": 0,\n    \"NI\": 0,\n    \"NL\": 1,\n    \"NO\": 1,\n    \"NP\": 0,\n    \"NZ\": 1,\n    \"OM\": 6,\n    \"PA\": 0,\n    \"PE\": 0,\n    \"PH\": 0,\n    \"PK\": 0,\n    \"PL\": 1,\n    \"PR\": 0,\n    \"PT\": 1,\n    \"PY\": 0,\n    \"QA\": 6,\n    \"RE\": 1,\n    \"RO\": 1,\n    \"RS\": 1,\n    \"RU\": 1,\n    \"SA\": 0,\n    \"SD\": 6,\n    \"SE\": 1,\n    \"SG\": 0,\n    \"SI\": 1,\n    \"SK\": 1,\n    \"SM\": 1,\n    \"SV\": 0,\n    \"SY\": 6,\n    \"TH\": 0,\n    \"TJ\": 1,\n    \"TM\": 1,\n    \"TN\": 0,\n    \"TR\": 1,\n    \"TT\": 0,\n    \"TW\": 0,\n    \"UA\": 1,\n    \"UM\": 0,\n    \"US\": 0,\n    \"UY\": 1,\n    \"UZ\": 1,\n    \"VA\": 1,\n    \"VE\": 0,\n    \"VI\": 0,\n    \"VN\": 1,\n    \"WS\": 0,\n    \"XK\": 1,\n    \"YE\": 0,\n    \"ZA\": 0,\n    \"ZW\": 0\n  },\n  \"weekendEnd\": {\n    \"001\": 0,\n    \"AE\": 6,\n    \"AF\": 5,\n    \"BH\": 6,\n    \"DZ\": 6,\n    \"EG\": 6,\n    \"IL\": 6,\n    \"IQ\": 6,\n    \"IR\": 5,\n    \"JO\": 6,\n    \"KW\": 6,\n    \"LY\": 6,\n    \"MA\": 6,\n    \"OM\": 6,\n    \"QA\": 6,\n    \"SA\": 6,\n    \"SD\": 6,\n    \"SY\": 6,\n    \"TN\": 6,\n    \"YE\": 6\n  },\n  \"weekendStart\": {\n    \"001\": 6,\n    \"AE\": 5,\n    \"AF\": 4,\n    \"BH\": 5,\n    \"DZ\": 5,\n    \"EG\": 5,\n    \"IL\": 5,\n    \"IN\": 0,\n    \"IQ\": 5,\n    \"IR\": 5,\n    \"JO\": 5,\n    \"KW\": 5,\n    \"LY\": 5,\n    \"MA\": 5,\n    \"OM\": 5,\n    \"QA\": 5,\n    \"SA\": 5,\n    \"SD\": 5,\n    \"SY\": 5,\n    \"TN\": 5,\n    \"YE\": 5\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (weekData);\n\n\n//# sourceURL=webpack:///../elix/src/weekData.js?");

/***/ }),

/***/ "./main.ts":
/*!*****************!*\
  !*** ./main.ts ***!
  \*****************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var elix_src_DateComboBox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! elix/src/DateComboBox.js */ \"../elix/src/DateComboBox.js\");\n// Import the Elix components we want to use.\n\n// Instantiate an Elix component.\nconst dateComboBox = new elix_src_DateComboBox_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n// TypeScript knows that a DateComboBox's `date` property is strongly typed as a\n// JavaScript Date.\ndateComboBox.date = new Date('1 Jan 2021');\n// We can add the components to the page like any other HTML elements.\n// We can also put components in the page via markup; see index.html.\ndocument.body.appendChild(dateComboBox);\n\n\n//# sourceURL=webpack:///./main.ts?");

/***/ })

/******/ });